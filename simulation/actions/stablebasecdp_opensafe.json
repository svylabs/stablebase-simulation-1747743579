{
  "action": {
    "name": "Open Safe",
    "summary": "Opens a new CDP (Safe).",
    "contract_name": "StableBaseCDP",
    "function_name": "openSafe",
    "probability": 0.7
  },
  "action_detail": {
    "action_name": "Open Safe",
    "contract_name": "StableBaseCDP",
    "function_name": "openSafe",
    "pre_execution_parameter_generation_rules": [
      "The '_safeId' (uint256) parameter must be a unique, positive integer that is not currently associated with an existing Safe or NFT within the contract. This ensures no existing Safe is overwritten and no NFT collision occurs.",
      "The '_amount' (uint256) parameter must be a positive integer, representing the amount of collateral to be deposited into the new Safe. This amount must be greater than 0.",
      "The transaction's 'msg.value' (the amount of Ether sent with the transaction) must be exactly equal to the '_amount' parameter, as it represents the collateral being deposited."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Safe Data Initialization",
        "state_update_descriptions": [
          "A new 'Safe' struct is created and stored in the 'safes' mapping for the given '_safeId'.",
          "The 'collateralAmount' for the new Safe is set to the provided '_amount'.",
          "The 'borrowedAmount', 'weight', 'totalBorrowedAmount', and 'feePaid' for the new Safe are initialized to 0.",
          "A 'LiquidationSnapshot' struct is created and stored in the 'liquidationSnapshots' mapping for the given '_safeId'.",
          "The 'debtPerCollateralSnapshot' in the liquidation snapshot is set to the current 'cumulativeDebtPerUnitCollateral'.",
          "The 'collateralPerCollateralSnapshot' in the liquidation snapshot is set to the current 'cumulativeCollateralPerUnitCollateral'."
        ]
      },
      {
        "category": "Protocol-wide Collateral Tracking",
        "state_update_descriptions": [
          "The 'totalCollateral' state variable is increased by the '_amount' provided as collateral."
        ]
      },
      {
        "category": "NFT Ownership Transfer",
        "state_update_descriptions": [
          "The ownership of the NFT corresponding to '_safeId' is transferred from 'address(0)' (null address) to the 'msg.sender'.",
          "The NFT balance ('_balances') of 'msg.sender' is incremented by 1."
        ]
      },
      {
        "category": "Event Emission",
        "state_update_descriptions": [
          "An 'OpenSafe' event is emitted, signaling the successful creation of a new Safe.",
          "A 'Transfer' event is emitted, signaling the minting and transfer of the Safe NFT."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Safe Data Validation",
        "rule_descriptions": [
          "The 'collateralAmount' of the Safe at '_safeId' must be equal to the '_amount' provided.",
          "The 'borrowedAmount' of the Safe at '_safeId' must be 0.",
          "The 'weight' of the Safe at '_safeId' must be 0.",
          "The 'totalBorrowedAmount' of the Safe at '_safeId' must be 0.",
          "The 'feePaid' of the Safe at '_safeId' must be 0.",
          "The 'debtPerCollateralSnapshot' for '_safeId' must reflect the 'cumulativeDebtPerUnitCollateral' at the time of execution.",
          "The 'collateralPerCollateralSnapshot' for '_safeId' must reflect the 'cumulativeCollateralPerUnitCollateral' at the time of execution."
        ]
      },
      {
        "category": "Total Collateral Validation",
        "rule_descriptions": [
          "The 'totalCollateral' state variable must be equal to its value before the transaction plus the '_amount' provided."
        ]
      },
      {
        "category": "NFT Ownership Validation",
        "rule_descriptions": [
          "The 'ownerOf(_safeId)' function must return the address of 'msg.sender'.",
          "The 'balanceOf(msg.sender)' must have increased by 1 compared to its value before the transaction."
        ]
      },
      {
        "category": "Event Validation",
        "rule_descriptions": [
          "An 'OpenSafe' event must be emitted with the following indexed parameters: 'safeId' equal to the provided '_safeId' and 'owner' equal to 'msg.sender'.",
          "The 'OpenSafe' event's non-indexed parameters 'amount' must match the provided '_amount', 'totalCollateral' must match the updated total collateral, and 'totalDebt' must reflect the current total debt (unchanged by this operation).",
          "A 'Transfer' event must be emitted with 'from' as 'address(0)', 'to' as 'msg.sender', and 'tokenId' as '_safeId'."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Open Safe",
    "contract_name": "StableBaseCDP",
    "function_name": "openSafe",
    "does_register_new_identifier": true,
    "new_identifiers": [
      {
        "name": "safeId",
        "type": "structured_id_internal",
        "has_max_identifier_limit_per_address": false,
        "max_identifier_limit_per_address": 0,
        "description": "A unique identifier for a newly opened Safe (CDP), represented as an ERC721 NFT. Users provide this ID, and the contract ensures its uniqueness before minting."
      }
    ],
    "all_state_updates": [
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "liquidationSnapshots",
            "type": "set",
            "what_does_it_track": "Snapshots of cumulative debt and collateral per unit collateral at the time a Safe is opened.",
            "why_is_is_important": "It provides a historical reference for calculating liquidation amounts for the specific Safe, ensuring that future liquidations or redemptions are based on the correct initial context of the Safe's creation relative to the global state.",
            "when_is_it_updated": "Immediately after the \"Safe\" and \"LiquidationSnapshot\" structs are created in memory, before the total collateral is updated.",
            "how_to_validate_state_update": "Verify that \"liquidationSnapshots[_safeId]\" has been set to the \"LiquidationSnapshot\" struct initialized with the current \"cumulativeDebtPerUnitCollateral\" and \"cumulativeCollateralPerUnitCollateral\" values.",
            "has_conditional_updates": false,
            "summary_of_update": "A new entry is created in the \"liquidationSnapshots\" mapping for the \"_safeId\" with the current global cumulative debt and collateral per unit collateral.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "safes",
            "type": "set",
            "what_does_it_track": "The current state and financial parameters of each individual Safe (CDP), including its collateral, borrowed amount, and fee details.",
            "why_is_is_important": "It stores the fundamental data for each Safe, enabling the protocol to track individual CDP positions, calculate ratios, and manage their lifecycle (e.g., borrowing, repaying, liquidating).",
            "when_is_it_updated": "Immediately after the \"Safe\" and \"LiquidationSnapshot\" structs are created in memory.",
            "how_to_validate_state_update": "Verify that \"safes[_safeId]\" has been set to the \"Safe\" struct initialized with \"_amount\" as \"collateralAmount\" and all other fields (borrowedAmount, weight, totalBorrowedAmount, feePaid) set to zero.",
            "has_conditional_updates": false,
            "summary_of_update": "A new entry is created in the \"safes\" mapping for the \"_safeId\", holding the initial collateral amount and setting borrowed amounts and fees to zero.",
            "conditions": []
          },
          {
            "state_variable_name": "totalCollateral",
            "type": "increment",
            "what_does_it_track": "The cumulative amount of collateral held across all active Safes in the StableBase system.",
            "why_is_is_important": "It provides a global metric of the protocol's collateral backing, crucial for assessing overall system solvency and health.",
            "when_is_it_updated": "After a new Safe is successfully initialized and before the Safe NFT is minted.",
            "how_to_validate_state_update": "Verify that \"totalCollateral\" has increased by \"_amount\" (the collateral provided when opening the Safe).",
            "has_conditional_updates": false,
            "summary_of_update": "The total sum of all collateral locked in the protocol is increased by the \"_amount\" of collateral provided for the new Safe.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "_owners",
            "type": "set",
            "what_does_it_track": "The owner address for each specific ERC721 Safe NFT (\"tokenId\").",
            "why_is_is_important": "It directly links a unique Safe (CDP) to its controlling user, enabling that user to interact with and manage their specific CDP position.",
            "when_is_it_updated": "During the internal \"_update\" function called by \"_safeMint\", which is invoked after the \"safes\" mapping and \"totalCollateral\" are updated.",
            "how_to_validate_state_update": "Verify that \"_owners[_safeId]\" is now equal to \"msg.sender\".",
            "has_conditional_updates": false,
            "summary_of_update": "The \"_safeId\" token is assigned to \"msg.sender\", establishing ownership of the newly minted Safe NFT.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "_balances",
            "type": "increment",
            "what_does_it_track": "The number of ERC721 Safe NFTs held by each address.",
            "why_is_is_important": "It tracks the total number of Safes (CDPs) an individual user owns, allowing them to manage multiple positions within the protocol.",
            "when_is_it_updated": "During the internal \"_update\" function called by \"_safeMint\", which is invoked after the \"safes\" mapping and \"totalCollateral\" are updated.",
            "how_to_validate_state_update": "Verify that \"_balances[msg.sender]\" has increased by 1.",
            "has_conditional_updates": false,
            "summary_of_update": "The number of Safe NFTs owned by \"msg.sender\" is increased by one.",
            "conditions": []
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "StableBaseCDP",
        "code_snippet": "function openSafe(uint256 _safeId, uint256 _amount) external payable {\n        require(_amount > 0, \"Amount must be greater than 0\");\n        require(msg.value == _amount, \"Insufficient collateral\");\n        require(_safeId > 0, \"Invalid Safe ID\"); // To avoid race conditions somewhere in the code\n        require(safes[_safeId].collateralAmount == 0, \"Safe already exists\");\n        require(_ownerOf(_safeId) == address(0), \"Safe already exists\");\n\n        Safe memory safe = Safe({\n            collateralAmount: _amount,\n            borrowedAmount: 0,\n            weight: 0,\n            totalBorrowedAmount: 0,\n            feePaid: 0\n        });\n        LiquidationSnapshot memory liquidationSnapshot = LiquidationSnapshot({\n            debtPerCollateralSnapshot: cumulativeDebtPerUnitCollateral,\n            collateralPerCollateralSnapshot: cumulativeCollateralPerUnitCollateral\n        });\n        liquidationSnapshots[_safeId] = liquidationSnapshot;\n        safes[_safeId] = safe;\n        totalCollateral += _amount;\n\n        _safeMint(msg.sender, _safeId); // mint the NFT Safe to the owner\n        emit OpenSafe(_safeId, msg.sender, _amount, totalCollateral, totalDebt);\n    }\nfunction _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\nfunction _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\nfunction _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\n    }\nfunction _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\nfunction _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\nfunction _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\nfunction _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\nfunction isApprovedForAll(address owner, address operator) external view returns (bool);\nfunction _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\nfunction _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\nfunction _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\nfunction _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "sbdToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "priceOracle",
              "contract_name": "MockPriceOracle"
            },
            {
              "state_variable_name": "stabilityPool",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "dfireTokenStaking",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "safesOrderedForLiquidation",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "safesOrderedForRedemption",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        },
        "constants": [
          {
            "name": "BASIS_POINTS_DIVISOR",
            "value": "10000",
            "type": "uint256"
          },
          {
            "name": "FIRST_TIME_BORROW_BASIS_POINTS_DISCOUNT_THRESHOLD",
            "value": "20",
            "type": "uint256"
          },
          {
            "name": "MINIMUM_DEBT",
            "value": "2000 * 10 ** 18",
            "type": "uint256"
          },
          {
            "name": "PRECISION",
            "value": "10 ** 18",
            "type": "uint256"
          },
          {
            "name": "SBR_FEE_REWARD",
            "value": "1000",
            "type": "uint256"
          },
          {
            "name": "REDEMPTION_LIQUIDATION_FEE",
            "value": "75",
            "type": "uint256"
          },
          {
            "name": "REDEMPTION_BASE_FEE",
            "value": "15",
            "type": "uint256"
          },
          {
            "name": "EXTRA_GAS_COMPENSATION",
            "value": "100000",
            "type": "uint256"
          },
          {
            "name": "BOOTSTRAP_MODE_DEBT_THRESHOLD",
            "value": "5000000 * 10 ** 18",
            "type": "uint256"
          }
        ]
      }
    ]
  }
}