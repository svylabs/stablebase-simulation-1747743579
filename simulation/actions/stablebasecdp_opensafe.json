{
  "action": {
    "name": "Open Safe",
    "summary": "Opens a new CDP (Safe).",
    "contract_name": "StableBaseCDP",
    "function_name": "openSafe",
    "probability": 0.7
  },
  "action_detail": {
    "action_name": "Open Safe",
    "contract_name": "StableBaseCDP",
    "function_name": "openSafe",
    "pre_execution_parameter_generation_rules": [
      "Generate `_safeId` as a unique positive integer, ensuring that `safes[_safeId].collateralAmount == 0` and `_ownerOf(_safeId) == address(0)` evaluate to true before the transaction.",
      "Generate `_amount` as a positive integer representing the amount of collateral to deposit. It must be greater than 0.",
      "The `msg.value` (amount of ETH sent with the transaction) must be equal to `_amount`."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Safe Data",
        "state_update_descriptions": [
          "A new Safe is created and stored in the `safes` mapping with the provided `_safeId`. The Safe's `collateralAmount` is set to `_amount`, `borrowedAmount` is set to 0, `weight` is set to 0, `totalBorrowedAmount` is set to 0, and `feePaid` is set to 0.",
          "A liquidation snapshot is created and stored in the `liquidationSnapshots` mapping for the `_safeId`. The snapshot contains the current values of `cumulativeDebtPerUnitCollateral` and `cumulativeCollateralPerUnitCollateral`.",
          "The `totalCollateral` is increased by `_amount`."
        ]
      },
      {
        "category": "NFT Ownership",
        "state_update_descriptions": [
          "The Safe NFT with ID `_safeId` is minted and assigned to the message sender (`msg.sender`). The owner of the NFT will be `msg.sender`."
        ]
      },
      {
        "category": "Accounting",
        "state_update_descriptions": [
          "totalCollateral is increased by the collateral amount provided."
        ]
      },
      {
        "category": "Events",
        "state_update_descriptions": [
          "An `OpenSafe` event is emitted, containing the `_safeId`, the owner (`msg.sender`), the amount of collateral deposited (`_amount`), the updated `totalCollateral`, and the current `totalDebt`."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Safe Data",
        "rule_descriptions": [
          "The `safes[_safeId].collateralAmount` must be equal to `_amount`.",
          "The `safes[_safeId].borrowedAmount` must be 0.",
          "The `safes[_safeId].weight` must be 0.",
          "The `safes[_safeId].totalBorrowedAmount` must be 0.",
          "The `safes[_safeId].feePaid` must be 0.",
          "The `liquidationSnapshots[_safeId].collateralPerCollateralSnapshot` must be equal to the `cumulativeCollateralPerUnitCollateral` of the `StableBaseCDP` contract.",
          "The `liquidationSnapshots[_safeId].debtPerCollateralSnapshot` must be equal to the `cumulativeDebtPerUnitCollateral` of the `StableBaseCDP` contract."
        ]
      },
      {
        "category": "Accounting",
        "rule_descriptions": [
          "The `totalCollateral` of the `StableBaseCDP` contract must be increased by `_amount` compared to its previous value."
        ]
      },
      {
        "category": "NFT Ownership",
        "rule_descriptions": [
          "The `ownerOf(_safeId)` of the `StableBaseCDP` contract must now be equal to `msg.sender`."
        ]
      },
      {
        "category": "Events",
        "rule_descriptions": [
          "An `OpenSafe` event must be emitted by the `StableBaseCDP` contract with the following arguments: `safeId` equal to `_safeId`, `owner` equal to `msg.sender`, `amount` equal to `_amount`, `totalCollateral` equal to the updated `totalCollateral`, and `totalDebt` equal to the current `totalDebt`."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Open Safe",
    "contract_name": "StableBaseCDP",
    "function_name": "openSafe",
    "does_register_new_identifier": true,
    "new_identifiers": [
      {
        "name": "_safeId",
        "type": "random_id",
        "has_max_identifier_limit_per_address": false,
        "max_identifier_limit_per_address": 0,
        "description": "Unique identifier for the newly opened Safe (CDP)."
      }
    ],
    "all_state_updates": [
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "safes",
            "type": "mapping",
            "what_does_it_track": "Stores the details of each Safe, including collateral amount, borrowed amount, weight, total borrowed amount, and fee paid.",
            "why_is_is_important": "Tracks all the safes in the protocol.",
            "when_is_it_updated": "When a new Safe is opened, if the `_safeId` doesn't already exist and other checks pass.",
            "how_to_validate_state_update": "Check that `safes[_safeId]` contains the correct collateral amount, borrowed amount (should be 0 initially), weight (should be 0 initially), total borrowed amount (should be 0 initially), and feePaid(should be 0 initially).",
            "has_conditional_updates": false,
            "summary_of_update": "A new Safe struct is created and stored in the `safes` mapping, using `_safeId` as the key.",
            "conditions": [
              "Amount must be greater than 0",
              "Sufficient collateral must be provided",
              "Safe ID must be greater than 0",
              "Safe must not already exist"
            ]
          },
          {
            "state_variable_name": "liquidationSnapshots",
            "type": "mapping",
            "what_does_it_track": "Stores the cumulative debt per unit collateral and collateral per unit collateral at the time the safe was created. This is used in liquidation calculations.",
            "why_is_is_important": "Tracks the state of cumulative debt and collateral when the safe was created, used for liquidation.",
            "when_is_it_updated": "When a new Safe is opened, if the `_safeId` doesn't already exist and other checks pass.",
            "how_to_validate_state_update": "Check that `liquidationSnapshots[_safeId]` contains the correct `debtPerCollateralSnapshot` and `collateralPerCollateralSnapshot`, corresponding to `cumulativeDebtPerUnitCollateral` and `cumulativeCollateralPerUnitCollateral` respectively, at the time of execution.",
            "has_conditional_updates": false,
            "summary_of_update": "A new LiquidationSnapshot struct is created and stored in the `liquidationSnapshots` mapping, using `_safeId` as the key.",
            "conditions": [
              "Amount must be greater than 0",
              "Sufficient collateral must be provided",
              "Safe ID must be greater than 0",
              "Safe must not already exist"
            ]
          },
          {
            "state_variable_name": "totalCollateral",
            "type": "uint256",
            "what_does_it_track": "Tracks the total amount of collateral in the protocol.",
            "why_is_is_important": "Tracks the total amount of collateral in the protocol, used for calculating global collateralization ratios.",
            "when_is_it_updated": "When a new Safe is opened, if the `_safeId` doesn't already exist and other checks pass.",
            "how_to_validate_state_update": "Check that `totalCollateral` has increased by `_amount`.",
            "has_conditional_updates": false,
            "summary_of_update": "The `totalCollateral` variable is increased by the `_amount` of collateral deposited.",
            "conditions": [
              "Amount must be greater than 0",
              "Sufficient collateral must be provided",
              "Safe ID must be greater than 0",
              "Safe must not already exist"
            ]
          }
        ]
      },
      {
        "contract_name": "ERC721",
        "state_updated": [
          {
            "state_variable_name": "_owners",
            "type": "mapping",
            "what_does_it_track": "Tracks the owner of each Safe NFT, representing ownership of the Safe.",
            "why_is_is_important": "Maps a unique safeId to the owner of the safe, adhering to ERC721 ownership standards.",
            "when_is_it_updated": "When a new Safe is opened, after other validity checks pass. Part of the ERC721 `_safeMint` function.",
            "how_to_validate_state_update": "Call `ownerOf(_safeId)` to verify it returns `msg.sender`.",
            "has_conditional_updates": false,
            "summary_of_update": "The `_owners` mapping in the ERC721 contract is updated with the `msg.sender` as the owner of the `_safeId` token.",
            "conditions": [
              "Amount must be greater than 0",
              "Sufficient collateral must be provided",
              "Safe ID must be greater than 0",
              "Safe must not already exist"
            ]
          },
          {
            "state_variable_name": "_balances",
            "type": "mapping",
            "what_does_it_track": "Tracks the number of tokens held by each user.",
            "why_is_is_important": "Tracks the token balance of each user, adhering to ERC721 balance standards.",
            "when_is_it_updated": "When a new Safe is opened, after other validity checks pass. Part of the ERC721 `_safeMint` function.",
            "how_to_validate_state_update": "Call `balanceOf(msg.sender)` to verify it returns `1` (or incremented if the user already owned other safeIds).",
            "has_conditional_updates": false,
            "summary_of_update": "The `_balances` mapping in the ERC721 contract is updated with the balance of the `msg.sender` incremented by 1.",
            "conditions": [
              "Amount must be greater than 0",
              "Sufficient collateral must be provided",
              "Safe ID must be greater than 0",
              "Safe must not already exist"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "StableBaseCDP",
        "code_snippet": "function openSafe(uint256 _safeId, uint256 _amount) external payable {\n        require(_amount > 0, \"Amount must be greater than 0\");\n        require(msg.value == _amount, \"Insufficient collateral\");\n        require(_safeId > 0, \"Invalid Safe ID\"); // To avoid race conditions somewhere in the code\n        require(safes[_safeId].collateralAmount == 0, \"Safe already exists\");\n        require(_ownerOf(_safeId) == address(0), \"Safe already exists\");\n\n        Safe memory safe = Safe({\n            collateralAmount: _amount,\n            borrowedAmount: 0,\n            weight: 0,\n            totalBorrowedAmount: 0,\n            feePaid: 0\n        });\n        LiquidationSnapshot memory liquidationSnapshot = LiquidationSnapshot({\n            debtPerCollateralSnapshot: cumulativeDebtPerUnitCollateral,\n            collateralPerCollateralSnapshot: cumulativeCollateralPerUnitCollateral\n        });\n        liquidationSnapshots[_safeId] = liquidationSnapshot;\n        safes[_safeId] = safe;\n        totalCollateral += _amount;\n\n        _safeMint(msg.sender, _safeId); // mint the NFT Safe to the owner\n        emit OpenSafe(_safeId, msg.sender, _amount, totalCollateral, totalDebt);\n    }\nfunction _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\nfunction _safeMint(address to, uint256 tokenId) internal {\n        _safeMint(to, tokenId, \"\");\n    }\nfunction _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\n        _mint(to, tokenId);\n        ERC721Utils.checkOnERC721Received(_msgSender(), address(0), to, tokenId, data);\n    }\nfunction _mint(address to, uint256 tokenId) internal {\n        if (to == address(0)) {\n            revert ERC721InvalidReceiver(address(0));\n        }\n        address previousOwner = _update(to, tokenId, address(0));\n        if (previousOwner != address(0)) {\n            revert ERC721InvalidSender(address(0));\n        }\n    }\nfunction _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\nfunction _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\nfunction _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\nfunction isApprovedForAll(address owner, address operator) external view returns (bool);\nfunction _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\nfunction _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\nfunction _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\nfunction _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "sbdToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "priceOracle",
              "contract_name": "MockPriceOracle"
            },
            {
              "state_variable_name": "stabilityPool",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "dfireTokenStaking",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "safesOrderedForLiquidation",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "safesOrderedForRedemption",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        }
      }
    ]
  }
}