{
  "action": {
    "name": "Set Price",
    "summary": "Allows the owner to set the price.",
    "contract_name": "MockPriceOracle",
    "function_name": "setPrice",
    "probability": 0.9
  },
  "action_detail": {
    "action_name": "Set Price",
    "contract_name": "MockPriceOracle",
    "function_name": "setPrice",
    "pre_execution_parameter_generation_rules": [
      "The `_price` parameter must be a non-negative integer.",
      "The `_price` parameter should represent the desired price without considering the 1e18 scaling factor.",
      "The transaction must be sent by the owner of the contract."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Price",
        "state_update_descriptions": [
          "The `price` variable is updated to the new price, multiplied by 1e18."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Price",
        "rule_descriptions": [
          "Validate that the `price` variable is equal to the provided `_price` parameter multiplied by 1e18.",
          "Verify that the `price` variable is greater than or equal to zero."
        ]
      },
      {
        "category": "Ownership",
        "rule_descriptions": [
          "Verify that the owner remains unchanged after the execution."
        ]
      },
      {
        "category": "Events",
        "rule_descriptions": [
          "Verify that no `OwnershipTransferred` event is emitted during the execution."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Set Price",
    "contract_name": "MockPriceOracle",
    "function_name": "setPrice",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "MockPriceOracle",
        "state_updated": [
          {
            "state_variable_name": "price",
            "type": "uint256",
            "what_does_it_track": "Tracks the current price of the asset.",
            "why_is_is_important": "This variable holds the current price, which is crucial for other functionalities relying on price feeds.",
            "when_is_it_updated": "It is updated when the owner calls the 'setPrice' function.",
            "how_to_validate_state_update": "Check the value of the 'price' storage variable after the function execution. The 'price' variable should be equal to the input '_price' multiplied by 1e18.",
            "has_conditional_updates": true,
            "summary_of_update": "The 'price' state variable is updated with the new price provided as input, scaled by 1e18.",
            "conditions": [
              "The function must be called by the owner."
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "MockPriceOracle",
        "code_snippet": "function setPrice(uint256 _price) external onlyOwner {\n        price = _price * 1e18;\n    }",
        "references": {
          "references": []
        },
        "constants": []
      }
    ]
  }
}