{
  "action": {
    "name": "Claim",
    "summary": "Allows a user to claim their rewards.",
    "contract_name": "StabilityPool",
    "function_name": "claim",
    "probability": 0.6
  },
  "action_detail": {
    "action_name": "Claim",
    "contract_name": "StabilityPool",
    "function_name": "claim",
    "pre_execution_parameter_generation_rules": [
      "No parameters are required for this specific 'claim()' function overload."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "User Specific State Updates",
        "state_update_descriptions": [
          "The 'rewardSnapshot' for the user's 'UserInfo' struct is updated to the current 'totalRewardPerToken'.",
          "The 'collateralSnapshot' for the user's 'UserInfo' struct is updated to the current 'totalCollateralPerToken'.",
          "The 'cumulativeProductScalingFactor' for the user's 'UserInfo' struct is updated to the current 'stakeScalingFactor'.",
          "The 'stakeResetCount' for the user's 'UserInfo' struct is updated to the current 'stakeResetCount'.",
          "The 'stake' for the user's 'UserInfo' struct is adjusted based on the effective stake calculation using '_getUserEffectiveStake'.",
          "The 'rewardSnapshot' in 'sbrRewardSnapshots' for the user (msg.sender) is updated to the current 'totalSbrRewardPerToken', if SBR reward distribution has not 'ENDED'.",
          "The 'status' in 'sbrRewardSnapshots' for the user (msg.sender) is set to 'CLAIMED', if SBR reward distribution has 'ENDED' and the status was not already 'CLAIMED'."
        ]
      },
      {
        "category": "Balance Updates for Claiming User",
        "state_update_descriptions": [
          "The 'stakingToken' balance of the claiming user (msg.sender) increases by the calculated pending reward amount.",
          "The native token balance of the claiming user (msg.sender) increases by the calculated pending collateral amount.",
          "The 'sbrToken' balance of the claiming user (msg.sender) increases by the calculated pending SBR rewards amount."
        ]
      },
      {
        "category": "Protocol-Wide SBR Reward Distribution Updates",
        "state_update_descriptions": [
          "If 'sbrRewardDistributionStatus' was 'STARTED' and 'block.timestamp' exceeds 'sbrRewardDistributionEndTime', 'sbrRewardDistributionStatus' is set to 'ENDED'.",
          "If 'sbrRewardDistributionStatus' was 'NOT_STARTED', it is set to 'STARTED'.",
          "'lastSBRRewardDistributedTime' is updated to the current 'block.timestamp'.",
          "If 'sbrRewardDistributionStatus' was 'NOT_STARTED', 'sbrRewardDistributionEndTime' is set to 'block.timestamp + 365 days'.",
          "If 'totalStakedRaw' is greater than 0, 'totalSbrRewardPerToken' increases by the calculated SBR rewards for the elapsed time.",
          "If 'totalStakedRaw' is greater than 0, 'sbrRewardLoss' is updated based on the SBR reward calculation."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Event Emissions",
        "rule_descriptions": [
          "A 'RewardClaimed' event must be emitted with the correct user address, total reward, reward frontend fee (0), total collateral, and collateral frontend fee (0).",
          "If SBR rewards were calculated as pending and claimed (i.e., 'pendingSbrRewards' > 0), a 'DFireRewardClaimed' event must be emitted with the correct user address, amount, and frontend fee (0).",
          "If 'sbrRewardDistributionStatus' changed or SBR rewards were added to the pool, an 'SBRRewardsAdded' event must be emitted with the correct 'lastTime', 'currentTime', 'rewardAmount', and 'totalRewardPerToken'."
        ]
      },
      {
        "category": "User Balance and State Verification",
        "rule_descriptions": [
          "The 'stakingToken' balance of 'msg.sender' must have increased by 'userPendingReward' (as calculated internally before fee deduction, which is 0 for this function).",
          "The native token balance of 'msg.sender' must have increased by 'userPendingCollateral' (as calculated internally before fee deduction, which is 0 for this function).",
          "The 'sbrToken' balance of 'msg.sender' must have increased by 'userPendingSbrRewards' (as calculated internally before fee deduction, which is 0 for this function).",
          "The 'rewardSnapshot' of 'StabilityPool.users[msg.sender]' must be equal to the 'totalRewardPerToken' value at the time of claim execution.",
          "The 'collateralSnapshot' of 'StabilityPool.users[msg.sender]' must be equal to the 'totalCollateralPerToken' value at the time of claim execution.",
          "The 'cumulativeProductScalingFactor' of 'StabilityPool.users[msg.sender]' must be equal to the 'stakeScalingFactor' after execution.",
          "The 'stakeResetCount' of 'StabilityPool.users[msg.sender]' must be equal to the 'stakeResetCount' after execution.",
          "The 'stake' of 'StabilityPool.users[msg.sender]' must be updated to its calculated effective stake.",
          "If SBR rewards were claimable and distribution is not 'ENDED', the 'rewardSnapshot' of 'StabilityPool.sbrRewardSnapshots[msg.sender]' must be equal to the 'totalSbrRewardPerToken' at the time of claim execution.",
          "If SBR rewards distribution was 'ENDED' and 'StabilityPool.sbrRewardSnapshots[msg.sender].status' was not 'CLAIMED' prior to execution, it must be 'CLAIMED' after execution."
        ]
      },
      {
        "category": "Protocol State Verification",
        "rule_descriptions": [
          "If 'sbrRewardDistributionStatus' was 'NOT_STARTED' before execution, it must be 'STARTED' after execution, and 'sbrRewardDistributionEndTime' must be set to 'block.timestamp + 365 days'.",
          "If 'sbrRewardDistributionStatus' was 'STARTED' and 'block.timestamp' is past 'sbrRewardDistributionEndTime', 'sbrRewardDistributionStatus' must be 'ENDED'.",
          "The 'lastSBRRewardDistributedTime' must be updated to the 'block.timestamp' at the time of transaction execution.",
          "If SBR rewards were added (i.e., 'totalStakedRaw' > 0), 'totalSbrRewardPerToken' must reflect the correct increase based on elapsed time and 'sbrDistributionRate'.",
          "If SBR rewards were added (i.e., 'totalStakedRaw' > 0), 'sbrRewardLoss' must reflect the correct update based on the SBR reward calculation."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Claim",
    "contract_name": "StabilityPool",
    "function_name": "claim",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "StabilityPool",
        "state_updated": [
          {
            "state_variable_name": "users[msg.sender].rewardSnapshot",
            "type": "numeric",
            "what_does_it_track": "The snapshot of the `totalRewardPerToken` at the time the user last updated their stake or claimed rewards. This is used to calculate pending rewards.",
            "why_is_is_important": "It is crucial for calculating the accurate amount of pending staking rewards a user has accumulated since their last interaction. Without this snapshot, rewards could be miscalculated.",
            "when_is_it_updated": "Every time a user claims rewards via the `_updateRewards` function.",
            "how_to_validate_state_update": "Verify that user.rewardSnapshot is updated to the exact value of totalRewardPerToken at the time of execution. This is for the msg.sender's specific UserInfo.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's reward snapshot to the current total reward per token to reflect claimed rewards and reset the basis for future reward calculations.",
            "conditions": []
          },
          {
            "state_variable_name": "users[msg.sender].collateralSnapshot",
            "type": "numeric",
            "what_does_it_track": "The snapshot of the `totalCollateralPerToken` at the time the user last updated their stake or claimed collateral. This is used to calculate pending collateral.",
            "why_is_is_important": "It is crucial for calculating the accurate amount of pending collateral rewards a user has accumulated since their last interaction. Without this snapshot, collateral could be miscalculated.",
            "when_is_it_updated": "Every time a user claims rewards via the `_updateRewards` function.",
            "how_to_validate_state_update": "Verify that user.collateralSnapshot is updated to the exact value of totalCollateralPerToken at the time of execution. This is for the msg.sender's specific UserInfo.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's collateral snapshot to the current total collateral per token to reflect claimed collateral and reset the basis for future collateral calculations.",
            "conditions": []
          },
          {
            "state_variable_name": "sbrRewardSnapshots[msg.sender].rewardSnapshot",
            "type": "numeric",
            "what_does_it_track": "The snapshot of `totalSbrRewardPerToken` for a specific user, used to calculate their pending SBR rewards.",
            "why_is_is_important": "Ensures accurate calculation of a user's pending SBR rewards, similar to `rewardSnapshot` and `collateralSnapshot` but specifically for SBR tokens.",
            "when_is_it_updated": "When a user claims rewards, specifically if `sbrRewardDistributionStatus` is not `ENDED`.",
            "how_to_validate_state_update": "Verify that sbrRewardSnapshots[msg.sender].rewardSnapshot is updated to the exact value of totalSbrRewardPerToken if the SBR reward distribution has not ended.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates the user's SBR reward snapshot to the current total SBR reward per token, if SBR distribution is still active, to reflect claimed SBR rewards and reset the basis for future SBR reward calculations.",
            "conditions": [
              "sbrRewardDistributionStatus != SBRRewardDistribution.ENDED"
            ]
          },
          {
            "state_variable_name": "sbrRewardSnapshots[msg.sender].status",
            "type": "enum",
            "what_does_it_track": "The claim status of SBR rewards for a particular user (e.g., NOT_STARTED, STARTED, ENDED, CLAIMED).",
            "why_is_is_important": "Prevents users from repeatedly claiming SBR rewards after the distribution period has concluded and their final rewards have been accounted for.",
            "when_is_it_updated": "When SBR reward distribution has `ENDED` and the user's SBR reward status is not yet `CLAIMED`.",
            "how_to_validate_state_update": "Verify that sbrRewardSnapshots[msg.sender].status is set to SBRRewardDistribution.CLAIMED only if the SBR reward distribution has ended and the user's status is not already CLAIMED.",
            "has_conditional_updates": true,
            "summary_of_update": "Marks a user's SBR reward claim status as 'CLAIMED' once the SBR reward distribution period has officially ended, preventing further claims.",
            "conditions": [
              "sbrRewardDistributionStatus == SBRRewardDistribution.ENDED",
              "sbrRewardSnapshots[msg.sender].status != SBRRewardDistribution.CLAIMED"
            ]
          },
          {
            "state_variable_name": "users[msg.sender].stake",
            "type": "numeric",
            "what_does_it_track": "The amount of staking tokens a user has deposited into the Stability Pool.",
            "why_is_is_important": "It represents the user's actual contribution to the pool, which is used for calculating their share of rewards and collateral. Maintaining an accurate effective stake is vital for fairness and correct system operation.",
            "when_is_it_updated": "Every time a user claims rewards via the `_updateUserStake` function, provided `user.cumulativeProductScalingFactor` is not zero.",
            "how_to_validate_state_update": "Verify that user.stake is updated to the value returned by _getUserEffectiveStake(user), which accounts for the current stakeScalingFactor and the user's cumulativeProductScalingFactor and stakeResetCount.",
            "has_conditional_updates": true,
            "summary_of_update": "Adjusts the user's stake to its current effective value by applying the relevant scaling factors and reset counts, ensuring accurate representation of their contribution.",
            "conditions": [
              "user.cumulativeProductScalingFactor != 0"
            ]
          },
          {
            "state_variable_name": "users[msg.sender].cumulativeProductScalingFactor",
            "type": "numeric",
            "what_does_it_track": "A cumulative product of scaling factors applied to a user's stake, used to adjust their effective stake over time, especially after pool operations like liquidations.",
            "why_is_is_important": "It is essential for correctly calculating a user's effective stake and preventing dilution or over-rewarding due to changes in the overall pool dynamics. It ensures that the user's stake value is correctly adjusted based on the system's scaling.",
            "when_is_it_updated": "Every time a user claims rewards via the `_updateUserStake` function.",
            "how_to_validate_state_update": "Verify that user.cumulativeProductScalingFactor is updated to the exact value of stakeScalingFactor at the time of execution.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's cumulative product scaling factor to the current global `stakeScalingFactor`, reflecting the latest state of the protocol's scaling.",
            "conditions": []
          },
          {
            "state_variable_name": "users[msg.sender].stakeResetCount",
            "type": "numeric",
            "what_does_it_track": "The count of times the staking mechanism has undergone a 'reset' or re-initialization of scaling factors, impacting how rewards are calculated from historical snapshots.",
            "why_is_is_important": "It helps in correctly applying historical `stakeResetSnapshots` when calculating rewards and effective stake, ensuring that the user's rewards are calculated based on the correct set of historical parameters.",
            "when_is_it_updated": "Every time a user claims rewards via the `_updateUserStake` function.",
            "how_to_validate_state_update": "Verify that user.stakeResetCount is updated to the exact value of stakeResetCount at the time of execution.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's stake reset count to the current global `stakeResetCount`, marking the point in time (in terms of resets) when the user last interacted.",
            "conditions": []
          },
          {
            "state_variable_name": "sbrRewardDistributionStatus",
            "type": "enum",
            "what_does_it_track": "The current phase of the SBR reward distribution (e.g., NOT_STARTED, STARTED, ENDED, CLAIMED).",
            "why_is_is_important": "Controls the lifecycle of SBR reward distribution, ensuring rewards are only added or calculated during the active period and allowing for finalization when the period ends.",
            "when_is_it_updated": "Within `_addSBRRewards`, if the current time (`block.timestamp`) exceeds `sbrRewardDistributionEndTime` and the status is `STARTED`.",
            "how_to_validate_state_update": "Verify that sbrRewardDistributionStatus is set to SBRRewardDistribution.ENDED only if it was STARTED and the current block timestamp exceeds sbrRewardDistributionEndTime.",
            "has_conditional_updates": true,
            "summary_of_update": "Transitions the SBR reward distribution status from STARTED to ENDED if the current time has surpassed the designated distribution end time.",
            "conditions": [
              "sbrRewardDistributionStatus == SBRRewardDistribution.STARTED",
              "block.timestamp > sbrRewardDistributionEndTime"
            ]
          },
          {
            "state_variable_name": "sbrRewardDistributionStatus",
            "type": "enum",
            "what_does_it_track": "The current phase of the SBR reward distribution (e.g., NOT_STARTED, STARTED, ENDED, CLAIMED).",
            "why_is_is_important": "Marks the official beginning of the SBR reward program, enabling subsequent reward accrual and distribution.",
            "when_is_it_updated": "Within `_addSBRRewards`, if the status is `NOT_STARTED`.",
            "how_to_validate_state_update": "Verify that sbrRewardDistributionStatus is set to SBRRewardDistribution.STARTED only if it was NOT_STARTED.",
            "has_conditional_updates": true,
            "summary_of_update": "Initiates the SBR reward distribution by changing its status from NOT_STARTED to STARTED upon the first call to `_addSBRRewards` under this condition.",
            "conditions": [
              "sbrRewardDistributionStatus == SBRRewardDistribution.NOT_STARTED"
            ]
          },
          {
            "state_variable_name": "lastSBRRewardDistributedTime",
            "type": "numeric",
            "what_does_it_track": "The timestamp of the last SBR reward distribution event.",
            "why_is_is_important": "Crucial for accurately calculating time-weighted SBR rewards since the previous distribution, ensuring fairness and preventing over/under-distribution.",
            "when_is_it_updated": "Within `_addSBRRewards`, if `sbrRewardDistributionStatus` is `STARTED`.",
            "how_to_validate_state_update": "Verify `lastSBRRewardDistributedTime` is updated to `block.timestamp` if SBR distribution is in the `STARTED` phase.",
            "has_conditional_updates": true,
            "summary_of_update": "Records the current block timestamp as the last time SBR rewards were distributed, acting as a reference point for calculating elapsed time for future reward accruals.",
            "conditions": [
              "sbrRewardDistributionStatus == SBRRewardDistribution.STARTED"
            ]
          },
          {
            "state_variable_name": "lastSBRRewardDistributedTime",
            "type": "numeric",
            "what_does_it_track": "The timestamp of the last SBR reward distribution event.",
            "why_is_is_important": "Sets the initial reference point for calculating the duration of the SBR reward distribution period.",
            "when_is_it_updated": "Within `_addSBRRewards`, if `sbrRewardDistributionStatus` is `NOT_STARTED`.",
            "how_to_validate_state_update": "Verify `lastSBRRewardDistributedTime` is updated to `block.timestamp` if SBR distribution was `NOT_STARTED`.",
            "has_conditional_updates": true,
            "summary_of_update": "Initializes `lastSBRRewardDistributedTime` to the current block timestamp when SBR reward distribution starts for the very first time.",
            "conditions": [
              "sbrRewardDistributionStatus == SBRRewardDistribution.NOT_STARTED"
            ]
          },
          {
            "state_variable_name": "totalSbrRewardPerToken",
            "type": "numeric",
            "what_does_it_track": "The total amount of SBR rewards accumulated per unit of staked tokens, representing the share of SBR rewards distributed to the pool over time.",
            "why_is_is_important": "It is the primary metric for calculating each user's share of SBR rewards, ensuring fair distribution based on their stake and the duration of their participation.",
            "when_is_it_updated": "Within `_addSBRRewards`, if `sbrRewardDistributionStatus` is `STARTED` and `totalStakedRaw` is greater than 0.",
            "how_to_validate_state_update": "Verify `totalSbrRewardPerToken` is incremented by `_totalSbrRewardPerToken`, which is calculated based on `sbrReward`, `stakeScalingFactor`, `precision`, and `totalStakedRaw`.",
            "has_conditional_updates": true,
            "summary_of_update": "Increases the cumulative SBR reward per unit of staked tokens by the amount calculated for the elapsed time, allowing for proportional distribution to all stakers.",
            "conditions": [
              "sbrRewardDistributionStatus == SBRRewardDistribution.STARTED",
              "totalStakedRaw > 0"
            ]
          },
          {
            "state_variable_name": "sbrRewardLoss",
            "type": "numeric",
            "what_does_it_track": "Residual SBR reward amounts that are not perfectly divisible and thus carried over to the next distribution cycle.",
            "why_is_is_important": "Ensures that no SBR rewards are lost due to integer division or precision issues during distribution, maximizing the total rewards distributed to users over time.",
            "when_is_it_updated": "Within `_addSBRRewards`, if `sbrRewardDistributionStatus` is `STARTED` and `totalStakedRaw` is greater than 0.",
            "how_to_validate_state_update": "Verify `sbrRewardLoss` is updated with the remainder from the SBR reward distribution calculation, i.e., `_sbrReward - ((_totalSbrRewardPerToken * totalStakedRaw * precision) / stakeScalingFactor) / precision`.",
            "has_conditional_updates": true,
            "summary_of_update": "Stores any fractional SBR reward amounts that cannot be perfectly distributed due to precision limitations, to be carried over to the next distribution.",
            "conditions": [
              "sbrRewardDistributionStatus == SBRRewardDistribution.STARTED",
              "totalStakedRaw > 0"
            ]
          },
          {
            "state_variable_name": "sbrRewardDistributionEndTime",
            "type": "numeric",
            "what_does_it_track": "The timestamp when the SBR reward distribution is scheduled to end.",
            "why_is_is_important": "Defines the fixed duration for the SBR reward distribution program, after which no more SBR rewards will be added based on time elapsed.",
            "when_is_it_updated": "Within `_addSBRRewards`, if `sbrRewardDistributionStatus` is `NOT_STARTED`.",
            "how_to_validate_state_update": "Verify `sbrRewardDistributionEndTime` is set to `block.timestamp + 365 days` if SBR distribution was `NOT_STARTED`.",
            "has_conditional_updates": true,
            "summary_of_update": "Sets the end time for SBR reward distribution to one year from the current block timestamp, defining the duration of the reward program.",
            "conditions": [
              "sbrRewardDistributionStatus == SBRRewardDistribution.NOT_STARTED"
            ]
          }
        ]
      },
      {
        "contract_name": "dfidToken",
        "state_updated": [
          {
            "state_variable_name": "balances[msg.sender]",
            "type": "numeric",
            "what_does_it_track": "The balance of the staking token held by `msg.sender`.",
            "why_is_is_important": "Represents the direct transfer of earned staking rewards to the user's wallet.",
            "when_is_it_updated": "When `_updateRewards` is executed and `pendingReward` is greater than 0.",
            "how_to_validate_state_update": "Verify that stakingToken.transfer(msg.sender, pendingReward - rewardFee) succeeds, indicating an increase in the user's balance.",
            "has_conditional_updates": true,
            "summary_of_update": "Increases the calling user's balance of the staking token by the calculated net reward amount after fee deduction.",
            "conditions": [
              "pendingReward != 0"
            ]
          },
          {
            "state_variable_name": "balances[frontend]",
            "type": "numeric",
            "what_does_it_track": "The balance of the staking token held by the `frontend` address.",
            "why_is_is_important": "Represents the fee collected by the frontend service for facilitating the reward claim.",
            "when_is_it_updated": "When `_updateRewards` is executed and `rewardFee` is greater than 0.",
            "how_to_validate_state_update": "Verify that stakingToken.transfer(frontend, rewardFee) succeeds, indicating an increase in the frontend's balance.",
            "has_conditional_updates": true,
            "summary_of_update": "Increases the frontend's balance of the staking token by the calculated reward fee amount.",
            "conditions": [
              "rewardFee > 0"
            ]
          }
        ]
      },
      {
        "contract_name": "dfireToken",
        "state_updated": [
          {
            "state_variable_name": "balances[msg.sender]",
            "type": "numeric",
            "what_does_it_track": "The balance of the SBR token held by `msg.sender`.",
            "why_is_is_important": "Represents the direct minting of earned SBR rewards to the user's wallet.",
            "when_is_it_updated": "When `_updateRewards` is executed and `pendingSbrRewards` is greater than 0.",
            "how_to_validate_state_update": "Verify that sbrToken.mint(msg.sender, pendingSbrRewards - sbrFee) succeeds, indicating a mint and increase in the user's SBR balance.",
            "has_conditional_updates": true,
            "summary_of_update": "Mints new SBR tokens and adds them to the calling user's balance, representing their earned SBR rewards after fee deduction.",
            "conditions": [
              "pendingSbrRewards != 0"
            ]
          },
          {
            "state_variable_name": "balances[frontend]",
            "type": "numeric",
            "what_does_it_track": "The balance of the SBR token held by the `frontend` address.",
            "why_is_is_important": "Represents the SBR token fee collected by the frontend service for facilitating the reward claim.",
            "when_is_it_updated": "When `_updateRewards` is executed and `sbrFee` is greater than 0.",
            "how_to_validate_state_update": "Verify that sbrToken.mint(frontend, sbrFee) succeeds, indicating a mint and increase in the frontend's SBR balance.",
            "has_conditional_updates": true,
            "summary_of_update": "Mints new SBR tokens and adds them to the frontend's balance, representing the SBR fee collected.",
            "conditions": [
              "sbrFee > 0"
            ]
          },
          {
            "state_variable_name": "totalSupply",
            "type": "numeric",
            "what_does_it_track": "The total number of SBR tokens in existence.",
            "why_is_is_important": "The total supply of the SBR token is a fundamental metric for its tokenomics and value, increasing when new tokens are minted as rewards.",
            "when_is_it_updated": "When `_updateRewards` is executed and `pendingSbrRewards` is greater than 0, due to the `sbrToken.mint` calls.",
            "how_to_validate_state_update": "Verify that the total supply of sbrToken increases by `pendingSbrRewards` after successful minting.",
            "has_conditional_updates": true,
            "summary_of_update": "Increases the total supply of the SBR token corresponding to the amount of SBR rewards minted.",
            "conditions": [
              "pendingSbrRewards != 0"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "StabilityPool",
        "code_snippet": "function claim() external {\n        UserInfo storage user = users[msg.sender];\n        if (user.stake > 0) {\n            _claim(user, msg.sender, 0);\n        }\n    }\nfunction _claim(\n        UserInfo storage user,\n        address frontend,\n        uint256 fee\n    ) internal {\n        if (sbrRewardDistributionStatus != SBRRewardDistribution.ENDED) {\n            _addSBRRewards();\n        }\n        (\n            uint256 reward,\n            uint256 rewardFee,\n            uint256 collateral,\n            uint256 collateralFee,\n            uint256 sbrReward,\n            uint256 sbrRewardFee\n        ) = _updateRewards(user, frontend, fee);\n        _updateUserStake(user);\n        emit RewardClaimed(\n            msg.sender,\n            reward,\n            rewardFee,\n            collateral,\n            collateralFee\n        );\n        if (sbrReward > 0) {\n            emit DFireRewardClaimed(msg.sender, sbrReward, sbrRewardFee);\n        }\n    }\nfunction _addSBRRewards() internal {\n        if (sbrRewardDistributionStatus == SBRRewardDistribution.STARTED) {\n            uint256 timeElapsed = block.timestamp -\n                lastSBRRewardDistributedTime;\n            if (block.timestamp > sbrRewardDistributionEndTime) {\n                sbrRewardDistributionStatus = SBRRewardDistribution.ENDED;\n                timeElapsed =\n                    sbrRewardDistributionEndTime -\n                    lastSBRRewardDistributedTime;\n            }\n            uint256 sbrReward = timeElapsed * sbrDistributionRate;\n            if (totalStakedRaw > 0) {\n                uint256 _sbrReward = sbrReward + sbrRewardLoss;\n                uint256 _totalSbrRewardPerToken = ((_sbrReward *\n                    stakeScalingFactor *\n                    precision) / totalStakedRaw) / precision;\n                totalSbrRewardPerToken += _totalSbrRewardPerToken;\n                sbrRewardLoss =\n                    _sbrReward -\n                    ((_totalSbrRewardPerToken * totalStakedRaw * precision) /\n                        stakeScalingFactor) /\n                    precision;\n\n                emit SBRRewardsAdded(\n                    lastSBRRewardDistributedTime,\n                    block.timestamp,\n                    sbrReward,\n                    totalSbrRewardPerToken\n                );\n            }\n            lastSBRRewardDistributedTime = block.timestamp;\n        } else if (\n            sbrRewardDistributionStatus == SBRRewardDistribution.NOT_STARTED\n        ) {\n            lastSBRRewardDistributedTime = block.timestamp;\n            sbrRewardDistributionEndTime = block.timestamp + 365 days;\n            sbrRewardDistributionStatus = SBRRewardDistribution.STARTED;\n        }\n    }\nfunction _updateRewards(\n        UserInfo storage user,\n        address frontend,\n        uint256 fee\n    )\n        internal\n        returns (\n            uint256 pendingReward,\n            uint256 rewardFee,\n            uint256 pendingCollateral,\n            uint256 collateralFee,\n            uint256 pendingSbrRewards,\n            uint256 sbrFee\n        )\n    {\n        if (user.cumulativeProductScalingFactor != 0) {\n            (\n                pendingReward,\n                pendingCollateral,\n                pendingSbrRewards\n            ) = userPendingRewardAndCollateral(user);\n        }\n\n        user.rewardSnapshot = totalRewardPerToken;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (sbrRewardDistributionStatus != SBRRewardDistribution.ENDED) {\n            sbrRewardSnapshots[msg.sender]\n                .rewardSnapshot = totalSbrRewardPerToken;\n        } else if (\n            sbrRewardSnapshots[msg.sender].status !=\n            SBRRewardDistribution.CLAIMED\n        ) {\n            sbrRewardSnapshots[msg.sender].status = SBRRewardDistribution\n                .CLAIMED;\n        }\n\n        if (pendingReward != 0) {\n            rewardFee = (fee * pendingReward) / BASIS_POINTS_DIVISOR;\n            require(\n                stakingToken.transfer(msg.sender, pendingReward - rewardFee),\n                \"Reward transfer failed\"\n            );\n            if (rewardFee > 0) {\n                require(\n                    stakingToken.transfer(frontend, rewardFee),\n                    \"Fee transfer failed\"\n                );\n            }\n        }\n        if (pendingCollateral != 0) {\n            collateralFee = (fee * pendingCollateral) / BASIS_POINTS_DIVISOR;\n            (bool success, ) = msg.sender.call{\n                value: pendingCollateral - collateralFee\n            }(\"\");\n            require(success, \"Collateral transfer failed\");\n            if (collateralFee > 0) {\n                (success, ) = frontend.call{value: collateralFee}(\"\");\n                require(success, \"Fee transfer failed\");\n            }\n        }\n        if (pendingSbrRewards != 0) {\n            sbrFee = (fee * pendingSbrRewards) / BASIS_POINTS_DIVISOR;\n            require(\n                sbrToken.mint(msg.sender, pendingSbrRewards - sbrFee),\n                \"Mint failed\"\n            );\n            if (sbrFee > 0) {\n                require(sbrToken.mint(frontend, sbrFee), \"Fee transfer failed\");\n            }\n        }\n    }\nfunction userPendingRewardAndCollateral(\n        UserInfo storage user\n    )\n        internal\n        view\n        returns (\n            uint256 pendingReward,\n            uint256 pendingCollateral,\n            uint256 pendingSbrRewards\n        )\n    {\n        bool calculateSbrRewards = true;\n        if (\n            sbrRewardSnapshots[msg.sender].status ==\n            SBRRewardDistribution.CLAIMED\n        ) {\n            calculateSbrRewards = false;\n        }\n        if (user.stakeResetCount == stakeResetCount) {\n            pendingReward =\n                ((((totalRewardPerToken - user.rewardSnapshot) * user.stake) *\n                    precision) / user.cumulativeProductScalingFactor) /\n                precision;\n            pendingCollateral =\n                ((((totalCollateralPerToken - user.collateralSnapshot) *\n                    user.stake) * precision) /\n                    user.cumulativeProductScalingFactor) /\n                precision;\n            if (calculateSbrRewards) {\n                pendingSbrRewards =\n                    ((((totalSbrRewardPerToken -\n                        sbrRewardSnapshots[msg.sender].rewardSnapshot) *\n                        user.stake) * precision) /\n                        user.cumulativeProductScalingFactor) /\n                    precision;\n            }\n        } else {\n            StakeResetSnapshot memory snapshot = stakeResetSnapshots[\n                user.stakeResetCount\n            ];\n            pendingReward =\n                ((((snapshot.totalRewardPerToken - user.rewardSnapshot) *\n                    user.stake) * precision) /\n                    user.cumulativeProductScalingFactor) /\n                precision;\n\n            pendingCollateral =\n                ((((snapshot.totalCollateralPerToken -\n                    user.collateralSnapshot) * user.stake) * precision) /\n                    user.cumulativeProductScalingFactor) /\n                precision;\n\n            if (calculateSbrRewards) {\n                pendingSbrRewards =\n                    ((((snapshot.totalSBRRewardPerToken -\n                        sbrRewardSnapshots[msg.sender].rewardSnapshot) *\n                        user.stake) * precision) /\n                        user.cumulativeProductScalingFactor) /\n                    precision;\n            }\n\n            // Calculate the user stake at reset snapshot\n            uint256 userStake = ((user.stake *\n                snapshot.scalingFactor *\n                precision) / user.cumulativeProductScalingFactor) / precision;\n\n            if (user.stakeResetCount + 1 != stakeResetCount) {\n                snapshot = stakeResetSnapshots[user.stakeResetCount + 1];\n                pendingReward +=\n                    (snapshot.totalRewardPerToken * userStake) /\n                    precision;\n                pendingCollateral +=\n                    (snapshot.totalCollateralPerToken * userStake) /\n                    precision;\n                if (calculateSbrRewards) {\n                    pendingSbrRewards +=\n                        (snapshot.totalSBRRewardPerToken * userStake) /\n                        precision;\n                }\n            } else {\n                pendingReward += (totalRewardPerToken * userStake) / precision;\n                pendingCollateral +=\n                    (totalCollateralPerToken * userStake) /\n                    precision;\n                if (calculateSbrRewards) {\n                    pendingSbrRewards +=\n                        (totalSbrRewardPerToken * userStake) /\n                        precision;\n                }\n            }\n        }\n    }\nfunction _updateUserStake(UserInfo storage user) internal {\n        // Adjust user's stake\n        if (user.cumulativeProductScalingFactor != 0) {\n            user.stake = _getUserEffectiveStake(user);\n        }\n\n        // Update user's scaling factor and reset count\n        user.cumulativeProductScalingFactor = stakeScalingFactor;\n        user.stakeResetCount = stakeResetCount;\n    }\nfunction _getUserEffectiveStake(\n        UserInfo memory user\n    ) internal view returns (uint256 stake) {\n        if (user.stakeResetCount == stakeResetCount) {\n            stake =\n                (((user.stake * stakeScalingFactor) * precision) /\n                    user.cumulativeProductScalingFactor) /\n                precision;\n        } else {\n            StakeResetSnapshot memory snapshot = stakeResetSnapshots[\n                user.stakeResetCount\n            ];\n            stake =\n                ((user.stake * snapshot.scalingFactor * precision) /\n                    user.cumulativeProductScalingFactor) /\n                precision;\n\n            if (user.stakeResetCount + 1 != stakeResetCount) {\n                snapshot = stakeResetSnapshots[user.stakeResetCount + 1];\n                stake = (stake * snapshot.scalingFactor) / precision;\n            } else {\n                stake = (stake * stakeScalingFactor) / precision;\n            }\n        }\n        /*\n        return\n            (((user.stake * stakeScalingFactor) * precision) /\n                user.cumulativeProductScalingFactor) / precision;\n                */\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "dfidToken"
            },
            {
              "state_variable_name": "sbrToken",
              "contract_name": "dfireToken"
            },
            {
              "state_variable_name": "stableBaseCDP",
              "contract_name": "stableBaseCDP"
            }
          ]
        },
        "constants": [
          {
            "name": "precision",
            "value": "1e18",
            "type": "uint256"
          },
          {
            "name": "minimumScalingFactor",
            "value": "1e9",
            "type": "uint256"
          },
          {
            "name": "BASIS_POINTS_DIVISOR",
            "value": "10000",
            "type": "uint256"
          }
        ]
      }
    ]
  }
}