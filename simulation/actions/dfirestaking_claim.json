{
  "action": {
    "name": "Claim",
    "summary": "Allows a user to claim their accumulated rewards.",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "probability": 0.7
  },
  "action_detail": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "pre_execution_parameter_generation_rules": [
      "No parameters are required for the claim function as it is an external function that does not take any explicit input parameters. The function uses msg.sender to identify the user claiming the reward."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Reward Calculation and Snapshot Update",
        "state_update_descriptions": [
          "Calculates the reward amount as: ((totalRewardPerToken - user.rewardSnapshot) * user.stake) / PRECISION",
          "Calculates the collateral reward amount as: ((totalCollateralPerToken - user.collateralSnapshot) * user.stake) / PRECISION",
          "Updates the user's reward snapshot (user.rewardSnapshot) to the current total reward per token (totalRewardPerToken).",
          "Updates the user's collateral snapshot (user.collateralSnapshot) to the current total collateral per token (totalCollateralPerToken)."
        ]
      },
      {
        "category": "Reward Transfer",
        "state_update_descriptions": [
          "Transfers the calculated reward amount to the user's address using rewardToken.transfer()",
          "Transfers the calculated collateral reward amount to the user's address via a payable call."
        ]
      },
      {
        "category": "Event Emission",
        "state_update_descriptions": [
          "Emits a Claimed event with the user's address, reward amount, and collateral reward amount."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Reward Calculation and Snapshot Validation",
        "rule_descriptions": [
          "The user's rewardSnapshot should be equal to the totalRewardPerToken after the claim.",
          "The user's collateralSnapshot should be equal to the totalCollateralPerToken after the claim."
        ]
      },
      {
        "category": "Reward Balance Validation",
        "rule_descriptions": [
          "The user's reward token balance should increase by the calculated rewardAmount.",
          "The user's ETH balance should increase by the calculated collateralReward amount."
        ]
      },
      {
        "category": "Event Emission Validation",
        "rule_descriptions": [
          "A 'Claimed' event should be emitted with the 'user' field equal to the caller's address (msg.sender).",
          "The 'rewardAmount' in the 'Claimed' event should match the calculated reward.",
          "The 'collateralReward' in the 'Claimed' event should match the calculated collateral reward."
        ]
      },
      {
        "category": "Pre-conditions",
        "rule_descriptions": [
          "The user must have a stake greater than 0.",
          "The rewardToken.transfer() call must succeed for the reward transfer.",
          "The payable call to msg.sender must succeed for the collateral reward transfer."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "uint256",
            "what_does_it_track": "Tracks the user's reward snapshot at the time of claiming.",
            "why_is_is_important": "This is important for calculating the accurate reward for the user in the next claim and ensures that user only gets reward after the snapshot.",
            "when_is_it_updated": "It is updated every time a user claims rewards.",
            "how_to_validate_state_update": "Check the user's stake struct to verify the rewardSnapshot is updated to totalRewardPerToken.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's rewardSnapshot to the current totalRewardPerToken.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "uint256",
            "what_does_it_track": "Tracks the user's collateral snapshot at the time of claiming.",
            "why_is_is_important": "This is important for calculating the accurate reward for the user in the next claim and ensures that user only gets collateral reward after the snapshot.",
            "when_is_it_updated": "It is updated every time a user claims rewards.",
            "how_to_validate_state_update": "Check the user's stake struct to verify the collateralSnapshot is updated to totalCollateralPerToken.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's collateralSnapshot to the current totalCollateralPerToken.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "rewardToken",
            "type": "IERC20",
            "what_does_it_track": "Tracks the reward token contract.",
            "why_is_is_important": "This is important to reward the user with the reward token.",
            "when_is_it_updated": "It is updated when a user claims and has rewards to claim.",
            "how_to_validate_state_update": "Check the balance of msg.sender in rewardToken to verify the transfer of reward.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers reward tokens to the user, if reward > 0. Transfers reward to msg.sender.",
            "conditions": [
              "reward > 0"
            ]
          }
        ]
      },
      {
        "contract_name": "msg.sender",
        "state_updated": [
          {
            "state_variable_name": "msg.sender",
            "type": "address",
            "what_does_it_track": "Tracks the address of the user.",
            "why_is_is_important": "This is important to reward the user with collateral reward (native token).",
            "when_is_it_updated": "It is updated when a user claims and has collateral reward to claim.",
            "how_to_validate_state_update": "Check the balance of msg.sender in native token to verify the transfer of collateralReward.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers collateral reward to the user, if collateralReward > 0.  It calls the msg.sender address with the collateralReward value.",
            "conditions": [
              "collateralReward > 0"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function claim() external {\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": []
        },
        "constants": []
      }
    ]
  }
}