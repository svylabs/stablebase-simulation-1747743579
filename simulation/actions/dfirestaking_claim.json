{
  "action": {
    "name": "Claim",
    "summary": "Allows a user to claim their accumulated rewards.",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "probability": 0.7
  },
  "action_detail": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "pre_execution_parameter_generation_rules": [
      "No parameters required; uses msg.sender.",
      "Ensure user has staked tokens: stakes[msg.sender].stake > 0.",
      "Verify claimable rewards exist: userPendingReward(msg.sender) returns reward > 0 or collateralReward > 0."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Reward Claim",
        "state_update_descriptions": [
          "Updates user reward snapshot: user.rewardSnapshot = totalRewardPerToken.",
          "Transfers reward tokens: rewardToken.transfer(msg.sender, reward).",
          "Updates user collateral snapshot: user.collateralSnapshot = totalCollateralPerToken.",
          "Transfers collateral reward in ether: msg.sender.call{value: collateralReward}(\"\")."
        ]
      },
      {
        "category": "Event Emission",
        "state_update_descriptions": [
          "Emits Claimed event: Claimed(msg.sender, reward, collateralReward)."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Reward Claim",
        "rule_descriptions": [
          "User reward snapshot matches total reward per token: stakes[msg.sender].rewardSnapshot == totalRewardPerToken.",
          "User collateral snapshot matches total collateral per token: stakes[msg.sender].collateralSnapshot == totalCollateralPerToken.",
          "User's reward token balance increased by reward amount: balanceOf(msg.sender) (rewardToken) increased by reward.",
          "User's ether balance increased by collateral reward amount: msg.sender ether balance increased by collateralReward."
        ]
      },
      {
        "category": "Contract Balance",
        "rule_descriptions": [
          "RewardToken contract balance decreased by reward amount.",
          "Contract's ether balance decreased by collateralReward amount (if collateralReward > 0)."
        ]
      },
      {
        "category": "Staking Status",
        "rule_descriptions": [
          "User's staked amount remains unchanged: stakes[msg.sender].stake remains the same."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "uint256",
            "what_does_it_track": "Tracks the reward snapshot for the user's stake.",
            "why_is_is_important": "It is important to update the reward snapshot to accurately calculate future rewards.",
            "when_is_it_updated": "Updated every time a user claims rewards.",
            "how_to_validate_state_update": "Fetch the stakes mapping for msg.sender before and after the claim. The rewardSnapshot should be updated to totalRewardPerToken.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the rewardSnapshot for the user to the current totalRewardPerToken.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "uint256",
            "what_does_it_track": "Tracks the collateral reward snapshot for the user's stake.",
            "why_is_is_important": "It is important to update the collateral snapshot to accurately calculate future collateral rewards.",
            "when_is_it_updated": "Updated every time a user claims rewards.",
            "how_to_validate_state_update": "Fetch the stakes mapping for msg.sender before and after the claim. The collateralSnapshot should be updated to totalCollateralPerToken.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the collateralSnapshot for the user to the current totalCollateralPerToken.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "msg.sender balance (ETH)",
            "type": "uint256",
            "what_does_it_track": "Tracks the msg.sender's ETH balance.",
            "why_is_is_important": "It is important to update the user's ETH balance to reflect the claimed collateral rewards.",
            "when_is_it_updated": "Updated when the collateralReward is greater than 0.",
            "how_to_validate_state_update": "Check the balance of the msg.sender's ETH and DFIREStaking contract's ETH balance before and after the claim. The difference should be equal to the collateralReward amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers the calculated collateral reward amount to the user if the collateralReward is greater than 0.",
            "conditions": [
              "collateralReward > 0"
            ]
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "rewardToken.balanceOf(DFIREStaking)",
            "type": "uint256",
            "what_does_it_track": "Tracks the DFIREStaking contract's reward token balance.",
            "why_is_is_important": "To ensure that the contract's reward token balance is correctly updated after transfering to msg.sender.",
            "when_is_it_updated": "When reward > 0",
            "how_to_validate_state_update": "Check the balance of the DFIREStaking contract in rewardToken before and after the claim. The difference should be equal to the reward amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Decreases the DFIREStaking contract's balance by the reward amount.",
            "conditions": [
              "reward > 0"
            ]
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "rewardToken.balanceOf(msg.sender)",
            "type": "uint256",
            "what_does_it_track": "Tracks the user's reward balance.",
            "why_is_is_important": "It is important to update the user's reward balance to reflect the claimed rewards.",
            "when_is_it_updated": "Updated when the reward is greater than 0.",
            "how_to_validate_state_update": "Check the balance of the msg.sender in the rewardToken contract before and after the claim. The difference should be equal to the reward amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers the calculated reward amount to the user if the reward is greater than 0.",
            "conditions": [
              "reward > 0"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function claim() external {\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StableBaseCDP"
            }
          ]
        },
        "constants": []
      }
    ]
  }
}