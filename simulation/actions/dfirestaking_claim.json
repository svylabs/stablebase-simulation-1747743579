{
  "action": {
    "name": "Claim",
    "summary": "Allows a user to claim their accumulated rewards.",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "probability": 0.7
  },
  "action_detail": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "pre_execution_parameter_generation_rules": [
      "The user must have staked tokens in the DFIREStaking contract (stakes[msg.sender].stake > 0).",
      "The contract must have accumulated rewards; either totalRewardPerToken must be greater than the user's rewardSnapshot or totalCollateralPerToken must be greater than the user's collateralSnapshot, or both.",
      "The rewardToken contract (DFIDToken) must have sufficient balance to transfer the calculated reward amount to the user; otherwise, the reward transfer will fail.",
      "Sufficient ETH is available in the contract to transfer as collateral reward.",
      "Ensure that the contract has been initialized with the correct addresses for stakingToken, rewardToken, and stableBaseContract."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "User Rewards",
        "state_update_descriptions": [
          "User's reward snapshot (user.rewardSnapshot) is updated to the current total reward per token (totalRewardPerToken).",
          "User's collateral snapshot (user.collateralSnapshot) is updated to the current total collateral per token (totalCollateralPerToken).",
          "User receives reward tokens (DFIDToken) based on the formula: ((totalRewardPerToken - user.rewardSnapshot) * user.stake) / PRECISION.",
          "User receives collateral reward (ETH) based on the formula: ((totalCollateralPerToken - user.collateralSnapshot) * user.stake) / PRECISION."
        ]
      },
      {
        "category": "Contract State",
        "state_update_descriptions": [
          "The contract emits a Claimed event with the user's address, reward amount (reward), and collateral reward amount (collateralReward)."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "User Balance",
        "rule_descriptions": [
          "The user's balance of reward tokens (DFIDToken) increases by the reward amount calculated: ((totalRewardPerToken - user.rewardSnapshot) * user.stake) / PRECISION before claiming.",
          "The user's ETH balance increases by the collateral reward amount calculated: ((totalCollateralPerToken - user.collateralSnapshot) * user.stake) / PRECISION before claiming.",
          "The user's rewardSnapshot (stakes[msg.sender].rewardSnapshot) is equal to totalRewardPerToken after claiming.",
          "The user's collateralSnapshot (stakes[msg.sender].collateralSnapshot) is equal to totalCollateralPerToken after claiming."
        ]
      },
      {
        "category": "Event Emission",
        "rule_descriptions": [
          "A Claimed event is emitted with the user's address, the reward amount, and the collateral reward amount.",
          "The reward amount in the Claimed event matches the actual amount transferred to the user's reward token balance.",
          "The collateral reward amount in the Claimed event matches the actual amount transferred to the user's ETH balance."
        ]
      },
      {
        "category": "Contract Invariants",
        "rule_descriptions": [
          "totalRewardPerToken remains unchanged.",
          "totalCollateralPerToken remains unchanged.",
          "totalStake remains unchanged."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "uint256",
            "what_does_it_track": "Tracks the reward snapshot for each user's stake.",
            "why_is_is_important": "It is important for calculating the reward accumulated after the last claim.",
            "when_is_it_updated": "Updated when a user claims their rewards.",
            "how_to_validate_state_update": "Check the user's `rewardSnapshot` storage slot via `stakes[msg.sender].rewardSnapshot`. It should be updated to equal the `totalRewardPerToken` after the claim.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the `rewardSnapshot` for the user to the current `totalRewardPerToken` to track the user's reward progress.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "uint256",
            "what_does_it_track": "Tracks the collateral reward snapshot for each user's stake.",
            "why_is_is_important": "It is important for calculating the collateral reward accumulated after the last claim.",
            "when_is_it_updated": "Updated when a user claims their collateral rewards.",
            "how_to_validate_state_update": "Check the user's `collateralSnapshot` storage slot via `stakes[msg.sender].collateralSnapshot`. It should be updated to equal the `totalCollateralPerToken` after the claim.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the `collateralSnapshot` for the user to the current `totalCollateralPerToken` to track collateral reward progress.",
            "conditions": []
          },
          {
            "state_variable_name": "rewardToken balance of msg.sender",
            "type": "uint256",
            "what_does_it_track": "Tracks the balance of reward tokens held by each user.",
            "why_is_is_important": "It is important to transfer rewards to the user.",
            "when_is_it_updated": "Updated when a user claims their rewards and the calculated reward is greater than 0.",
            "how_to_validate_state_update": "Check the balance of `msg.sender` in the `rewardToken` contract using `rewardToken.balanceOf(msg.sender)`.  The balance should increase by `reward`.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers `reward` tokens to the `msg.sender` if `reward > 0`.",
            "conditions": [
              "reward > 0"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function claim() external {\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        }
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_rewardToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stableBaseContract",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbrToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbdToken",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_priceOracle",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_dfireTokenStaking",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForLiquidation",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForRedemption",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        }
      }
    ]
  }
}