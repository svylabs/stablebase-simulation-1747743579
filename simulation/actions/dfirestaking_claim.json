{
  "action": {
    "name": "Claim",
    "summary": "Allows a user to claim their accumulated rewards.",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "probability": 0.7
  },
  "action_detail": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "pre_execution_parameter_generation_rules": [
      "The user must have a stake in the contract (stakes[msg.sender].stake > 0).",
      "The contract must have accumulated rewards (totalRewardPerToken > user.rewardSnapshot) and reward > 0.",
      "The contract must have accumulated collateral rewards (totalCollateralPerToken > user.collateralSnapshot) and collateralReward > 0."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "User State",
        "state_update_descriptions": [
          "stakes[msg.sender].rewardSnapshot is updated to totalRewardPerToken.",
          "stakes[msg.sender].collateralSnapshot is updated to totalCollateralPerToken."
        ]
      },
      {
        "category": "Token Transfer",
        "state_update_descriptions": [
          "rewardToken is transferred from the contract to msg.sender."
        ]
      },
      {
        "category": "Collateral Transfer",
        "state_update_descriptions": [
          "Collateral (ETH) is transferred from the contract to msg.sender."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Rewards Received",
        "rule_descriptions": [
          "The rewardToken's balance of the msg.sender should increase by the reward amount calculated."
        ]
      },
      {
        "category": "Collateral Received",
        "rule_descriptions": [
          "The collateral (ETH) balance of the msg.sender should increase by the collateralReward amount."
        ]
      },
      {
        "category": "User State Update",
        "rule_descriptions": [
          "The user's rewardSnapshot should be updated to the current totalRewardPerToken.",
          "The user's collateralSnapshot should be updated to the current totalCollateralPerToken."
        ]
      },
      {
        "category": "Events",
        "rule_descriptions": [
          "Emit Claimed event with the user's address, reward amount, and collateral reward amount."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "uint256",
            "what_does_it_track": "The reward snapshot for a user, representing the totalRewardPerToken value at the time of their last claim or stake.",
            "why_is_is_important": "It is crucial for calculating future reward accrual for each user.",
            "when_is_it_updated": "It is updated when a user claims their rewards.",
            "how_to_validate_state_update": "Check that stakes[msg.sender].rewardSnapshot is equal to totalRewardPerToken after the claim.",
            "has_conditional_updates": false,
            "summary_of_update": "The rewardSnapshot for the user is updated to the current totalRewardPerToken.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "uint256",
            "what_does_it_track": "The collateral reward snapshot for a user, representing the totalCollateralPerToken value at the time of their last claim or stake.",
            "why_is_is_important": "It is crucial for calculating future collateral reward accrual for each user.",
            "when_is_it_updated": "It is updated when a user claims their collateral rewards.",
            "how_to_validate_state_update": "Check that stakes[msg.sender].collateralSnapshot is equal to totalCollateralPerToken after the claim.",
            "has_conditional_updates": false,
            "summary_of_update": "The collateralSnapshot for the user is updated to the current totalCollateralPerToken.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "balanceOf[msg.sender]",
            "type": "uint256",
            "what_does_it_track": "The balance of the user claiming rewards.",
            "why_is_is_important": "Reflects the user's current reward token holdings.",
            "when_is_it_updated": "It is updated when the contract transfers reward tokens to the user.",
            "how_to_validate_state_update": "Check that the balance of msg.sender in rewardToken has increased by 'reward' after the transfer.",
            "has_conditional_updates": true,
            "summary_of_update": "The balance of the user is increased by the reward amount.",
            "conditions": [
              "reward > 0"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function claim() external {\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        }
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": []
        }
      }
    ]
  }
}