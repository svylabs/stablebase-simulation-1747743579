{
  "action": {
    "name": "Claim",
    "summary": "Allows a user to claim their accumulated rewards.",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "probability": 0.7
  },
  "action_detail": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "pre_execution_parameter_generation_rules": [],
    "on_execution_state_updates_made": [
      {
        "category": "User State Updates",
        "state_update_descriptions": [
          "The 'rewardSnapshot' for the calling user (msg.sender) in the 'stakes' mapping is updated to the current 'totalRewardPerToken'.",
          "The 'collateralSnapshot' for the calling user (msg.sender) in the 'stakes' mapping is updated to the current 'totalCollateralPerToken'."
        ]
      },
      {
        "category": "Token Transfers",
        "state_update_descriptions": [
          "If a reward is calculated (reward > 0), the calculated reward amount of the 'rewardToken' (DFIDToken) is transferred from the 'DFIREStaking' contract to the calling user (msg.sender)."
        ]
      },
      {
        "category": "Native Currency Transfers",
        "state_update_descriptions": [
          "If a collateral reward is calculated (collateralReward > 0), the calculated collateral reward amount of native currency (e.g., Ether) is transferred from the 'DFIREStaking' contract to the calling user (msg.sender)."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "User State Validation",
        "rule_descriptions": [
          "The 'rewardSnapshot' for msg.sender in the 'stakes' mapping must be updated to the 'totalRewardPerToken' value recorded at the time of claim.",
          "The 'collateralSnapshot' for msg.sender in the 'stakes' mapping must be updated to the 'totalCollateralPerToken' value recorded at the time of claim.",
          "The 'stake' amount for msg.sender in the 'stakes' mapping must remain unchanged.",
          "A call to 'userPendingReward(msg.sender)' must return (0, 0) if all pending rewards were claimed and no new rewards have accrued since the claim."
        ]
      },
      {
        "category": "Balance Validation",
        "rule_descriptions": [
          "The 'rewardToken' balance of the calling user (msg.sender) must increase by the 'reward' amount calculated.",
          "The 'rewardToken' balance of the 'DFIREStaking' contract must decrease by the 'reward' amount calculated.",
          "The native currency balance of the calling user (msg.sender) must increase by the 'collateralReward' amount calculated.",
          "The native currency balance of the 'DFIREStaking' contract must decrease by the 'collateralReward' amount calculated."
        ]
      },
      {
        "category": "Event Emission Validation",
        "rule_descriptions": [
          "A 'Claimed' event must be emitted with 'user' equal to msg.sender, 'rewardAmount' equal to the calculated reward, and 'collateralReward' equal to the calculated collateral reward."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "update_by_assignment",
            "what_does_it_track": "The totalRewardPerToken value at the moment the user last claimed rewards or staked/unstaked.",
            "why_is_is_important": "It prevents users from claiming the same rewards multiple times and ensures accurate calculation of future rewards based on subsequent reward accrual.",
            "when_is_it_updated": "When a user claims their accumulated rewards.",
            "how_to_validate_state_update": "The 'rewardSnapshot' for 'msg.sender' in the 'stakes' mapping should be updated to the current 'totalRewardPerToken' value.",
            "has_conditional_updates": false,
            "summary_of_update": "The rewardSnapshot for the calling user is updated to the current totalRewardPerToken. This marks the point up to which rewards have been claimed.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "update_by_assignment",
            "what_does_it_track": "The totalCollateralPerToken value at the moment the user last claimed collateral rewards or staked/unstaked.",
            "why_is_is_important": "It prevents users from claiming the same collateral rewards multiple times and ensures accurate calculation of future collateral rewards based on subsequent accrual.",
            "when_is_it_updated": "When a user claims their accumulated collateral rewards.",
            "how_to_validate_state_update": "The 'collateralSnapshot' for 'msg.sender' in the 'stakes' mapping should be updated to the current 'totalCollateralPerToken' value.",
            "has_conditional_updates": false,
            "summary_of_update": "The collateralSnapshot for the calling user is updated to the current totalCollateralPerToken. This marks the point up to which collateral rewards have been claimed.",
            "conditions": []
          },
          {
            "state_variable_name": "rewardToken.balanceOf(address(this))",
            "type": "decrement_by_amount",
            "what_does_it_track": "The amount of 'rewardToken' held by the DFIREStaking contract.",
            "why_is_is_important": "It facilitates the distribution of accumulated rewards to the user, reducing the contract's balance of the reward token.",
            "when_is_it_updated": "When a user claims rewards and there are 'rewardToken's to transfer.",
            "how_to_validate_state_update": "The balance of 'rewardToken' held by the DFIREStaking contract should decrease by the 'reward' amount, and the balance of 'rewardToken' for 'msg.sender' should increase by the 'reward' amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers the calculated 'reward' amount of 'rewardToken' from the DFIREStaking contract to the user.",
            "conditions": [
              "The calculated 'reward' amount for the user is greater than 0."
            ]
          },
          {
            "state_variable_name": "address(this).balance",
            "type": "decrement_by_amount",
            "what_does_it_track": "The native token balance held by the DFIREStaking contract.",
            "why_is_is_important": "It facilitates the distribution of accumulated collateral rewards (native token) to the user, reducing the contract's native token balance.",
            "when_is_it_updated": "When a user claims collateral rewards and there is native token to transfer.",
            "how_to_validate_state_update": "The native token balance of the DFIREStaking contract should decrease by the 'collateralReward' amount, and the native token balance of 'msg.sender' should increase by the 'collateralReward' amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers the calculated 'collateralReward' amount of native token (e.g., Ether) from the DFIREStaking contract to the user.",
            "conditions": [
              "The calculated 'collateralReward' amount for the user is greater than 0."
            ]
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "balanceOf[msg.sender]",
            "type": "increment_by_amount",
            "what_does_it_track": "The balance of 'rewardToken' held by individual addresses.",
            "why_is_is_important": "It reflects the successful transfer of reward tokens to the user, increasing their liquid balance of the reward token.",
            "when_is_it_updated": "When a user claims rewards and receives 'rewardToken's.",
            "how_to_validate_state_update": "The balance of 'rewardToken' for 'msg.sender' (the recipient of the transfer) should increase by the 'reward' amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Increments the 'rewardToken' balance of the calling user with the claimed 'reward' amount.",
            "conditions": [
              "The calculated 'reward' amount for the user is greater than 0."
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function claim() external {\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "_rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "_stableBaseContract",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_sbrToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "_sbdToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "_priceOracle",
              "contract_name": "MockPriceOracle"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_dfireTokenStaking",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_safesOrderedForLiquidation",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "_safesOrderedForRedemption",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StableBaseCDP"
            }
          ]
        },
        "constants": []
      }
    ]
  }
}