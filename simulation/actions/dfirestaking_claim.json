{
  "action": {
    "name": "Claim",
    "summary": "Allows a user to claim their accumulated rewards.",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "probability": 0.7
  },
  "action_detail": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "pre_execution_parameter_generation_rules": [
      "No parameters are needed for the `claim` function."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "User State",
        "state_update_descriptions": [
          "The user's `rewardSnapshot` is updated to `totalRewardPerToken`.",
          "The user's `collateralSnapshot` is updated to `totalCollateralPerToken`."
        ]
      },
      {
        "category": "Reward Transfer",
        "state_update_descriptions": [
          "The user receives `reward` tokens from the contract's `rewardToken` (referenced contract: DFIDToken) balance.",
          "The user receives `collateralReward` in ETH/Native coin via a direct transfer."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "User State",
        "rule_descriptions": [
          "The user's rewardSnapshot should be updated to the current totalRewardPerToken.",
          "The user's collateralSnapshot should be updated to the current totalCollateralPerToken."
        ]
      },
      {
        "category": "Reward Transfer",
        "rule_descriptions": [
          "The user's balance of rewardToken (referenced contract: DFIDToken) should increase by the reward amount.",
          "The user should receive the collateralReward in ETH/Native coin."
        ]
      },
      {
        "category": "Events",
        "rule_descriptions": [
          "Verify that the Claimed event is emitted with the correct user address, reward amount, and collateral reward."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Claim",
    "contract_name": "DFIREStaking",
    "function_name": "claim",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "uint256",
            "what_does_it_track": "The user's reward snapshot, representing the totalRewardPerToken at the time of the last claim or stake.",
            "why_is_is_important": "Used to calculate the reward earned since the last claim or stake.",
            "when_is_it_updated": "When the user claims rewards.",
            "how_to_validate_state_update": "Check that stakes[msg.sender].rewardSnapshot is updated to the current totalRewardPerToken after the claim.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's reward snapshot to the current total reward per token.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "uint256",
            "what_does_it_track": "The user's collateral snapshot, representing the totalCollateralPerToken at the time of the last claim or stake.",
            "why_is_is_important": "Used to calculate the collateral reward earned since the last claim or stake.",
            "when_is_it_updated": "When the user claims rewards.",
            "how_to_validate_state_update": "Check that stakes[msg.sender].collateralSnapshot is updated to the current totalCollateralPerToken after the claim.",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's collateral snapshot to the current total collateral per token.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "rewardToken.transfer",
            "type": "bool",
            "what_does_it_track": "Transfers reward tokens from the contract to the user, reducing the contract's rewardToken balance and increasing the user's rewardToken balance.",
            "why_is_is_important": "Transfers the reward token to the user.",
            "when_is_it_updated": "When the user claims rewards and reward > 0.",
            "how_to_validate_state_update": "Check the rewardToken balance of both the contract and the user before and after the transfer. Also confirm that the transfer function returns true.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers reward tokens to the user if `reward > 0`.",
            "conditions": [
              "reward > 0"
            ]
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "msg.sender.call",
            "type": "bool",
            "what_does_it_track": "Sends collateral reward to the user's address via a payable `call`, increasing user's ETH balance.",
            "why_is_is_important": "Transfers collateral reward to the user.",
            "when_is_it_updated": "When the user claims rewards and collateralReward > 0.",
            "how_to_validate_state_update": "Check the ETH balance of the user before and after the transfer, and confirm the call returns true.",
            "has_conditional_updates": true,
            "summary_of_update": "Sends collateral reward to the user if collateralReward > 0.",
            "conditions": [
              "collateralReward > 0"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function claim() external {\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        }
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "stableBaseCDP"
            }
          ]
        }
      }
    ]
  }
}