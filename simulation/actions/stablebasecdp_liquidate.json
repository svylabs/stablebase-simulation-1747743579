{
  "action": {
    "name": "Liquidate",
    "summary": "Initiates liquidation.",
    "contract_name": "StableBaseCDP",
    "function_name": "liquidate",
    "probability": 0.9
  },
  "action_detail": {
    "action_name": "Liquidate",
    "contract_name": "StableBaseCDP",
    "function_name": "liquidate",
    "pre_execution_parameter_generation_rules": [
      "The function `liquidate` does not take any parameters. The `_safeId` is retrieved from the tail of the `safesOrderedForLiquidation` queue.",
      "A Safe must exist where `collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)` to be eligible for liquidation. Check that `priceOracle.fetchPrice()` * `safes[_safeId].collateralAmount` is less than `(safes[_safeId].borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR`.",
      "Check that either `stabilityPool.isLiquidationPossible(borrowedAmount)` returns true OR a safe exists with a safeId not equal to `safesOrderedForLiquidation.getHead()`."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Safe Removal and Debt/Collateral Update",
        "state_update_descriptions": [
          "The safe with ID `_safeId` is removed from the `safes` mapping, effectively deleting the Safe: `delete safes[_safeId]`.",
          "`totalCollateral` is decremented by `collateralAmount` of the liquidated safe.",
          "`totalDebt` is decremented by `borrowedAmount` of the liquidated safe."
        ]
      },
      {
        "category": "Queue and Fund Distribution",
        "state_update_descriptions": [
          "The Safe is removed from `safesOrderedForLiquidation` and `safesOrderedForRedemption` using `_removeSafeFromBothQueues(_safeId)`.",
          "If `stabilityPool.isLiquidationPossible(borrowedAmount)` is true, the debt is transferred to the `stabilityPool`, and the collateral (minus liquidationFee) is sent as msg.value.",
          "If `stabilityPool.isLiquidationPossible(borrowedAmount)` is false, the debt and collateral (minus liquidationFee) are distributed to other borrowers using `distributeDebtAndCollateral`.",
          "The liquidation fee is distributed to `dfireTokenStaking` or the `stabilityPool`. If neither can receive rewards, the liquidation fee is refunded to `msg.sender`."
        ]
      },
      {
        "category": "Liquidation Snapshot Update",
        "state_update_descriptions": [
          "The `liquidationSnapshots[_safeId]` mapping's `debtPerCollateralSnapshot` is updated to `cumulativeDebtPerUnitCollateral`, and `collateralPerCollateralSnapshot` is updated to `cumulativeCollateralPerUnitCollateral`."
        ]
      },
      {
        "category": "Debt and Collateral Distribution Update",
        "state_update_descriptions": [
          "cumulativeCollateralPerUnitCollateral is incremented by `(collateralToDistribute * PRECISION) / totalCollateralAfterLiquidation`",
          "cumulativeDebtPerUnitCollateral is incremented by `(debtToDistribute * PRECISION) / totalCollateralAfterLiquidation`",
          "collateralLoss` is updated: `collateralToDistribute - ((collPerUnitColl * totalCollateralAfterLiquidation) / PRECISION)`",
          "`debtLoss` is updated: `debtToDistribute - ((debtPerUnitColl * totalCollateralAfterLiquidation) / PRECISION)`"
        ]
      },
      {
        "category": "NFT Burn",
        "state_update_descriptions": [
          "The NFT representing the Safe is burned using internal function `_burn(_safeId)`."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Safe Removal",
        "rule_descriptions": [
          "Verify that the Safe with ID `_safeId` no longer exists in the `safes` mapping using `safes[_safeId]`."
        ]
      },
      {
        "category": "Total Collateral Update",
        "rule_descriptions": [
          "Check that `totalCollateral` has been decreased by the `collateralAmount` of the liquidated Safe."
        ]
      },
      {
        "category": "Total Debt Update",
        "rule_descriptions": [
          "Check that `totalDebt` has been decreased by the `borrowedAmount` of the liquidated Safe."
        ]
      },
      {
        "category": "Queue Removal",
        "rule_descriptions": [
          "Confirm that the Safe is removed from both `safesOrderedForLiquidation` and `safesOrderedForRedemption` by checking the doubly linked list state (head and tail pointers)."
        ]
      },
      {
        "category": "Stability Pool Update",
        "rule_descriptions": [
          "If the liquidation was performed using the `stabilityPool`, verify that `stabilityPool.totalStakedRaw` has decreased by `borrowedAmount`, and validate the new `stabilityPool.stakeScalingFactor` and `stabilityPool.totalCollateralPerToken` are correctly updated based on the liquidation."
        ]
      },
      {
        "category": "Debt/Collateral Distribution",
        "rule_descriptions": [
          "If the liquidation was performed using the secondary mechanism, ensure the debt and collateral were distributed by validating cumulativeCollateralPerUnitCollateral and cumulativeDebtPerUnitCollateral have been updated correctly. Specifically, check that cumulativeCollateralPerUnitCollateral increased by `(collateralToDistribute * PRECISION) / totalCollateralAfterLiquidation` and that cumulativeDebtPerUnitCollateral increased by `(debtToDistribute * PRECISION) / totalCollateralAfterLiquidation`."
        ]
      },
      {
        "category": "Fee Distribution",
        "rule_descriptions": [
          "If `liquidationFee > refund`, verify that `dfireTokenStaking.totalCollateralPerToken` or `stabilityPool.totalCollateralPerToken` has increased, if they can receive rewards. If not, verify that `refund equals liquidationFee`."
        ]
      },
      {
        "category": "Refund Verification",
        "rule_descriptions": [
          "If a refund was issued, verify that `msg.sender`'s balance has increased by the `refund` amount."
        ]
      },
      {
        "category": "Loss Calculation",
        "rule_descriptions": [
          "Verify collateralLoss and debtLoss are correctly updated based on the distributed amounts. Check `collateralLoss` against `collateralToDistribute - ((collPerUnitColl * totalCollateralAfterLiquidation) / PRECISION)` and `debtLoss` against `debtToDistribute - ((debtPerUnitColl * totalCollateralAfterLiquidation) / PRECISION)`."
        ]
      },
      {
        "category": "Protocol Mode",
        "rule_descriptions": [
          "Check that if PROTOCOL_MODE transitions from BOOTSTRAP to NORMAL because of liquidate, that PROTOCOL_MODE == NORMAL"
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Liquidate",
    "contract_name": "StableBaseCDP",
    "function_name": "liquidate",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "totalCollateral",
            "type": "uint256",
            "what_does_it_track": "Tracks the total collateral held by the contract.",
            "why_is_is_important": "It stores the collateral amount of a specific safe.",
            "when_is_it_updated": "It's updated by subtracting `collateralAmount` when a safe is liquidated.",
            "how_to_validate_state_update": "Compare the value of `totalCollateral` before and after the `liquidate` call. The difference should equal the liquidated safe's collateral.",
            "has_conditional_updates": false,
            "summary_of_update": "`totalCollateral` is decreased by `collateralAmount` of liquidated safe.",
            "conditions": [
              "collateralAmount > 0",
              "borrowedAmount > 0",
              "collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)"
            ]
          },
          {
            "state_variable_name": "totalDebt",
            "type": "uint256",
            "what_does_it_track": "Keeps track of the overall outstanding debt.",
            "why_is_is_important": "Tracks the total debt in the system. Important for protocol solvency.",
            "when_is_it_updated": "It's updated by subtracting `borrowedAmount` when a safe is liquidated.",
            "how_to_validate_state_update": "Check the value of `totalDebt` before and after the `liquidate` call.  The difference should match the liquidated safe's `borrowedAmount`.",
            "has_conditional_updates": false,
            "summary_of_update": "`totalDebt` is decreased by `borrowedAmount` of liquidated safe.",
            "conditions": [
              "collateralAmount > 0",
              "borrowedAmount > 0",
              "collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)"
            ]
          },
          {
            "state_variable_name": "safes",
            "type": "Safe",
            "what_does_it_track": "Stores the details of each safe.",
            "why_is_is_important": "Stores the safe information, including collateral and debt.",
            "when_is_it_updated": "The safe data is deleted.",
            "how_to_validate_state_update": "After liquidation, querying `safes[_safeId]` should return default values (all fields zeroed).",
            "has_conditional_updates": false,
            "summary_of_update": "The `safes[_safeId]` mapping is deleted, effectively removing the safe.",
            "conditions": [
              "collateralAmount > 0",
              "borrowedAmount > 0",
              "collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)"
            ]
          },
          {
            "state_variable_name": "liquidationSnapshots",
            "type": "LiquidationSnapshot",
            "what_does_it_track": "The snapshot of liquidation parameters for a specific safe.",
            "why_is_is_important": "Used to apply interest/funding rate changes to safes.",
            "when_is_it_updated": "Updated when `_updateSafe` is called. It will update the `liquidationSnapshots` with cumulative debt and collateral per unit collateral.",
            "how_to_validate_state_update": "Examine the stored snapshot values before and after `_updateSafe` call, to ensure proper cumulative rate updates.",
            "has_conditional_updates": true,
            "summary_of_update": "Snapshot of debt and collateral is updated to ensure debt reflects correctly accumulated debt.",
            "conditions": [
              "liquidationSnapshot.collateralPerCollateralSnapshot != cumulativeCollateralPerUnitCollateral"
            ]
          },
          {
            "state_variable_name": "cumulativeCollateralPerUnitCollateral",
            "type": "uint256",
            "what_does_it_track": "Tracks cumulative collateral per unit of collateral after liquidation.",
            "why_is_is_important": "Used to track cumulative collateral per unit of collateral.",
            "when_is_it_updated": "Updated inside `distributeDebtAndCollateral` when secondary liquidation mechanism is used.",
            "how_to_validate_state_update": "Check cumulative collateral per unit of collateral after `distributeDebtAndCollateral` to ensure correct distribution collateral.",
            "has_conditional_updates": true,
            "summary_of_update": "Tracks cumulative collateral per unit of collateral after liquidation.",
            "conditions": [
              "_safeId != _last"
            ]
          },
          {
            "state_variable_name": "cumulativeDebtPerUnitCollateral",
            "type": "uint256",
            "what_does_it_track": "Tracks cumulative debt per unit of collateral after liquidation.",
            "why_is_is_important": "Used to track cumulative debt per unit of collateral.",
            "when_is_it_updated": "Updated inside `distributeDebtAndCollateral` when secondary liquidation mechanism is used.",
            "how_to_validate_state_update": "Check cumulative debt per unit of collateral after `distributeDebtAndCollateral` to ensure correct distribution debt.",
            "has_conditional_updates": true,
            "summary_of_update": "Tracks cumulative debt per unit of collateral after liquidation.",
            "conditions": [
              "_safeId != _last"
            ]
          },
          {
            "state_variable_name": "collateralLoss",
            "type": "uint256",
            "what_does_it_track": "Collateral loss during liquidation process.",
            "why_is_is_important": "Keeps track of losses for collateral.",
            "when_is_it_updated": "Updated inside `distributeDebtAndCollateral` when secondary liquidation mechanism is used.",
            "how_to_validate_state_update": "Check total collateral loss after `distributeDebtAndCollateral` to ensure correct calculation.",
            "has_conditional_updates": true,
            "summary_of_update": "Keeps track of losses for collateral.",
            "conditions": [
              "_safeId != _last"
            ]
          },
          {
            "state_variable_name": "debtLoss",
            "type": "uint256",
            "what_does_it_track": "Debt loss during liquidation process.",
            "why_is_is_important": "Keeps track of losses for debt.",
            "when_is_it_updated": "Updated inside `distributeDebtAndCollateral` when secondary liquidation mechanism is used.",
            "how_to_validate_state_update": "Check total debt loss after `distributeDebtAndCollateral` to ensure correct calculation.",
            "has_conditional_updates": true,
            "summary_of_update": "Keeps track of losses for debt.",
            "conditions": [
              "_safeId != _last"
            ]
          },
          {
            "state_variable_name": "PROTOCOL_MODE",
            "type": "SBStructs.Mode",
            "what_does_it_track": "Tracks if the protocol is in BOOTSTRAP or NORMAL mode.",
            "why_is_is_important": "Indicates the current mode of the protocol.",
            "when_is_it_updated": "It's updated inside `_updateTotalDebt` function when debt is greater than BOOTSTRAP_MODE_DEBT_THRESHOLD and PROTOCOL_MODE is BOOTSTRAP.",
            "how_to_validate_state_update": "Check the PROTOCOL_MODE to confirm the state transition from BOOTSTRAP to NORMAL.",
            "has_conditional_updates": true,
            "summary_of_update": "Changes from BOOTSTRAP to NORMAL mode when total debt exceeds a threshold.",
            "conditions": [
              "debt > BOOTSTRAP_MODE_DEBT_THRESHOLD",
              "PROTOCOL_MODE == SBStructs.Mode.BOOTSTRAP"
            ]
          }
        ]
      },
      {
        "contract_name": "OrderedDoublyLinkedList",
        "state_updated": [
          {
            "state_variable_name": "tail",
            "type": "uint256",
            "what_does_it_track": "The tail (last element) of the linked list.",
            "why_is_is_important": "Points to the last node in the queue of safes to be liquidated.",
            "when_is_it_updated": "Updated when safe is removed from liquidation queue via `_removeSafeFromBothQueues` function, which calls `safesOrderedForLiquidation.remove(safeId)`.",
            "how_to_validate_state_update": "Check the value of `tail` before and after the remove operation to ensure the tail updates correctly.",
            "has_conditional_updates": true,
            "summary_of_update": "The tail of the linked list may be updated if the removed node was the tail.",
            "conditions": [
              "nodes[id].value == 0 && nodes[id].next == 0 && nodes[id].prev == 0"
            ]
          },
          {
            "state_variable_name": "head",
            "type": "uint256",
            "what_does_it_track": "The head (first element) of the linked list.",
            "why_is_is_important": "Points to the first node in the queue of safes to be liquidated.",
            "when_is_it_updated": "Updated when safe is removed from liquidation queue via `_removeSafeFromBothQueues` function, which calls `safesOrderedForLiquidation.remove(safeId)`.",
            "how_to_validate_state_update": "Check the value of `head` before and after the remove operation to ensure the head updates correctly.",
            "has_conditional_updates": true,
            "summary_of_update": "The head of the linked list may be updated if the removed node was the head.",
            "conditions": [
              "nodes[id].value == 0 && nodes[id].next == 0 && nodes[id].prev == 0"
            ]
          },
          {
            "state_variable_name": "nodes",
            "type": "Node",
            "what_does_it_track": "Nodes in the doubly linked list of safes to be liquidated.",
            "why_is_is_important": "Stores the nodes of the doubly linked list.",
            "when_is_it_updated": "The node associated with the liquidated safe is deleted when calling `_remove` inside `remove`.",
            "how_to_validate_state_update": "After liquidation, querying `nodes[_safeId]` should return default values (all fields zeroed).",
            "has_conditional_updates": true,
            "summary_of_update": "The `nodes[_safeId]` mapping is deleted, effectively removing the node.",
            "conditions": [
              "nodes[id].value == 0 && nodes[id].next == 0 && nodes[id].prev == 0"
            ]
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "totalBurned",
            "type": "uint256",
            "what_does_it_track": "The total amount of burned tokens.",
            "why_is_is_important": "Tracks the total amount of tokens burned.",
            "when_is_it_updated": "Incremented when `burn` is called inside `_removeSafe`.",
            "how_to_validate_state_update": "Check total burned tokens after the burn operation.",
            "has_conditional_updates": false,
            "summary_of_update": "The `totalBurned` increases by the burned amount.",
            "conditions": []
          },
          {
            "state_variable_name": "_balances",
            "type": "mapping(address => uint256)",
            "what_does_it_track": "The token balance of accounts.",
            "why_is_is_important": "Keeps track of the balance of each account.",
            "when_is_it_updated": "Decreased when `_update` is called, which is triggered from `_burn` inside `_removeSafe`.",
            "how_to_validate_state_update": "Check balance before and after the burn to ensure correct amount is subtracted.",
            "has_conditional_updates": false,
            "summary_of_update": "Balance of the from address reduced by burned amount.",
            "conditions": []
          },
          {
            "state_variable_name": "_totalSupply",
            "type": "uint256",
            "what_does_it_track": "The total token supply.",
            "why_is_is_important": "Tracks total supply of the token.",
            "when_is_it_updated": "Decreased when `_update` is called, triggered from `_burn`.",
            "how_to_validate_state_update": "Check total supply of tokens before and after the burn, supply must be correctly updated.",
            "has_conditional_updates": false,
            "summary_of_update": "Total supply decreases by burned amount.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "StabilityPool",
        "state_updated": [
          {
            "state_variable_name": "totalStakedRaw",
            "type": "uint256",
            "what_does_it_track": "The total staked amount in the StabilityPool.",
            "why_is_is_important": "Keeps track of total staked amount.",
            "when_is_it_updated": "Decreased in `performLiquidation` function after successful liquidation.",
            "how_to_validate_state_update": "Check the total staked amount before and after liquidation, ensuring it's reduced by the liquidation amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Reduced by the amount liquidated from the safe.",
            "conditions": [
              "amount <= totalStakedRaw"
            ]
          },
          {
            "state_variable_name": "stakeScalingFactor",
            "type": "uint256",
            "what_does_it_track": "Cumulative stake scaling factor to account for rewards distribution.",
            "why_is_is_important": "Scales stakers stake to give rewards based on time staked.",
            "when_is_it_updated": "Updated in `performLiquidation` function after successful liquidation.",
            "how_to_validate_state_update": "Confirm the `stakeScalingFactor` updates correctly, according to liquidation amounts and total staked.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates the cumulative stake scaling factor.",
            "conditions": [
              "amount <= totalStakedRaw"
            ]
          },
          {
            "state_variable_name": "collateralLoss",
            "type": "uint256",
            "what_does_it_track": "Collateral losses within the StabilityPool.",
            "why_is_is_important": "Tracks inactive rewards.",
            "when_is_it_updated": "Updated in `performLiquidation` function after successful liquidation.",
            "how_to_validate_state_update": "Check that collateralLoss updates as intended.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates collateralLoss during the liquidation process.",
            "conditions": [
              "amount <= totalStakedRaw"
            ]
          },
          {
            "state_variable_name": "totalCollateralPerToken",
            "type": "uint256",
            "what_does_it_track": "Collateral per token in the StabilityPool.",
            "why_is_is_important": "Tracks rewards",
            "when_is_it_updated": "Updated in `performLiquidation` function after successful liquidation.",
            "how_to_validate_state_update": "Ensure totalCollateralPerToken is updated during the liquidation process.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates totalCollateralPerToken during the liquidation process.",
            "conditions": [
              "amount <= totalStakedRaw"
            ]
          },
          {
            "state_variable_name": "rewardSenderActive",
            "type": "bool",
            "what_does_it_track": "If reward sender is active.",
            "why_is_is_important": "Enable and disable rewards senders.",
            "when_is_it_updated": "It will deactivate the reward sender if totalStakedRaw is zero. Can trigger external calls to `stableBaseCDP.setCanStabilityPoolReceiveRewards`.",
            "how_to_validate_state_update": "Check `IRewardSender(stableBaseCDP).setCanStabilityPoolReceiveRewards( false )` is called and reverted or emitted.",
            "has_conditional_updates": true,
            "summary_of_update": "If totalStakedRaw is zero deactivates reward sender",
            "conditions": [
              "totalStakedRaw == 0",
              "rewardSenderActive"
            ]
          },
          {
            "state_variable_name": "stakeResetSnapshots",
            "type": "StakeResetSnapshot",
            "what_does_it_track": "Stake reset snapshot data.",
            "why_is_is_important": "Store data about stake reset.",
            "when_is_it_updated": "Updated if `cumulativeProductScalingFactor < minimumScalingFactor`.",
            "how_to_validate_state_update": "Ensure `stakeResetSnapshots[stakeResetCount]` is updated with correct `resetSnapshot` data.",
            "has_conditional_updates": true,
            "summary_of_update": "Stake reset data is saved if `cumulativeProductScalingFactor < minimumScalingFactor`.",
            "conditions": [
              "cumulativeProductScalingFactor < minimumScalingFactor"
            ]
          },
          {
            "state_variable_name": "stakeResetCount",
            "type": "uint256",
            "what_does_it_track": "Stake reset count.",
            "why_is_is_important": "Counts stake resets.",
            "when_is_it_updated": "It will be incremented if `cumulativeProductScalingFactor < minimumScalingFactor`.",
            "how_to_validate_state_update": "Check if `stakeResetCount` is incremented correctly.",
            "has_conditional_updates": true,
            "summary_of_update": "Stake reset count increments.",
            "conditions": [
              "cumulativeProductScalingFactor < minimumScalingFactor"
            ]
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "totalCollateralPerToken",
            "type": "uint256",
            "what_does_it_track": "The total collateral per token in the staking pool.",
            "why_is_is_important": "Tracks the collateral rewards per token.",
            "when_is_it_updated": "Updated when `addCollateralReward` is called, distributing liquidation fees to stakers.",
            "how_to_validate_state_update": "Check total collateral per token is updated correctly.",
            "has_conditional_updates": true,
            "summary_of_update": "The collateral per token increases based on added collateral.",
            "conditions": [
              "totalStake != 0"
            ]
          }
        ]
      },
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "safesOrderedForRedemption",
            "type": "IDoublyLinkedList",
            "what_does_it_track": "Doubly linked list of safes ordered for redemption.",
            "why_is_is_important": "Maintains the queue of safes ordered for redemption.",
            "when_is_it_updated": "Safe is removed from redemption queue via `_removeSafeFromBothQueues` function, which calls `safesOrderedForRedemption.remove(safeId)`.",
            "how_to_validate_state_update": "Verify that the safe is no longer present in the redemption queue after liquidation.",
            "has_conditional_updates": false,
            "summary_of_update": "The safe is removed from the redemption queue.",
            "conditions": []
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "StableBaseCDP",
        "code_snippet": "function liquidate() external nonReentrant {\n        uint256 gasStart = gasleft();\n        uint256 _safeId = safesOrderedForLiquidation.getTail();\n        _liquidate(_safeId, gasStart);\n    }\nfunction _liquidate(uint256 _safeId, uint256 gasStart) internal {\n        uint256 _last = safesOrderedForLiquidation.getHead();\n        Safe storage safe = safes[_safeId];\n        _updateSafe(_safeId, safe);\n        safe = safes[_safeId];\n        uint256 borrowedAmount = safe.borrowedAmount;\n        uint256 collateralAmount = safe.collateralAmount;\n        //require(_isApprovedOrOwner(msg.sender, _safeId), \"Unauthorized\");\n        require(collateralAmount > 0, \"Safe does not exist\");\n        require(\n            borrowedAmount > 0,\n            \"Cannot liquidate a Safe with no borrowed amount\"\n        );\n\n        uint256 collateralPrice = priceOracle.fetchPrice();\n        uint256 collateralValue = (collateralAmount * collateralPrice) /\n            PRECISION;\n        // Check if the collateral is sufficient for liquidation\n        require(\n            collateralValue <\n                ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR),\n            \"Can't liquidate yet\"\n        );\n        bool possible = stabilityPool.isLiquidationPossible(borrowedAmount);\n\n        // Pay liquidation fee\n        uint256 liquidationFee = (collateralAmount *\n            REDEMPTION_LIQUIDATION_FEE) / BASIS_POINTS_DIVISOR;\n\n        totalCollateral -= collateralAmount;\n        _updateTotalDebt(totalDebt, borrowedAmount, false);\n\n        if (possible) {\n            require(\n                stabilityPool.performLiquidation{\n                    value: collateralAmount - liquidationFee\n                }(borrowedAmount, collateralAmount - liquidationFee),\n                \"Liquidation failed\"\n            );\n            // Burn the amount from stability pool\n            require(\n                sbdToken.burn(address(stabilityPool), borrowedAmount),\n                \"Burn failed\"\n            );\n\n            emit LiquidatedUsingStabilityPool(\n                _safeId,\n                borrowedAmount,\n                collateralAmount,\n                totalCollateral,\n                totalDebt\n            );\n        } else {\n            require(_safeId != _last, \"Cannot liquidate the last Safe\");\n            // Liquidate by distributing the debt and collateral to the existing borrowers.\n            distributeDebtAndCollateral(\n                borrowedAmount,\n                collateralAmount - liquidationFee,\n                totalCollateral\n            );\n            emit LiquidatedUsingSecondaryMechanism(\n                _safeId,\n                borrowedAmount,\n                collateralAmount,\n                totalCollateral,\n                totalDebt\n            );\n        }\n        _removeSafeFromBothQueues(_safeId);\n\n        // Remove the Safe from the mapping\n        _removeSafe(_safeId);\n        uint256 gasUsed = gasStart - gasleft();\n        uint256 gasCompensation = (gasUsed + EXTRA_GAS_COMPENSATION) *\n            (block.basefee + (block.basefee * 10) / 100); // 10% extra gas cost\n        uint256 refund = min(gasCompensation, liquidationFee);\n        _distributeLiquidationFeeAndGasCompensation(\n            _safeId,\n            (gasUsed + EXTRA_GAS_COMPENSATION),\n            liquidationFee,\n            refund\n        );\n    }\nfunction _updateSafe(\n        uint _safeId,\n        Safe storage _safe\n    ) internal returns (Safe memory) {\n        // Update borrowed amount\n        LiquidationSnapshot storage liquidationSnapshot = liquidationSnapshots[\n            _safeId\n        ];\n        if (\n            liquidationSnapshot.collateralPerCollateralSnapshot !=\n            cumulativeCollateralPerUnitCollateral\n        ) {\n            uint debtIncrease = (_safe.collateralAmount *\n                (cumulativeDebtPerUnitCollateral -\n                    liquidationSnapshot.debtPerCollateralSnapshot)) / PRECISION;\n            _safe.borrowedAmount += debtIncrease;\n            _safe.totalBorrowedAmount += debtIncrease;\n            liquidationSnapshot\n                .debtPerCollateralSnapshot = cumulativeDebtPerUnitCollateral;\n\n            // Update deposited amount\n            uint collateralIncrease = (_safe.collateralAmount *\n                (cumulativeCollateralPerUnitCollateral -\n                    liquidationSnapshot.collateralPerCollateralSnapshot)) /\n                PRECISION;\n            _safe.collateralAmount += collateralIncrease;\n            liquidationSnapshot\n                .collateralPerCollateralSnapshot = cumulativeCollateralPerUnitCollateral;\n\n            totalCollateral += collateralIncrease;\n            _updateTotalDebt(totalDebt, debtIncrease, true);\n            emit SafeUpdated(\n                _safeId,\n                _safe.collateralAmount,\n                _safe.borrowedAmount,\n                collateralIncrease,\n                debtIncrease,\n                totalCollateral,\n                totalDebt\n            );\n        }\n\n        return _safe;\n    }\nfunction _updateTotalDebt(\n        uint256 currentDebt,\n        uint256 delta,\n        bool add\n    ) internal returns (uint256) {\n        uint256 debt = currentDebt;\n        if (add) {\n            debt = currentDebt + delta;\n        } else {\n            debt = currentDebt - delta;\n        }\n        // Bootstrap Mode to Normal mode only once, Normal mode to bootstrap mode is not possible\n        if (\n            debt > BOOTSTRAP_MODE_DEBT_THRESHOLD &&\n            PROTOCOL_MODE == SBStructs.Mode.BOOTSTRAP\n        ) {\n            PROTOCOL_MODE = SBStructs.Mode.NORMAL;\n        }\n        totalDebt = debt;\n        return debt;\n    }\nfunction distributeDebtAndCollateral(\n        uint256 debtAmount,\n        uint256 collateralAmount,\n        uint256 totalCollateralAfterLiquidation\n    ) internal {\n        uint256 collateralToDistribute = collateralAmount + collateralLoss;\n        uint256 debtToDistribute = debtAmount + debtLoss;\n        uint256 collPerUnitColl = (collateralToDistribute * PRECISION) /\n            totalCollateralAfterLiquidation;\n        cumulativeCollateralPerUnitCollateral += collPerUnitColl;\n        uint256 debtPerUnitColl = (debtToDistribute * PRECISION) /\n            totalCollateralAfterLiquidation;\n        cumulativeDebtPerUnitCollateral += debtPerUnitColl;\n        collateralLoss =\n            collateralToDistribute -\n            (collPerUnitColl * totalCollateralAfterLiquidation) /\n            PRECISION;\n        debtLoss =\n            debtToDistribute -\n            (debtPerUnitColl * totalCollateralAfterLiquidation) /\n            PRECISION;\n    }\nfunction _removeSafeFromBothQueues(uint256 safeId) internal {\n        safesOrderedForLiquidation.remove(safeId);\n        emit SafeRemovedFromLiquidationQueue(safeId);\n        safesOrderedForRedemption.remove(safeId);\n        emit SafeRemovedFromRedemptionQueue(safeId);\n    }\nfunction _removeSafe(uint256 _safeId) internal {\n        //safes[_safeId].status = SafeStatus.CLOSED;\n        Safe memory safe = safes[_safeId];\n        delete safes[_safeId];\n        _burn(_safeId);\n        emit RemovedSafe(_safeId, safe);\n    }\nfunction _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\nfunction _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\nfunction _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\nfunction _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\nfunction _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\nfunction isApprovedForAll(address owner, address operator) external view returns (bool);\nfunction _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\nfunction _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\nfunction _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\nfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\nfunction _distributeLiquidationFeeAndGasCompensation(\n        uint256 safeId,\n        uint256 gasUsed,\n        uint256 liquidationFee,\n        uint256 refund\n    ) internal {\n        // Try to send the liquidation fee to sbr stakers\n        if (liquidationFee > refund) {\n            if (sbrStakingPoolCanReceiveRewards) {\n                bool success = dfireTokenStaking.addCollateralReward{\n                    value: liquidationFee - refund\n                }(liquidationFee - refund);\n                if (!success && stabilityPoolCanReceiveRewards) {\n                    success = stabilityPool.addCollateralReward{\n                        value: liquidationFee - refund\n                    }(liquidationFee - refund);\n                    if (!success) {\n                        refund = liquidationFee;\n                    }\n                } else if (success) {\n                    emit LiquidationFeePaid(\n                        safeId,\n                        address(dfireTokenStaking),\n                        liquidationFee - refund\n                    );\n                }\n            } else if (stabilityPoolCanReceiveRewards) {\n                bool success = stabilityPool.addCollateralReward{\n                    value: liquidationFee - refund\n                }(liquidationFee - refund);\n                if (!success) {\n                    refund = liquidationFee;\n                } else {\n                    emit LiquidationFeePaid(\n                        safeId,\n                        address(stabilityPool),\n                        liquidationFee - refund\n                    );\n                }\n            } else {\n                refund = liquidationFee;\n            }\n        }\n        if (refund > 0) {\n            // Refund the remaining liquidation fee to the user\n            (bool success, ) = msg.sender.call{value: refund}(\"\");\n            require(success, \"Transfer failed\");\n            emit LiquidationGasCompensationPaid(\n                safeId,\n                gasUsed,\n                msg.sender,\n                refund\n            );\n        }\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "sbdToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "priceOracle",
              "contract_name": "MockPriceOracle"
            },
            {
              "state_variable_name": "stabilityPool",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "dfireTokenStaking",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "safesOrderedForLiquidation",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "safesOrderedForRedemption",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        }
      },
      {
        "contract_name": "OrderedDoublyLinkedList",
        "code_snippet": "function getTail() external view override returns (uint256) {\n        return tail;\n    }\nfunction getHead() external view override returns (uint256) {\n        return head;\n    }\nfunction remove(\n        uint256 id\n    ) external override onlyOwner returns (Node memory) {\n        if (\n            nodes[id].value == 0 && nodes[id].next == 0 && nodes[id].prev == 0\n        ) {\n            // Node doesn't exist\n            return Node(0, 0, 0);\n        }\n        return _remove(id);\n    }\nfunction _remove(uint256 id) internal returns (Node memory) {\n        Node memory node = nodes[id];\n        if (node.prev == 0) {\n            head = node.next;\n            nodes[node.next].prev = 0;\n        } else {\n            nodes[node.prev].next = node.next;\n            nodes[node.next].prev = node.prev;\n        }\n        if (node.next == 0) {\n            tail = node.prev;\n            nodes[node.prev].next = 0;\n        } else {\n            nodes[node.next].prev = node.prev;\n            nodes[node.prev].next = node.next;\n        }\n        delete nodes[id];\n        return node;\n    }",
        "references": {
          "references": []
        }
      },
      {
        "contract_name": "MockPriceOracle",
        "code_snippet": "function fetchPrice() external view override returns (uint256) {\n        return price;\n    }",
        "references": {
          "references": []
        }
      },
      {
        "contract_name": "StabilityPool",
        "code_snippet": "function isLiquidationPossible(\n        uint256 amount\n    ) external view override returns (bool) {\n        return amount <= totalStakedRaw;\n    }\nfunction performLiquidation(\n        uint256 amount,\n        uint256 collateral\n    ) external payable onlyDebtContract returns (bool) {\n        //require(msg.sender == debtContract, \"Caller is not the debt contract\");\n        //uint256 totalEffectiveStake = getTotalEffectiveStake();\n        require(amount <= totalStakedRaw, \"Invalid liquidation amount\");\n        require(msg.value == collateral, \"Invalid collateral amount\");\n\n        uint256 previousScalingFactor = stakeScalingFactor;\n        //uint256 scalingFactorReduction = (_amount * precision) / totalStakedRaw;\n        // (1 - Amount / totalStakedRaw)\n        uint256 newScalingFactor = ((totalStakedRaw - amount) * precision) /\n            totalStakedRaw;\n        uint256 cumulativeProductScalingFactor = (stakeScalingFactor *\n            newScalingFactor) / precision;\n\n        stakeScalingFactor = cumulativeProductScalingFactor;\n\n        uint256 _collateral = collateral + collateralLoss;\n\n        uint256 _totalCollateralPerToken = ((_collateral *\n            previousScalingFactor *\n            precision) / totalStakedRaw) / precision;\n\n        // Update total collateral per token\n        totalCollateralPerToken += _totalCollateralPerToken;\n        collateralLoss =\n            _collateral -\n            ((_totalCollateralPerToken * totalStakedRaw * precision) /\n                previousScalingFactor) /\n            precision;\n\n        emit LiquidationPerformed(\n            amount,\n            collateral,\n            totalStakedRaw,\n            stakeScalingFactor,\n            totalCollateralPerToken\n        );\n\n        totalStakedRaw -= amount;\n\n        if (totalStakedRaw == 0 && rewardSenderActive) {\n            require(\n                IRewardSender(stableBaseCDP).setCanStabilityPoolReceiveRewards(\n                    false\n                ),\n                \"Unable to deactivate reward sender\"\n            );\n        }\n\n        if (cumulativeProductScalingFactor < minimumScalingFactor) {\n            StakeResetSnapshot memory resetSnapshot = StakeResetSnapshot({\n                scalingFactor: cumulativeProductScalingFactor,\n                totalRewardPerToken: totalRewardPerToken,\n                totalCollateralPerToken: totalCollateralPerToken,\n                totalSBRRewardPerToken: totalSbrRewardPerToken\n            });\n            stakeResetSnapshots[stakeResetCount] = resetSnapshot;\n            totalCollateralPerToken = 0;\n            totalRewardPerToken = 0;\n            totalSbrRewardPerToken = 0;\n            stakeScalingFactor = precision;\n            stakeResetCount++;\n            emit ScalingFactorReset(stakeResetCount - 1, resetSnapshot);\n        }\n        return true;\n    }\nfunction addCollateralReward(\n        uint256 amount\n    ) external payable returns (bool) {\n        require(amount > 0, \"Reward must be greater than zero\");\n        require(msg.value == amount, \"Invalid collateral amount\");\n        uint256 _totalStakedRaw = totalStakedRaw;\n        if (_totalStakedRaw == 0) {\n            return false;\n        }\n\n        uint256 _totalAmount = amount + collateralLoss;\n        uint256 _collateralPerToken = ((_totalAmount *\n            stakeScalingFactor *\n            precision) / _totalStakedRaw) / precision;\n\n        totalCollateralPerToken += _collateralPerToken;\n\n        collateralLoss =\n            _totalAmount -\n            (((_collateralPerToken * _totalStakedRaw * precision) /\n                stakeScalingFactor) / precision);\n\n        emit CollateralRewardAdded(amount);\n        return true;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "dfidToken"
            },
            {
              "state_variable_name": "sbrToken",
              "contract_name": "dfireToken"
            },
            {
              "state_variable_name": "stableBaseCDP",
              "contract_name": "stableBaseCDP"
            }
          ]
        }
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function burn(\n        address from,\n        uint256 amount\n    ) external onlyOwner returns (bool) {\n        require(from != address(0), \"Invalid address\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(balanceOf(from) >= amount, \"Insufficient balance\");\n\n        _burn(from, amount); // Using OpenZeppelin's internal _burn function\n\n        totalBurned += amount;\n\n        emit Burn(from, amount);\n        return true;\n    }\nfunction balanceOf(address account) external view returns (uint256);\nfunction _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\nfunction _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "stableBaseCDP"
            }
          ]
        }
      },
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function addCollateralReward(\n        uint256 _amount\n    ) external payable returns (bool) {\n        //collateralToken.transferFrom(msg.sender, address(this), _amount);\n        uint _totalStake = totalStake;\n        if (_totalStake == 0) {\n            return false;\n        } else {\n            require(msg.value == _amount, \"Invalid collateral reward amount\");\n            totalCollateralPerToken += (_amount * PRECISION) / _totalStake;\n            emit CollateralRewardAdded(_amount);\n            return true;\n        }\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        }
      }
    ]
  }
}