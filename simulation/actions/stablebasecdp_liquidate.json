{
  "action": {
    "name": "Liquidate",
    "summary": "Initiates liquidation.",
    "contract_name": "StableBaseCDP",
    "function_name": "liquidate",
    "probability": 0.9
  },
  "action_detail": {
    "action_name": "Liquidate",
    "contract_name": "StableBaseCDP",
    "function_name": "liquidate",
    "pre_execution_parameter_generation_rules": [
      "Identify suitable safeId (collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)), use safesOrderedForLiquidation.getTail()",
      "msg.sender has sufficient balance for gas",
      "priceOracle.fetchPrice() returns a valid price",
      "stabilityPool.isLiquidationPossible(borrowedAmount) returns true",
      "sbrStakingPoolCanReceiveRewards or stabilityPoolCanReceiveRewards is accessible"
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Safe",
        "state_update_descriptions": [
          "Delete safes[_safeId]",
          "Update collateralAmount, borrowedAmount, totalBorrowedAmount, weight, feePaid of safes[_safeId] (if _updateSafe is called)",
          "Remove _safeId from safesOrderedForLiquidation",
          "Remove _safeId from safesOrderedForRedemption"
        ]
      },
      {
        "category": "Protocol",
        "state_update_descriptions": [
          "Decrease totalCollateral",
          "Decrease totalDebt",
          "Increase cumulativeCollateralPerUnitCollateral (if secondary liquidation mechanism)",
          "Increase cumulativeDebtPerUnitCollateral (if secondary liquidation mechanism)",
          "Update collateralLoss (if secondary liquidation mechanism)",
          "Update debtLoss (if secondary liquidation mechanism)",
          "Update PROTOCOL_MODE (Bootstrap to Normal)"
        ]
      },
      {
        "category": "External Interactions",
        "state_update_descriptions": [
          "sbdToken.burn(borrowedAmount) from stabilityPool (if possible)",
          "stabilityPool.performLiquidation(borrowedAmount, collateralAmount - liquidationFee)",
          "dfireTokenStaking.addCollateralReward(liquidationFee - refund) or stabilityPool.addCollateralReward(liquidationFee - refund)",
          "msg.sender receives refund (gas compensation)",
          "Increase cumulativeDebtPerUnitCollateral and cumulativeCollateralPerUnitCollateral"
        ]
      },
      {
        "category": "ERC721",
        "state_update_descriptions": [
          "Burn NFT representing the Safe"
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Safe",
        "rule_descriptions": [
          "safes[_safeId] does not exist",
          "_safeId is not in safesOrderedForLiquidation",
          "_safeId is not in safesOrderedForRedemption"
        ]
      },
      {
        "category": "Protocol",
        "rule_descriptions": [
          "totalCollateral decreased by liquidated safe's collateralAmount",
          "totalDebt decreased by liquidated safe's borrowedAmount",
          "stabilityPool state reflects liquidation (if stabilityPool.performLiquidation is called)",
          "dfireTokenStaking state reflects added reward (if dfireTokenStaking.addCollateralReward is called)",
          "PROTOCOL_MODE is NORMAL if totalDebt > BOOTSTRAP_MODE_DEBT_THRESHOLD"
        ]
      },
      {
        "category": "ERC721",
        "rule_descriptions": [
          "ownerOf(_safeId) == address(0)",
          "balanceOf(owner) decreased by 1"
        ]
      },
      {
        "category": "Events",
        "rule_descriptions": [
          "LiquidatedUsingStabilityPool or LiquidatedUsingSecondaryMechanism event emitted",
          "SafeRemovedFromLiquidationQueue event emitted",
          "SafeRemovedFromRedemptionQueue event emitted",
          "RemovedSafe event emitted",
          "LiquidationFeePaid event emitted (if applicable)",
          "LiquidationGasCompensationPaid event emitted (if applicable)",
          "SafeUpdated event emitted (if applicable)"
        ]
      },
      {
        "category": "Invariants",
        "rule_descriptions": [
          "totalCollateral >= 0",
          "totalDebt >= 0"
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Liquidate",
    "contract_name": "StableBaseCDP",
    "function_name": "liquidate",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "safes",
            "type": "mapping",
            "what_does_it_track": "Stores the Safe structs, mapping a unique safeId to its corresponding Safe struct.",
            "why_is_is_important": "This mapping is crucial for tracking all active safes (CDPs) and their states within the protocol. Liquidating a safe removes it from active management.",
            "when_is_it_updated": "Updated when a safe is liquidated, specifically when the collateral value is insufficient to cover the borrowed amount based on the liquidation ratio.",
            "how_to_validate_state_update": "Check if `safes[_safeId]` is deleted from the mapping. Verify `collateralValue`, calculated as `(collateralAmount * collateralPrice) / PRECISION`, is less than `((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)`. Also confirm `borrowedAmount` and `collateralAmount` are greater than 0. Emits `RemovedSafe` event.",
            "has_conditional_updates": true,
            "summary_of_update": "A specific safe within the `safes` mapping is deleted. The safe to be deleted is determined based on whether it is eligible for liquidation.",
            "conditions": [
              "collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)",
              "borrowedAmount > 0",
              "collateralAmount > 0"
            ]
          },
          {
            "state_variable_name": "totalCollateral",
            "type": "uint256",
            "what_does_it_track": "The total amount of collateral held by the protocol across all active safes.",
            "why_is_is_important": "Used to calculate global collateralization ratios and assess the overall health of the protocol. The amount of collateral decides the solvency of the protocol",
            "when_is_it_updated": "Updated during liquidation when a safe's collateral is seized and the safe is closed.",
            "how_to_validate_state_update": "Verify that `totalCollateral` is decreased by the liquidated safe's `collateralAmount`. Confirm the condition: `collateralValue`, calculated as `(collateralAmount * collateralPrice) / PRECISION`, is less than `((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)`. Also, `borrowedAmount` and `collateralAmount` must be greater than 0.",
            "has_conditional_updates": true,
            "summary_of_update": "Decreases by the liquidated safe's collateral amount.",
            "conditions": [
              "collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)",
              "borrowedAmount > 0",
              "collateralAmount > 0"
            ]
          },
          {
            "state_variable_name": "totalDebt",
            "type": "uint256",
            "what_does_it_track": "The total amount of debt outstanding in the protocol.",
            "why_is_is_important": "Indicates the overall risk exposure of the protocol and is essential for maintaining solvency. The amount of debt decides the solvency of the protocol",
            "when_is_it_updated": "Updated when a safe is liquidated, reducing the overall debt.",
            "how_to_validate_state_update": "Check that `totalDebt` is decreased by the liquidated safe's `borrowedAmount`. Verify `collateralValue`, calculated as `(collateralAmount * collateralPrice) / PRECISION`, is less than `((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)`. Confirm `borrowedAmount` and `collateralAmount` are greater than 0.",
            "has_conditional_updates": true,
            "summary_of_update": "Decreases by the liquidated safe's borrowed amount.",
            "conditions": [
              "collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)",
              "borrowedAmount > 0",
              "collateralAmount > 0"
            ]
          },
          {
            "state_variable_name": "safes",
            "type": "mapping",
            "what_does_it_track": "Stores the Safe structs, mapping a unique safeId to its corresponding Safe struct. Tracks  borrowedAmount, totalBorrowedAmount, collateralPerCollateralSnapshot, debtPerCollateralSnapshot",
            "why_is_is_important": "Stores important information of each safe like collateral amount, borrowed amount",
            "when_is_it_updated": "Updated when collateralPerCollateralSnapshot != cumulativeCollateralPerUnitCollateral",
            "how_to_validate_state_update": "If `liquidationSnapshot.collateralPerCollateralSnapshot != cumulativeCollateralPerUnitCollateral`, verify that `safe.borrowedAmount` is updated with `debtIncrease`, calculated as `(_safe.collateralAmount *(cumulativeDebtPerUnitCollateral - liquidationSnapshot.debtPerCollateralSnapshot)) / PRECISION`. Check that `cumulativeDebtPerUnitCollateral` is assigned to `liquidationSnapshot.debtPerCollateralSnapshot`. Also confirm `collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)`, `borrowedAmount > 0`, and `collateralAmount > 0`.",
            "has_conditional_updates": true,
            "summary_of_update": "If `liquidationSnapshot.collateralPerCollateralSnapshot != cumulativeCollateralPerUnitCollateral` borrowedAmount and totalBorrowedAmount inside Safe struct of safes mapping is updated, liquidationSnapshot.debtPerCollateralSnapshot is updated",
            "conditions": [
              "collateralValue < ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR)",
              "borrowedAmount > 0",
              "collateralAmount > 0",
              "liquidationSnapshot.collateralPerCollateralSnapshot != cumulativeCollateralPerUnitCollateral"
            ]
          },
          {
            "state_variable_name": "PROTOCOL_MODE",
            "type": "enum",
            "what_does_it_track": "Tracks whether the protocol is in BOOTSTRAP mode or not",
            "why_is_is_important": "Tracks the protocol mode",
            "when_is_it_updated": "When total debt cross BOOTSTRAP_MODE_DEBT_THRESHOLD",
            "how_to_validate_state_update": "Check that `PROTOCOL_MODE` is updated to `SBStructs.Mode.NORMAL` when `debt > BOOTSTRAP_MODE_DEBT_THRESHOLD` and `PROTOCOL_MODE == SBStructs.Mode.BOOTSTRAP`.",
            "has_conditional_updates": true,
            "summary_of_update": "If totalDebt becomes more than BOOTSTRAP_MODE_DEBT_THRESHOLD, PROTOCOL_MODE is updated from BOOTSTRAP to NORMAL",
            "conditions": [
              "debt > BOOTSTRAP_MODE_DEBT_THRESHOLD",
              "PROTOCOL_MODE == SBStructs.Mode.BOOTSTRAP"
            ]
          },
          {
            "state_variable_name": "cumulativeCollateralPerUnitCollateral",
            "type": "uint256",
            "what_does_it_track": "Tracks cumulativeCollateralPerUnitCollateral, cumulativeDebtPerUnitCollateral, collateralLoss and debtLoss",
            "why_is_is_important": "Used for liquidation via distributing debt and collateral to the existing borrowers. ",
            "when_is_it_updated": "When liquidation is done via distributing debt and collateral to the existing borrowers.",
            "how_to_validate_state_update": "Verify `cumulativeCollateralPerUnitCollateral` is increased by `collPerUnitColl`, calculated as `(collateralToDistribute * PRECISION) /totalCollateralAfterLiquidation`. Verify `cumulativeDebtPerUnitCollateral` is increased by `debtPerUnitColl`, calculated as `(debtToDistribute * PRECISION) / totalCollateralAfterLiquidation`. Verify `collateralLoss` is updated to `collateralToDistribute -((collPerUnitColl * totalCollateralAfterLiquidation) /PRECISION)`. Verify `debtLoss` is updated to `debtToDistribute - (debtPerUnitColl * totalCollateralAfterLiquidation) /PRECISION`. Emits no events here",
            "has_conditional_updates": true,
            "summary_of_update": "cumulativeCollateralPerUnitCollateral is updated, cumulativeDebtPerUnitCollateral is updated, collateralLoss and debtLoss variables are updated.",
            "conditions": [
              "_safeId != _last"
            ]
          },
          {
            "state_variable_name": "safesOrderedForLiquidation",
            "type": "address",
            "what_does_it_track": "address of safesOrderedForLiquidation",
            "why_is_is_important": "tracks address of safesOrderedForLiquidation",
            "when_is_it_updated": "During liquidation",
            "how_to_validate_state_update": "Check that the safe is removed from both `safesOrderedForLiquidation` and `safesOrderedForRedemption` queues by checking the state of the linked lists. Emits `SafeRemovedFromLiquidationQueue` and `SafeRemovedFromRedemptionQueue` events.",
            "has_conditional_updates": false,
            "summary_of_update": "Safe is removed from both safesOrderedForLiquidation and safesOrderedForRedemption queues.",
            "conditions": []
          },
          {
            "state_variable_name": "safesOrderedForRedemption",
            "type": "address",
            "what_does_it_track": "address of safesOrderedForRedemption",
            "why_is_is_important": "tracks address of safesOrderedForRedemption",
            "when_is_it_updated": "During liquidation",
            "how_to_validate_state_update": "Check that the safe is removed from both `safesOrderedForLiquidation` and `safesOrderedForRedemption` queues by checking the state of the linked lists. Emits `SafeRemovedFromLiquidationQueue` and `SafeRemovedFromRedemptionQueue` events.",
            "has_conditional_updates": false,
            "summary_of_update": "Safe is removed from both safesOrderedForLiquidation and safesOrderedForRedemption queues.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "OrderedDoublyLinkedList",
        "state_updated": [
          {
            "state_variable_name": "nodes",
            "type": "mapping",
            "what_does_it_track": "linked list nodes with value, prev and next.",
            "why_is_is_important": "linked list nodes are maintained here.",
            "when_is_it_updated": "during liquidation",
            "how_to_validate_state_update": "Check that a node with the given `id` is deleted from the `nodes` mapping, which represents the linked list. Verify that `nodes[id].value`, `nodes[id].next`, and `nodes[id].prev` are all 0.",
            "has_conditional_updates": true,
            "summary_of_update": "A node with given id is removed from the linked list.",
            "conditions": [
              "nodes[id].value == 0 && nodes[id].next == 0 && nodes[id].prev == 0"
            ]
          },
          {
            "state_variable_name": "head",
            "type": "uint256",
            "what_does_it_track": "head of the linked list",
            "why_is_is_important": "tracks head of the linked list",
            "when_is_it_updated": "during liquidation",
            "how_to_validate_state_update": "If `node.prev == 0`, meaning the node is the head, verify that `head` is updated to `node.next`.",
            "has_conditional_updates": true,
            "summary_of_update": "head is updated to node.next",
            "conditions": [
              "node.prev == 0"
            ]
          },
          {
            "state_variable_name": "tail",
            "type": "uint256",
            "what_does_it_track": "tail of the linked list",
            "why_is_is_important": "tracks tail of the linked list",
            "when_is_it_updated": "during liquidation",
            "how_to_validate_state_update": "If `node.next == 0`, meaning the node is the tail, verify that `tail` is updated to `node.prev`.",
            "has_conditional_updates": true,
            "summary_of_update": "tail is updated to node.prev",
            "conditions": [
              "node.next == 0"
            ]
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "_balances",
            "type": "mapping",
            "what_does_it_track": "balances of different accounts",
            "why_is_is_important": "Maintains account balances",
            "when_is_it_updated": "Tokens are burnt during liquidation",
            "how_to_validate_state_update": "If liquidation via the stability pool is possible (`possible` is true), verify that tokens are burnt from the stability pool's balance (`_balances[address(stabilityPool)]` decreases).",
            "has_conditional_updates": true,
            "summary_of_update": "If liquidation via stability pool is possible, tokens are burnt from the stability pool. ",
            "conditions": [
              "possible"
            ]
          },
          {
            "state_variable_name": "_totalSupply",
            "type": "uint256",
            "what_does_it_track": "total supply of the token",
            "why_is_is_important": "Maintains total supply of token",
            "when_is_it_updated": "Tokens are burnt during liquidation",
            "how_to_validate_state_update": "If liquidation via the stability pool is possible (`possible` is true), verify that `totalSupply` is decreased by `borrowedAmount`.",
            "has_conditional_updates": true,
            "summary_of_update": "If liquidation via stability pool is possible, totalSupply is decreased by borrowedAmount. ",
            "conditions": [
              "possible"
            ]
          },
          {
            "state_variable_name": "totalBurned",
            "type": "uint256",
            "what_does_it_track": "total amount of tokens burned",
            "why_is_is_important": "tracks total burned tokens",
            "when_is_it_updated": "Tokens are burnt during liquidation",
            "how_to_validate_state_update": "If liquidation via the stability pool is possible (`possible` is true), verify that `totalBurned` is increased by `borrowedAmount`. Emits `Burn` event.",
            "has_conditional_updates": true,
            "summary_of_update": "If liquidation via stability pool is possible, totalBurned is increased by borrowedAmount.",
            "conditions": [
              "possible"
            ]
          }
        ]
      },
      {
        "contract_name": "StabilityPool",
        "state_updated": [
          {
            "state_variable_name": "stakeScalingFactor",
            "type": "uint256",
            "what_does_it_track": "Scaling factor for stake",
            "why_is_is_important": "maintains stake scaling factor",
            "when_is_it_updated": "During liquidation",
            "how_to_validate_state_update": "If `amount <= totalStakedRaw`, verify that `stakeScalingFactor` is updated to `cumulativeProductScalingFactor`, calculated as `(stakeScalingFactor * newScalingFactor) / precision`, where `newScalingFactor` is `((totalStakedRaw - amount) * precision) / totalStakedRaw`. Also, verify `totalCollateralPerToken` is updated and `collateralLoss` is updated. Emits LiquidationPerformed event.",
            "has_conditional_updates": true,
            "summary_of_update": "If liquidation via stability pool is possible, stakeScalingFactor is updated. totalCollateralPerToken is updated. collateralLoss is updated.",
            "conditions": [
              "amount <= totalStakedRaw"
            ]
          },
          {
            "state_variable_name": "totalStakedRaw",
            "type": "uint256",
            "what_does_it_track": "Tracks total staked amount",
            "why_is_is_important": "Maintains total staked raw amount. ",
            "when_is_it_updated": "During liquidation",
            "how_to_validate_state_update": "Verify `totalStakedRaw` is decreased by `amount` when `amount <= totalStakedRaw`.",
            "has_conditional_updates": true,
            "summary_of_update": "If liquidation via stability pool is possible, totalStakedRaw is decreased by amount.",
            "conditions": [
              "amount <= totalStakedRaw"
            ]
          },
          {
            "state_variable_name": "rewardSenderActive",
            "type": "bool",
            "what_does_it_track": "Whether reward sender is active or not",
            "why_is_is_important": "Whether reward sender is active or not",
            "when_is_it_updated": "when totalStakedRaw is zero",
            "how_to_validate_state_update": "If `totalStakedRaw` is zero and `rewardSenderActive` is true, verify that `rewardSenderActive` is set to false by calling `IRewardSender(stableBaseCDP).setCanStabilityPoolReceiveRewards(false)`.",
            "has_conditional_updates": true,
            "summary_of_update": "rewardSenderActive is set to false if totalStakedRaw is zero",
            "conditions": [
              "totalStakedRaw == 0",
              "rewardSenderActive"
            ]
          },
          {
            "state_variable_name": "stakeResetSnapshots",
            "type": "mapping",
            "what_does_it_track": "scalingFactor, totalRewardPerToken, totalCollateralPerToken, totalSBRRewardPerToken",
            "why_is_is_important": "Stores scalingFactor, totalRewardPerToken, totalCollateralPerToken, totalSBRRewardPerToken",
            "when_is_it_updated": "when cumulativeProductScalingFactor < minimumScalingFactor",
            "how_to_validate_state_update": "If `cumulativeProductScalingFactor < minimumScalingFactor`, verify that `totalCollateralPerToken`, `totalRewardPerToken`, and `totalSbrRewardPerToken` are reset to zero, and `stakeScalingFactor` is reset to `precision`. A `StakeResetSnapshot` is also created and stored. Emits `ScalingFactorReset` event.",
            "has_conditional_updates": true,
            "summary_of_update": "totalCollateralPerToken, totalRewardPerToken, totalSbrRewardPerToken are reset to zero and stakeScalingFactor is reset to precision if cumulativeProductScalingFactor < minimumScalingFactor",
            "conditions": [
              "cumulativeProductScalingFactor < minimumScalingFactor"
            ]
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "totalCollateralPerToken",
            "type": "uint256",
            "what_does_it_track": "tracks totalCollateralPerToken",
            "why_is_is_important": "Tracks total collateral per token",
            "when_is_it_updated": "When collateral rewards are added",
            "how_to_validate_state_update": "When `_totalStake != 0`, `sbrStakingPoolCanReceiveRewards` is true, and `msg.value == _amount`, verify that `totalCollateralPerToken` is updated by adding `(_amount * PRECISION) / _totalStake`. Emits `CollateralRewardAdded` event.",
            "has_conditional_updates": true,
            "summary_of_update": "totalCollateralPerToken is updated when collateral rewards are added",
            "conditions": [
              "_totalStake != 0",
              "sbrStakingPoolCanReceiveRewards",
              "msg.value == _amount"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "StableBaseCDP",
        "code_snippet": "function liquidate() external nonReentrant {\n        uint256 gasStart = gasleft();\n        uint256 _safeId = safesOrderedForLiquidation.getTail();\n        _liquidate(_safeId, gasStart);\n    }\nfunction _liquidate(uint256 _safeId, uint256 gasStart) internal {\n        uint256 _last = safesOrderedForLiquidation.getHead();\n        Safe storage safe = safes[_safeId];\n        _updateSafe(_safeId, safe);\n        safe = safes[_safeId];\n        uint256 borrowedAmount = safe.borrowedAmount;\n        uint256 collateralAmount = safe.collateralAmount;\n        //require(_isApprovedOrOwner(msg.sender, _safeId), \"Unauthorized\");\n        require(collateralAmount > 0, \"Safe does not exist\");\n        require(\n            borrowedAmount > 0,\n            \"Cannot liquidate a Safe with no borrowed amount\"\n        );\n\n        uint256 collateralPrice = priceOracle.fetchPrice();\n        uint256 collateralValue = (collateralAmount * collateralPrice) /\n            PRECISION;\n        // Check if the collateral is sufficient for liquidation\n        require(\n            collateralValue <\n                ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR),\n            \"Can't liquidate yet\"\n        );\n        bool possible = stabilityPool.isLiquidationPossible(borrowedAmount);\n\n        // Pay liquidation fee\n        uint256 liquidationFee = (collateralAmount *\n            REDEMPTION_LIQUIDATION_FEE) / BASIS_POINTS_DIVISOR;\n\n        totalCollateral -= collateralAmount;\n        _updateTotalDebt(totalDebt, borrowedAmount, false);\n\n        if (possible) {\n            require(\n                stabilityPool.performLiquidation{\n                    value: collateralAmount - liquidationFee\n                }(borrowedAmount, collateralAmount - liquidationFee),\n                \"Liquidation failed\"\n            );\n            // Burn the amount from stability pool\n            require(\n                sbdToken.burn(address(stabilityPool), borrowedAmount),\n                \"Burn failed\"\n            );\n\n            emit LiquidatedUsingStabilityPool(\n                _safeId,\n                borrowedAmount,\n                collateralAmount,\n                totalCollateral,\n                totalDebt\n            );\n        } else {\n            require(_safeId != _last, \"Cannot liquidate the last Safe\");\n            // Liquidate by distributing the debt and collateral to the existing borrowers.\n            distributeDebtAndCollateral(\n                borrowedAmount,\n                collateralAmount - liquidationFee,\n                totalCollateral\n            );\n            emit LiquidatedUsingSecondaryMechanism(\n                _safeId,\n                borrowedAmount,\n                collateralAmount,\n                totalCollateral,\n                totalDebt\n            );\n        }\n        _removeSafeFromBothQueues(_safeId);\n\n        // Remove the Safe from the mapping\n        _removeSafe(_safeId);\n        uint256 gasUsed = gasStart - gasleft();\n        uint256 gasCompensation = (gasUsed + EXTRA_GAS_COMPENSATION) *\n            (block.basefee + (block.basefee * 10) / 100); // 10% extra gas cost\n        uint256 refund = min(gasCompensation, liquidationFee);\n        _distributeLiquidationFeeAndGasCompensation(\n            _safeId,\n            (gasUsed + EXTRA_GAS_COMPENSATION),\n            liquidationFee,\n            refund\n        );\n    }\nfunction _updateSafe(\n        uint _safeId,\n        Safe storage _safe\n    ) internal returns (Safe memory) {\n        // Update borrowed amount\n        LiquidationSnapshot storage liquidationSnapshot = liquidationSnapshots[\n            _safeId\n        ];\n        if (\n            liquidationSnapshot.collateralPerCollateralSnapshot !=\n            cumulativeCollateralPerUnitCollateral\n        ) {\n            uint debtIncrease = (_safe.collateralAmount *\n                (cumulativeDebtPerUnitCollateral -\n                    liquidationSnapshot.debtPerCollateralSnapshot)) / PRECISION;\n            _safe.borrowedAmount += debtIncrease;\n            _safe.totalBorrowedAmount += debtIncrease;\n            liquidationSnapshot\n                .debtPerCollateralSnapshot = cumulativeDebtPerUnitCollateral;\n\n            // Update deposited amount\n            uint collateralIncrease = (_safe.collateralAmount *\n                (cumulativeCollateralPerUnitCollateral -\n                    liquidationSnapshot.collateralPerCollateralSnapshot)) /\n                PRECISION;\n            _safe.collateralAmount += collateralIncrease;\n            liquidationSnapshot\n                .collateralPerCollateralSnapshot = cumulativeCollateralPerUnitCollateral;\n\n            totalCollateral += collateralIncrease;\n            _updateTotalDebt(totalDebt, debtIncrease, true);\n            emit SafeUpdated(\n                _safeId,\n                _safe.collateralAmount,\n                _safe.borrowedAmount,\n                collateralIncrease,\n                debtIncrease,\n                totalCollateral,\n                totalDebt\n            );\n        }\n\n        return _safe;\n    }\nfunction _updateTotalDebt(\n        uint256 currentDebt,\n        uint256 delta,\n        bool add\n    ) internal returns (uint256) {\n        uint256 debt = currentDebt;\n        if (add) {\n            debt = currentDebt + delta;\n        } else {\n            debt = currentDebt - delta;\n        }\n        // Bootstrap Mode to Normal mode only once, Normal mode to bootstrap mode is not possible\n        if (\n            debt > BOOTSTRAP_MODE_DEBT_THRESHOLD &&\n            PROTOCOL_MODE == SBStructs.Mode.BOOTSTRAP\n        ) {\n            PROTOCOL_MODE = SBStructs.Mode.NORMAL;\n        }\n        totalDebt = debt;\n        return debt;\n    }\nfunction distributeDebtAndCollateral(\n        uint256 debtAmount,\n        uint256 collateralAmount,\n        uint256 totalCollateralAfterLiquidation\n    ) internal {\n        uint256 collateralToDistribute = collateralAmount + collateralLoss;\n        uint256 debtToDistribute = debtAmount + debtLoss;\n        uint256 collPerUnitColl = (collateralToDistribute * PRECISION) /\n            totalCollateralAfterLiquidation;\n        cumulativeCollateralPerUnitCollateral += collPerUnitColl;\n        uint256 debtPerUnitColl = (debtToDistribute * PRECISION) /\n            totalCollateralAfterLiquidation;\n        cumulativeDebtPerUnitCollateral += debtPerUnitColl;\n        collateralLoss =\n            collateralToDistribute -\n            (collPerUnitColl * totalCollateralAfterLiquidation) /\n            PRECISION;\n        debtLoss =\n            debtToDistribute -\n            (debtPerUnitColl * totalCollateralAfterLiquidation) /\n            PRECISION;\n    }\nfunction _removeSafeFromBothQueues(uint256 safeId) internal {\n        safesOrderedForLiquidation.remove(safeId);\n        emit SafeRemovedFromLiquidationQueue(safeId);\n        safesOrderedForRedemption.remove(safeId);\n        emit SafeRemovedFromRedemptionQueue(safeId);\n    }\nfunction _removeSafe(uint256 _safeId) internal {\n        //safes[_safeId].status = SafeStatus.CLOSED;\n        Safe memory safe = safes[_safeId];\n        delete safes[_safeId];\n        _burn(_safeId);\n        emit RemovedSafe(_safeId, safe);\n    }\nfunction _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\nfunction _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\nfunction _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\nfunction _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\nfunction _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\nfunction isApprovedForAll(address owner, address operator) external view returns (bool);\nfunction _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\nfunction _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\nfunction _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\nfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\nfunction _distributeLiquidationFeeAndGasCompensation(\n        uint256 safeId,\n        uint256 gasUsed,\n        uint256 liquidationFee,\n        uint256 refund\n    ) internal {\n        // Try to send the liquidation fee to sbr stakers\n        if (liquidationFee > refund) {\n            if (sbrStakingPoolCanReceiveRewards) {\n                bool success = dfireTokenStaking.addCollateralReward{\n                    value: liquidationFee - refund\n                }(liquidationFee - refund);\n                if (!success && stabilityPoolCanReceiveRewards) {\n                    success = stabilityPool.addCollateralReward{\n                        value: liquidationFee - refund\n                    }(liquidationFee - refund);\n                    if (!success) {\n                        refund = liquidationFee;\n                    }\n                } else if (success) {\n                    emit LiquidationFeePaid(\n                        safeId,\n                        address(dfireTokenStaking),\n                        liquidationFee - refund\n                    );\n                }\n            } else if (stabilityPoolCanReceiveRewards) {\n                bool success = stabilityPool.addCollateralReward{\n                    value: liquidationFee - refund\n                }(liquidationFee - refund);\n                if (!success) {\n                    refund = liquidationFee;\n                } else {\n                    emit LiquidationFeePaid(\n                        safeId,\n                        address(stabilityPool),\n                        liquidationFee - refund\n                    );\n                }\n            } else {\n                refund = liquidationFee;\n            }\n        }\n        if (refund > 0) {\n            // Refund the remaining liquidation fee to the user\n            (bool success, ) = msg.sender.call{value: refund}(\"\");\n            require(success, \"Transfer failed\");\n            emit LiquidationGasCompensationPaid(\n                safeId,\n                gasUsed,\n                msg.sender,\n                refund\n            );\n        }\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "sbdToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "priceOracle",
              "contract_name": "MockPriceOracle"
            },
            {
              "state_variable_name": "stabilityPool",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "dfireTokenStaking",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "safesOrderedForLiquidation",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "safesOrderedForRedemption",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        }
      },
      {
        "contract_name": "OrderedDoublyLinkedList",
        "code_snippet": "function getTail() external view override returns (uint256) {\n        return tail;\n    }\nfunction getHead() external view override returns (uint256) {\n        return head;\n    }\nfunction remove(\n        uint256 id\n    ) external override onlyOwner returns (Node memory) {\n        if (\n            nodes[id].value == 0 && nodes[id].next == 0 && nodes[id].prev == 0\n        ) {\n            // Node doesn't exist\n            return Node(0, 0, 0);\n        }\n        return _remove(id);\n    }\nfunction _remove(uint256 id) internal returns (Node memory) {\n        Node memory node = nodes[id];\n        if (node.prev == 0) {\n            head = node.next;\n            nodes[node.next].prev = 0;\n        } else {\n            nodes[node.prev].next = node.next;\n            nodes[node.next].prev = node.prev;\n        }\n        if (node.next == 0) {\n            tail = node.prev;\n            nodes[node.prev].next = 0;\n        } else {\n            nodes[node.next].prev = node.prev;\n            nodes[node.prev].next = node.next;\n        }\n        delete nodes[id];\n        return node;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        }
      },
      {
        "contract_name": "MockPriceOracle",
        "code_snippet": "function fetchPrice() external view override returns (uint256) {\n        return price;\n    }",
        "references": {
          "references": []
        }
      },
      {
        "contract_name": "StabilityPool",
        "code_snippet": "function isLiquidationPossible(\n        uint256 amount\n    ) external view override returns (bool) {\n        return amount <= totalStakedRaw;\n    }\nfunction performLiquidation(\n        uint256 amount,\n        uint256 collateral\n    ) external payable onlyDebtContract returns (bool) {\n        //require(msg.sender == debtContract, \"Caller is not the debt contract\");\n        //uint256 totalEffectiveStake = getTotalEffectiveStake();\n        require(amount <= totalStakedRaw, \"Invalid liquidation amount\");\n        require(msg.value == collateral, \"Invalid collateral amount\");\n\n        uint256 previousScalingFactor = stakeScalingFactor;\n        //uint256 scalingFactorReduction = (_amount * precision) / totalStakedRaw;\n        // (1 - Amount / totalStakedRaw)\n        uint256 newScalingFactor = ((totalStakedRaw - amount) * precision) /\n            totalStakedRaw;\n        uint256 cumulativeProductScalingFactor = (stakeScalingFactor *\n            newScalingFactor) / precision;\n\n        stakeScalingFactor = cumulativeProductScalingFactor;\n\n        uint256 _collateral = collateral + collateralLoss;\n\n        uint256 _totalCollateralPerToken = ((_collateral *\n            previousScalingFactor *\n            precision) / totalStakedRaw) / precision;\n\n        // Update total collateral per token\n        totalCollateralPerToken += _totalCollateralPerToken;\n        collateralLoss =\n            _collateral -\n            ((_totalCollateralPerToken * totalStakedRaw * precision) /\n                previousScalingFactor) /\n            precision;\n\n        emit LiquidationPerformed(\n            amount,\n            collateral,\n            totalStakedRaw,\n            stakeScalingFactor,\n            totalCollateralPerToken\n        );\n\n        totalStakedRaw -= amount;\n\n        if (totalStakedRaw == 0 && rewardSenderActive) {\n            require(\n                IRewardSender(stableBaseCDP).setCanStabilityPoolReceiveRewards(\n                    false\n                ),\n                \"Unable to deactivate reward sender\"\n            );\n        }\n\n        if (cumulativeProductScalingFactor < minimumScalingFactor) {\n            StakeResetSnapshot memory resetSnapshot = StakeResetSnapshot({\n                scalingFactor: cumulativeProductScalingFactor,\n                totalRewardPerToken: totalRewardPerToken,\n                totalCollateralPerToken: totalCollateralPerToken,\n                totalSBRRewardPerToken: totalSbrRewardPerToken\n            });\n            stakeResetSnapshots[stakeResetCount] = resetSnapshot;\n            totalCollateralPerToken = 0;\n            totalRewardPerToken = 0;\n            totalSbrRewardPerToken = 0;\n            stakeScalingFactor = precision;\n            stakeResetCount++;\n            emit ScalingFactorReset(stakeResetCount - 1, resetSnapshot);\n        }\n        return true;\n    }\nfunction addCollateralReward(\n        uint256 amount\n    ) external payable returns (bool) {\n        require(amount > 0, \"Reward must be greater than zero\");\n        require(msg.value == amount, \"Invalid collateral amount\");\n        uint256 _totalStakedRaw = totalStakedRaw;\n        if (_totalStakedRaw == 0) {\n            return false;\n        }\n\n        uint256 _totalAmount = amount + collateralLoss;\n        uint256 _collateralPerToken = ((_totalAmount *\n            stakeScalingFactor *\n            precision) / _totalStakedRaw) / precision;\n\n        totalCollateralPerToken += _collateralPerToken;\n\n        collateralLoss =\n            _totalAmount -\n            (((_collateralPerToken * _totalStakedRaw * precision) /\n                stakeScalingFactor) / precision);\n\n        emit CollateralRewardAdded(amount);\n        return true;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "sbrToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "stableBaseCDP",
              "contract_name": "StableBaseCDP"
            }
          ]
        }
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function burn(\n        address from,\n        uint256 amount\n    ) external onlyOwner returns (bool) {\n        require(from != address(0), \"Invalid address\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(balanceOf(from) >= amount, \"Insufficient balance\");\n\n        _burn(from, amount); // Using OpenZeppelin's internal _burn function\n\n        totalBurned += amount;\n\n        emit Burn(from, amount);\n        return true;\n    }\nfunction balanceOf(address account) external view returns (uint256);\nfunction _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\nfunction _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }",
        "references": {
          "references": []
        }
      },
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function addCollateralReward(\n        uint256 _amount\n    ) external payable returns (bool) {\n        //collateralToken.transferFrom(msg.sender, address(this), _amount);\n        uint _totalStake = totalStake;\n        if (_totalStake == 0) {\n            return false;\n        } else {\n            require(msg.value == _amount, \"Invalid collateral reward amount\");\n            totalCollateralPerToken += (_amount * PRECISION) / _totalStake;\n            emit CollateralRewardAdded(_amount);\n            return true;\n        }\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        }
      }
    ]
  }
}