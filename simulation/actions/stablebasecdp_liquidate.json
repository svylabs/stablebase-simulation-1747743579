{
  "action": {
    "name": "Liquidate",
    "summary": "Initiates liquidation.",
    "contract_name": "StableBaseCDP",
    "function_name": "liquidate",
    "probability": 0.9
  },
  "action_detail": {
    "action_name": "Liquidate",
    "contract_name": "StableBaseCDP",
    "function_name": "liquidate",
    "pre_execution_parameter_generation_rules": [
      "The `liquidate` function does not accept any parameters. It retrieves the `safeId` from the `safesOrderedForLiquidation` queue.",
      "The `safesOrderedForLiquidation` should not be empty.",
      "The `safeId` must exist in the `safes` mapping.",
      "The collateral value of the `safeId` must be less than ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR). The `collateralValue` is calculated as `(collateralAmount * priceOracle.fetchPrice()) / PRECISION`",
      "The borrowedAmount of the safe must be greater than 0.",
      "The collateralAmount must be greater than 0."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Safe State",
        "state_update_descriptions": [
          "The `Safe` associated with `_safeId` is updated using the `_updateSafe` function, potentially increasing `borrowedAmount` and `collateralAmount` based on cumulative debt and collateral per unit collateral.",
          "The `Safe` associated with `_safeId` is removed from the `safes` mapping using `delete safes[_safeId]`.",
          "The `Safe` is removed from both liquidation and redemption queues using `_removeSafeFromBothQueues(_safeId)`."
        ]
      },
      {
        "category": "Global Debt and Collateral",
        "state_update_descriptions": [
          "`totalCollateral` is decreased by `collateralAmount`.",
          "`totalDebt` is decreased by `borrowedAmount` using the `_updateTotalDebt` function.",
          "If liquidation uses the secondary mechanism (`stabilityPool.isLiquidationPossible` returns false), debt and collateral are distributed to existing borrowers using `distributeDebtAndCollateral` which updates `cumulativeCollateralPerUnitCollateral` and `cumulativeDebtPerUnitCollateral`."
        ]
      },
      {
        "category": "Stability Pool Interaction",
        "state_update_descriptions": [
          "If `stabilityPool.isLiquidationPossible` returns true, the `stabilityPool.performLiquidation` function is called, transferring `collateralAmount - liquidationFee` to the Stability Pool and reducing `totalStakedRaw` in the Stability Pool.",
          "If liquidation is successful using the Stability Pool, `sbdToken.burn` is called to burn `borrowedAmount` from the Stability Pool."
        ]
      },
      {
        "category": "Fee Distribution",
        "state_update_descriptions": [
          "A liquidation fee (`liquidationFee`) is calculated and potentially distributed to `dfireTokenStaking` or the `stabilityPool` using `_distributeLiquidationFeeAndGasCompensation`. If these pools cannot receive rewards, the fee is refunded to `msg.sender`.",
          "Gas compensation is calculated and refunded to `msg.sender` if available."
        ]
      },
      {
        "category": "Doubly Linked List Updates",
        "state_update_descriptions": [
          "The Safe is removed from the liquidation and redemption queues by calling functions on the `safesOrderedForLiquidation` and `safesOrderedForRedemption` contracts."
        ]
      },
      {
        "category": "ERC721 token",
        "state_update_descriptions": [
          "The NFT representing the safe is burned using StableBaseCDP's internal `_burn` function."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Safe Removal",
        "rule_descriptions": [
          "The `Safe` associated with `_safeId` should no longer exist in the `safes` mapping: `safes[_safeId]` should revert or return default values.",
          "The `Safe` should be removed from the doubly linked lists `safesOrderedForLiquidation` and `safesOrderedForRedemption`."
        ]
      },
      {
        "category": "Global Debt and Collateral Consistency",
        "rule_descriptions": [
          "`totalCollateral` should be decreased by the original `collateralAmount` of the liquidated `Safe`.",
          "`totalDebt` should be decreased by the original `borrowedAmount` of the liquidated `Safe`.",
          "If secondary mechanism used, `cumulativeCollateralPerUnitCollateral` and `cumulativeDebtPerUnitCollateral` should be updated accordingly."
        ]
      },
      {
        "category": "Stability Pool State",
        "rule_descriptions": [
          "If liquidation uses the Stability Pool, `totalStakedRaw` in the Stability Pool should decrease by `borrowedAmount`.",
          "If liquidation uses the Stability Pool, the `sbdToken` balance of the `stabilityPool` address must decrease by `borrowedAmount`."
        ]
      },
      {
        "category": "Fee Distribution",
        "rule_descriptions": [
          "If fees were distributed to `dfireTokenStaking` or `stabilityPool`, their respective collateral reward balances should increase by the appropriate amount.",
          "If a refund was issued, the `msg.sender` (the liquidator) should have received the refund amount."
        ]
      },
      {
        "category": "Events",
        "rule_descriptions": [
          "A `LiquidatedUsingStabilityPool` or `LiquidatedUsingSecondaryMechanism` event must be emitted, depending on which liquidation path was taken.",
          "A `SafeRemovedFromLiquidationQueue` and `SafeRemovedFromRedemptionQueue` event should be emitted.",
          "A `RemovedSafe` event must be emitted.",
          "If the liquidation fee was paid to `dfireTokenStaking` an event `LiquidationFeePaid` with receiver `address(dfireTokenStaking)` should be emitted.",
          "If the liquidation fee was paid to `stabilityPool` an event `LiquidationFeePaid` with receiver `address(stabilityPool)` should be emitted.",
          "A `LiquidationGasCompensationPaid` event should be emitted."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Liquidate",
    "contract_name": "StableBaseCDP",
    "function_name": "liquidate",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "safes",
            "type": "mapping",
            "what_does_it_track": "The information of individual safes, including collateral and borrowed amounts.",
            "why_is_is_important": "This ensures that the liquidated safe is no longer considered in the system's calculations and operations.",
            "when_is_it_updated": "This is updated when a safe is liquidated.",
            "how_to_validate_state_update": "Verify that `safes[_safeId]` is deleted by attempting to read its values, which should return default values (zeroes).",
            "has_conditional_updates": false,
            "summary_of_update": "The safe's data is removed (deleted) from the `safes` mapping.",
            "conditions": []
          },
          {
            "state_variable_name": "_owners",
            "type": "storage",
            "what_does_it_track": "Tracks ownership of the Safe (NFT).",
            "why_is_is_important": "Reflects the accurate state of safe ownership.",
            "when_is_it_updated": "Updated when a safe is liquidated and its corresponding NFT is burned.",
            "how_to_validate_state_update": "Check the ownership, balances, and token approvals related to the Safe (NFT) after the execution of the function. It should no longer exist.",
            "has_conditional_updates": false,
            "summary_of_update": "The total supply of safes decreases, as the liquidated safe is 'burned'.",
            "conditions": []
          },
          {
            "state_variable_name": "_balances",
            "type": "storage",
            "what_does_it_track": "Tracks balances related to the Safe (NFT).",
            "why_is_is_important": "Reflects the accurate balance of safes.",
            "when_is_it_updated": "Updated when a safe is liquidated and its corresponding NFT is burned.",
            "how_to_validate_state_update": "Check the ownership, balances, and token approvals related to the Safe (NFT) after the execution of the function. It should no longer exist.",
            "has_conditional_updates": false,
            "summary_of_update": "The total supply of safes decreases, as the liquidated safe is 'burned'.",
            "conditions": []
          },
          {
            "state_variable_name": "_tokenApprovals",
            "type": "storage",
            "what_does_it_track": "Tracks token approvals related to the Safe (NFT).",
            "why_is_is_important": "Reflects the accurate token approvals for safes.",
            "when_is_it_updated": "Updated when a safe is liquidated and its corresponding NFT is burned.",
            "how_to_validate_state_update": "Check the ownership, balances, and token approvals related to the Safe (NFT) after the execution of the function. It should no longer exist.",
            "has_conditional_updates": false,
            "summary_of_update": "The total supply of safes decreases, as the liquidated safe is 'burned'.",
            "conditions": []
          },
          {
            "state_variable_name": "totalCollateral",
            "type": "storage",
            "what_does_it_track": "The total amount of collateral in the system.",
            "why_is_is_important": "Reflects the total collateral backing the system's debt.",
            "when_is_it_updated": "When a safe is liquidated, the collateral is removed from the system.",
            "how_to_validate_state_update": "Check `totalCollateral` after liquidation. It should decrease by `collateralAmount` of the liquidated safe.",
            "has_conditional_updates": false,
            "summary_of_update": "The `totalCollateral` is decreased by the collateral amount of the liquidated safe.",
            "conditions": []
          },
          {
            "state_variable_name": "totalDebt",
            "type": "storage",
            "what_does_it_track": "The total amount of debt in the system.",
            "why_is_is_important": "Reflects the total debt outstanding in the system.",
            "when_is_it_updated": "When a safe is liquidated, the debt is removed from the system.",
            "how_to_validate_state_update": "Check `totalDebt` after liquidation. It should decrease by `borrowedAmount` of the liquidated safe.",
            "has_conditional_updates": false,
            "summary_of_update": "The `totalDebt` is decreased by the borrowed amount of the liquidated safe.",
            "conditions": []
          },
          {
            "state_variable_name": "cumulativeCollateralPerUnitCollateral",
            "type": "storage",
            "what_does_it_track": "Cumulative distribution of collateral and debt across remaining safes after liquidation, if secondary mechanism is used.",
            "why_is_is_important": "Ensures that debt and collateral from liquidated safes are correctly distributed to other safes if the Stability Pool is not used.",
            "when_is_it_updated": "Only when stability pool liquidation is not possible, and the secondary distribution mechanism is used.",
            "how_to_validate_state_update": "Check the values of `cumulativeCollateralPerUnitCollateral` and `cumulativeDebtPerUnitCollateral` after the liquidation.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates cumulative collateral and debt per unit collateral, distributing liquidated amounts to other safes.",
            "conditions": [
              "stabilityPool.isLiquidationPossible(borrowedAmount) is false"
            ]
          },
          {
            "state_variable_name": "cumulativeDebtPerUnitCollateral",
            "type": "storage",
            "what_does_it_track": "Cumulative distribution of collateral and debt across remaining safes after liquidation, if secondary mechanism is used.",
            "why_is_is_important": "Ensures that debt and collateral from liquidated safes are correctly distributed to other safes if the Stability Pool is not used.",
            "when_is_it_updated": "Only when stability pool liquidation is not possible, and the secondary distribution mechanism is used.",
            "how_to_validate_state_update": "Check the values of `cumulativeCollateralPerUnitCollateral` and `cumulativeDebtPerUnitCollateral` after the liquidation.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates cumulative collateral and debt per unit collateral, distributing liquidated amounts to other safes.",
            "conditions": [
              "stabilityPool.isLiquidationPossible(borrowedAmount) is false"
            ]
          },
          {
            "state_variable_name": "collateralLoss",
            "type": "storage",
            "what_does_it_track": "Tracks remaining collateral that couldn't be distributed perfectly during secondary liquidation.",
            "why_is_is_important": "Handles the remaining collateral amount that couldn't be perfectly distributed to other safes, ensuring accurate tracking of collateral within the protocol.",
            "when_is_it_updated": "Only when stability pool liquidation is not possible, and the secondary distribution mechanism is used.",
            "how_to_validate_state_update": "Check the `collateralLoss` value after liquidation, accounting for any remainder not distributed.",
            "has_conditional_updates": true,
            "summary_of_update": "Calculates and stores any collateral loss due to distribution.",
            "conditions": [
              "stabilityPool.isLiquidationPossible(borrowedAmount) is false"
            ]
          },
          {
            "state_variable_name": "debtLoss",
            "type": "storage",
            "what_does_it_track": "Tracks remaining debt that couldn't be distributed perfectly during secondary liquidation.",
            "why_is_is_important": "Handles the remaining debt amount that couldn't be perfectly distributed to other safes, ensuring accurate tracking of debt within the protocol.",
            "when_is_it_updated": "Only when stability pool liquidation is not possible, and the secondary distribution mechanism is used.",
            "how_to_validate_state_update": "Check the `debtLoss` value after liquidation, accounting for any remainder not distributed.",
            "has_conditional_updates": true,
            "summary_of_update": "Calculates and stores any debt loss due to distribution.",
            "conditions": [
              "stabilityPool.isLiquidationPossible(borrowedAmount) is false"
            ]
          },
          {
            "state_variable_name": "PROTOCOL_MODE",
            "type": "storage",
            "what_does_it_track": "The current operating mode of the protocol (BOOTSTRAP or NORMAL).",
            "why_is_is_important": "This allows the protocol to automatically switch operating modes based on the amount of debt in the system.",
            "when_is_it_updated": "Updated if the total debt crosses a threshold, switching the protocol from bootstrap to normal mode.",
            "how_to_validate_state_update": "If `PROTOCOL_MODE` is `BOOTSTRAP` and `totalDebt` becomes greater than `BOOTSTRAP_MODE_DEBT_THRESHOLD`, then `PROTOCOL_MODE` must change to `NORMAL`.",
            "has_conditional_updates": true,
            "summary_of_update": "The protocol mode is changed based on the total debt level.",
            "conditions": [
              "debt > BOOTSTRAP_MODE_DEBT_THRESHOLD",
              "PROTOCOL_MODE == SBStructs.Mode.BOOTSTRAP"
            ]
          },
          {
            "state_variable_name": "dfireTokenStaking",
            "type": "external_contract_call",
            "what_does_it_track": "Distribution of liquidation fees to SBR stakers or Stability Pool.",
            "why_is_is_important": "Incentivizes SBR staking and stability provision by distributing liquidation fees as rewards.",
            "when_is_it_updated": "After a successful liquidation, the liquidation fee is distributed to either SBR stakers or the Stability Pool, depending on whether they can receive rewards.",
            "how_to_validate_state_update": "Check if `dfireTokenStaking.addCollateralReward` or `stabilityPool.addCollateralReward` is called and that the corresponding state changes in those contracts are correctly reflected, using their respective events.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers liquidation fees to either SBR stakers or Stability Pool as rewards.",
            "conditions": [
              "liquidationFee > refund",
              "sbrStakingPoolCanReceiveRewards || stabilityPoolCanReceiveRewards"
            ]
          },
          {
            "state_variable_name": "stabilityPool",
            "type": "external_contract_call",
            "what_does_it_track": "Distribution of liquidation fees to SBR stakers or Stability Pool.",
            "why_is_is_important": "Incentivizes SBR staking and stability provision by distributing liquidation fees as rewards.",
            "when_is_it_updated": "After a successful liquidation, the liquidation fee is distributed to either SBR stakers or the Stability Pool, depending on whether they can receive rewards.",
            "how_to_validate_state_update": "Check if `dfireTokenStaking.addCollateralReward` or `stabilityPool.addCollateralReward` is called and that the corresponding state changes in those contracts are correctly reflected, using their respective events.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers liquidation fees to either SBR stakers or Stability Pool as rewards.",
            "conditions": [
              "liquidationFee > refund",
              "sbrStakingPoolCanReceiveRewards || stabilityPoolCanReceiveRewards"
            ]
          },
          {
            "state_variable_name": "liquidationSnapshots",
            "type": "mapping",
            "what_does_it_track": "Snapshots of collateral and debt per collateral at the time of the last update.",
            "why_is_is_important": "Ensures consistency and accuracy in the debt and collateral calculations for safes.",
            "when_is_it_updated": "Updated during the liquidation process in the `_updateSafe` function if the snapshot data is outdated.",
            "how_to_validate_state_update": "Check the state of `liquidationSnapshots[_safeId]` after liquidation.  It is not explicitly deleted, but its values may be overwritten in the `_updateSafe` function (if called).",
            "has_conditional_updates": false,
            "summary_of_update": "Updates or resets the snapshot information for the liquidated safe.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "OrderedDoublyLinkedList",
        "state_updated": [
          {
            "state_variable_name": "tail",
            "type": "storage",
            "what_does_it_track": "The tail of the doubly linked list representing the queue of safes ordered for liquidation.",
            "why_is_is_important": "Maintaining the correct `tail` is crucial for the proper functioning of the liquidation queue and ensuring that the system can identify the last safe to be liquidated.",
            "when_is_it_updated": "The `tail` is updated when a safe is removed from the liquidation queue.",
            "how_to_validate_state_update": "Check the `safesOrderedForLiquidation` contract to ensure the `tail` pointer is correctly updated to the previous safe in the queue, assuming the `StableBaseCDP` is the owner of the `OrderedDoublyLinkedList` contract. This ownership relationship is defined in the contract references.",
            "has_conditional_updates": false,
            "summary_of_update": "The `tail` pointer of `safesOrderedForLiquidation` is updated to reflect the new last element in the queue after removing a safe.",
            "conditions": []
          },
          {
            "state_variable_name": "head",
            "type": "storage",
            "what_does_it_track": "The head of the doubly linked list representing the queue of safes ordered for liquidation.",
            "why_is_is_important": "Maintaining the correct `head` is crucial for the proper functioning of the liquidation queue and ensuring that the system can identify the first safe to be liquidated.",
            "when_is_it_updated": "The `head` is updated when a safe is removed from the liquidation queue.",
            "how_to_validate_state_update": "Check the `safesOrderedForLiquidation` contract to ensure the `head` pointer is correctly updated to the next safe in the queue, assuming the `StableBaseCDP` is the owner of the `OrderedDoublyLinkedList` contract. This ownership relationship is defined in the contract references.",
            "has_conditional_updates": false,
            "summary_of_update": "The `head` pointer of `safesOrderedForLiquidation` is updated to reflect the new first element in the queue after removing a safe.",
            "conditions": []
          },
          {
            "state_variable_name": "nodes",
            "type": "mapping",
            "what_does_it_track": "The nodes in the doubly linked list representing the queue of safes ordered for liquidation.",
            "why_is_is_important": "Deleting the node ensures that the doubly linked list remains consistent and prevents issues with future operations on the liquidation queue.",
            "when_is_it_updated": "The `nodes` mapping is updated when a safe is removed from the liquidation queue.",
            "how_to_validate_state_update": "Check the `nodes` mapping within the `safesOrderedForLiquidation` contract to verify that the node associated with the liquidated `safeId` has been deleted, assuming the `StableBaseCDP` is the owner of the `OrderedDoublyLinkedList` contract. This ownership relationship is defined in the contract references.",
            "has_conditional_updates": false,
            "summary_of_update": "The node associated with the liquidated `safeId` is deleted from the `nodes` mapping within the `safesOrderedForLiquidation` contract.",
            "conditions": []
          },
          {
            "state_variable_name": "tail",
            "type": "storage",
            "what_does_it_track": "The tail of the doubly linked list representing the queue of safes ordered for redemption.",
            "why_is_is_important": "Maintaining the correct `tail` is crucial for the proper functioning of the redemption queue and ensuring that the system can identify the last safe to be redeemed.",
            "when_is_it_updated": "The `tail` is updated when a safe is removed from the redemption queue.",
            "how_to_validate_state_update": "Check the `safesOrderedForRedemption` contract to ensure the `tail` pointer is correctly updated to the previous safe in the queue, assuming the `StableBaseCDP` is the owner of the `OrderedDoublyLinkedList` contract. This ownership relationship is defined in the contract references.",
            "has_conditional_updates": false,
            "summary_of_update": "The `tail` pointer of `safesOrderedForRedemption` is updated to reflect the new last element in the queue after removing a safe.",
            "conditions": []
          },
          {
            "state_variable_name": "head",
            "type": "storage",
            "what_does_it_track": "The head of the doubly linked list representing the queue of safes ordered for redemption.",
            "why_is_is_important": "Maintaining the correct `head` is crucial for the proper functioning of the redemption queue and ensuring that the system can identify the first safe to be redeemed.",
            "when_is_it_updated": "The `head` is updated when a safe is removed from the redemption queue.",
            "how_to_validate_state_update": "Check the `safesOrderedForRedemption` contract to ensure the `head` pointer is correctly updated to the next safe in the queue, assuming the `StableBaseCDP` is the owner of the `OrderedDoublyLinkedList` contract. This ownership relationship is defined in the contract references.",
            "has_conditional_updates": false,
            "summary_of_update": "The `head` pointer of `safesOrderedForRedemption` is updated to reflect the new first element in the queue after removing a safe.",
            "conditions": []
          },
          {
            "state_variable_name": "nodes",
            "type": "mapping",
            "what_does_it_track": "The nodes in the doubly linked list representing the queue of safes ordered for redemption.",
            "why_is_is_important": "Deleting the node ensures that the doubly linked list remains consistent and prevents issues with future operations on the redemption queue.",
            "when_is_it_updated": "The `nodes` mapping is updated when a safe is removed from the redemption queue.",
            "how_to_validate_state_update": "Check the `nodes` mapping within the `safesOrderedForRedemption` contract to verify that the node associated with the liquidated `safeId` has been deleted, assuming the `StableBaseCDP` is the owner of the `OrderedDoublyLinkedList` contract. This ownership relationship is defined in the contract references.",
            "has_conditional_updates": false,
            "summary_of_update": "The node associated with the liquidated `safeId` is deleted from the `nodes` mapping within the `safesOrderedForRedemption` contract.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "sbdToken",
            "type": "erc20_burn",
            "what_does_it_track": "The amount of SBD tokens burned from the stability pool.",
            "why_is_is_important": "Reduces the total supply of SBD, balancing the supply after liquidation.",
            "when_is_it_updated": "When liquidation is possible using stability pool and borrowed amount is burned from stability pool.",
            "how_to_validate_state_update": "Verify by checking the events emitted by the sbdToken contract. There should be a `Burn` event with the correct `amount` and `from` address (stabilityPool).",
            "has_conditional_updates": true,
            "summary_of_update": "Burns SBD tokens from the Stability Pool.",
            "conditions": [
              "stabilityPool.isLiquidationPossible(borrowedAmount) == true"
            ]
          }
        ]
      },
      {
        "contract_name": "StabilityPool",
        "state_updated": [
          {
            "state_variable_name": "totalStakedRaw, stakeScalingFactor",
            "type": "external_contract_call",
            "what_does_it_track": "State of the Stability Pool after liquidation.",
            "why_is_is_important": "Maintains accurate stake information in Stability Pool.",
            "when_is_it_updated": "After `stabilityPool.performLiquidation` is called.",
            "how_to_validate_state_update": "Verify the state of `totalStakedRaw` and `stakeScalingFactor` in the `stabilityPool` contract via events and public getter functions.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates `totalStakedRaw` and `stakeScalingFactor` in Stability Pool.",
            "conditions": [
              "stabilityPool.isLiquidationPossible(borrowedAmount) == true"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "StableBaseCDP",
        "code_snippet": "function liquidate() external nonReentrant {\n        uint256 gasStart = gasleft();\n        uint256 _safeId = safesOrderedForLiquidation.getTail();\n        _liquidate(_safeId, gasStart);\n    }\nfunction _liquidate(uint256 _safeId, uint256 gasStart) internal {\n        uint256 _last = safesOrderedForLiquidation.getHead();\n        Safe storage safe = safes[_safeId];\n        _updateSafe(_safeId, safe);\n        safe = safes[_safeId];\n        uint256 borrowedAmount = safe.borrowedAmount;\n        uint256 collateralAmount = safe.collateralAmount;\n        //require(_isApprovedOrOwner(msg.sender, _safeId), \"Unauthorized\");\n        require(collateralAmount > 0, \"Safe does not exist\");\n        require(\n            borrowedAmount > 0,\n            \"Cannot liquidate a Safe with no borrowed amount\"\n        );\n\n        uint256 collateralPrice = priceOracle.fetchPrice();\n        uint256 collateralValue = (collateralAmount * collateralPrice) /\n            PRECISION;\n        // Check if the collateral is sufficient for liquidation\n        require(\n            collateralValue <\n                ((borrowedAmount * liquidationRatio) / BASIS_POINTS_DIVISOR),\n            \"Can't liquidate yet\"\n        );\n        bool possible = stabilityPool.isLiquidationPossible(borrowedAmount);\n\n        // Pay liquidation fee\n        uint256 liquidationFee = (collateralAmount *\n            REDEMPTION_LIQUIDATION_FEE) / BASIS_POINTS_DIVISOR;\n\n        totalCollateral -= collateralAmount;\n        _updateTotalDebt(totalDebt, borrowedAmount, false);\n\n        if (possible) {\n            require(\n                stabilityPool.performLiquidation{\n                    value: collateralAmount - liquidationFee\n                }(borrowedAmount, collateralAmount - liquidationFee),\n                \"Liquidation failed\"\n            );\n            // Burn the amount from stability pool\n            require(\n                sbdToken.burn(address(stabilityPool), borrowedAmount),\n                \"Burn failed\"\n            );\n\n            emit LiquidatedUsingStabilityPool(\n                _safeId,\n                borrowedAmount,\n                collateralAmount,\n                totalCollateral,\n                totalDebt\n            );\n        } else {\n            require(_safeId != _last, \"Cannot liquidate the last Safe\");\n            // Liquidate by distributing the debt and collateral to the existing borrowers.\n            distributeDebtAndCollateral(\n                borrowedAmount,\n                collateralAmount - liquidationFee,\n                totalCollateral\n            );\n            emit LiquidatedUsingSecondaryMechanism(\n                _safeId,\n                borrowedAmount,\n                collateralAmount,\n                totalCollateral,\n                totalDebt\n            );\n        }\n        _removeSafeFromBothQueues(_safeId);\n\n        // Remove the Safe from the mapping\n        _removeSafe(_safeId);\n        uint256 gasUsed = gasStart - gasleft();\n        uint256 gasCompensation = (gasUsed + EXTRA_GAS_COMPENSATION) *\n            (block.basefee + (block.basefee * 10) / 100); // 10% extra gas cost\n        uint256 refund = min(gasCompensation, liquidationFee);\n        _distributeLiquidationFeeAndGasCompensation(\n            _safeId,\n            (gasUsed + EXTRA_GAS_COMPENSATION),\n            liquidationFee,\n            refund\n        );\n    }\nfunction _updateSafe(\n        uint _safeId,\n        Safe storage _safe\n    ) internal returns (Safe memory) {\n        // Update borrowed amount\n        LiquidationSnapshot storage liquidationSnapshot = liquidationSnapshots[\n            _safeId\n        ];\n        if (\n            liquidationSnapshot.collateralPerCollateralSnapshot !=\n            cumulativeCollateralPerUnitCollateral\n        ) {\n            uint debtIncrease = (_safe.collateralAmount *\n                (cumulativeDebtPerUnitCollateral -\n                    liquidationSnapshot.debtPerCollateralSnapshot)) / PRECISION;\n            _safe.borrowedAmount += debtIncrease;\n            _safe.totalBorrowedAmount += debtIncrease;\n            liquidationSnapshot\n                .debtPerCollateralSnapshot = cumulativeDebtPerUnitCollateral;\n\n            // Update deposited amount\n            uint collateralIncrease = (_safe.collateralAmount *\n                (cumulativeCollateralPerUnitCollateral -\n                    liquidationSnapshot.collateralPerCollateralSnapshot)) /\n                PRECISION;\n            _safe.collateralAmount += collateralIncrease;\n            liquidationSnapshot\n                .collateralPerCollateralSnapshot = cumulativeCollateralPerUnitCollateral;\n\n            totalCollateral += collateralIncrease;\n            _updateTotalDebt(totalDebt, debtIncrease, true);\n            emit SafeUpdated(\n                _safeId,\n                _safe.collateralAmount,\n                _safe.borrowedAmount,\n                collateralIncrease,\n                debtIncrease,\n                totalCollateral,\n                totalDebt\n            );\n        }\n\n        return _safe;\n    }\nfunction _updateTotalDebt(\n        uint256 currentDebt,\n        uint256 delta,\n        bool add\n    ) internal returns (uint256) {\n        uint256 debt = currentDebt;\n        if (add) {\n            debt = currentDebt + delta;\n        } else {\n            debt = currentDebt - delta;\n        }\n        // Bootstrap Mode to Normal mode only once, Normal mode to bootstrap mode is not possible\n        if (\n            debt > BOOTSTRAP_MODE_DEBT_THRESHOLD &&\n            PROTOCOL_MODE == SBStructs.Mode.BOOTSTRAP\n        ) {\n            PROTOCOL_MODE = SBStructs.Mode.NORMAL;\n        }\n        totalDebt = debt;\n        return debt;\n    }\nfunction distributeDebtAndCollateral(\n        uint256 debtAmount,\n        uint256 collateralAmount,\n        uint256 totalCollateralAfterLiquidation\n    ) internal {\n        uint256 collateralToDistribute = collateralAmount + collateralLoss;\n        uint256 debtToDistribute = debtAmount + debtLoss;\n        uint256 collPerUnitColl = (collateralToDistribute * PRECISION) /\n            totalCollateralAfterLiquidation;\n        cumulativeCollateralPerUnitCollateral += collPerUnitColl;\n        uint256 debtPerUnitColl = (debtToDistribute * PRECISION) /\n            totalCollateralAfterLiquidation;\n        cumulativeDebtPerUnitCollateral += debtPerUnitColl;\n        collateralLoss =\n            collateralToDistribute -\n            (collPerUnitColl * totalCollateralAfterLiquidation) /\n            PRECISION;\n        debtLoss =\n            debtToDistribute -\n            (debtPerUnitColl * totalCollateralAfterLiquidation) /\n            PRECISION;\n    }\nfunction _removeSafeFromBothQueues(uint256 safeId) internal {\n        safesOrderedForLiquidation.remove(safeId);\n        emit SafeRemovedFromLiquidationQueue(safeId);\n        safesOrderedForRedemption.remove(safeId);\n        emit SafeRemovedFromRedemptionQueue(safeId);\n    }\nfunction _removeSafe(uint256 _safeId) internal {\n        //safes[_safeId].status = SafeStatus.CLOSED;\n        Safe memory safe = safes[_safeId];\n        delete safes[_safeId];\n        _burn(_safeId);\n        emit RemovedSafe(_safeId, safe);\n    }\nfunction _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\nfunction _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\nfunction _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\nfunction _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\nfunction _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\nfunction isApprovedForAll(address owner, address operator) external view returns (bool);\nfunction _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\nfunction _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\nfunction _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }\nfunction min(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a < b ? a : b;\n    }\nfunction _distributeLiquidationFeeAndGasCompensation(\n        uint256 safeId,\n        uint256 gasUsed,\n        uint256 liquidationFee,\n        uint256 refund\n    ) internal {\n        // Try to send the liquidation fee to sbr stakers\n        if (liquidationFee > refund) {\n            if (sbrStakingPoolCanReceiveRewards) {\n                bool success = dfireTokenStaking.addCollateralReward{\n                    value: liquidationFee - refund\n                }(liquidationFee - refund);\n                if (!success && stabilityPoolCanReceiveRewards) {\n                    success = stabilityPool.addCollateralReward{\n                        value: liquidationFee - refund\n                    }(liquidationFee - refund);\n                    if (!success) {\n                        refund = liquidationFee;\n                    }\n                } else if (success) {\n                    emit LiquidationFeePaid(\n                        safeId,\n                        address(dfireTokenStaking),\n                        liquidationFee - refund\n                    );\n                }\n            } else if (stabilityPoolCanReceiveRewards) {\n                bool success = stabilityPool.addCollateralReward{\n                    value: liquidationFee - refund\n                }(liquidationFee - refund);\n                if (!success) {\n                    refund = liquidationFee;\n                } else {\n                    emit LiquidationFeePaid(\n                        safeId,\n                        address(stabilityPool),\n                        liquidationFee - refund\n                    );\n                }\n            } else {\n                refund = liquidationFee;\n            }\n        }\n        if (refund > 0) {\n            // Refund the remaining liquidation fee to the user\n            (bool success, ) = msg.sender.call{value: refund}(\"\");\n            require(success, \"Transfer failed\");\n            emit LiquidationGasCompensationPaid(\n                safeId,\n                gasUsed,\n                msg.sender,\n                refund\n            );\n        }\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "sbdToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "priceOracle",
              "contract_name": "MockPriceOracle"
            },
            {
              "state_variable_name": "stabilityPool",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "dfireTokenStaking",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "safesOrderedForLiquidation",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "safesOrderedForRedemption",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        }
      },
      {
        "contract_name": "OrderedDoublyLinkedList",
        "code_snippet": "function getTail() external view override returns (uint256) {\n        return tail;\n    }\nfunction getHead() external view override returns (uint256) {\n        return head;\n    }\nfunction remove(\n        uint256 id\n    ) external override onlyOwner returns (Node memory) {\n        if (\n            nodes[id].value == 0 && nodes[id].next == 0 && nodes[id].prev == 0\n        ) {\n            // Node doesn't exist\n            return Node(0, 0, 0);\n        }\n        return _remove(id);\n    }\nfunction _remove(uint256 id) internal returns (Node memory) {\n        Node memory node = nodes[id];\n        if (node.prev == 0) {\n            head = node.next;\n            nodes[node.next].prev = 0;\n        } else {\n            nodes[node.prev].next = node.next;\n            nodes[node.next].prev = node.prev;\n        }\n        if (node.next == 0) {\n            tail = node.prev;\n            nodes[node.prev].next = 0;\n        } else {\n            nodes[node.next].prev = node.prev;\n            nodes[node.prev].next = node.next;\n        }\n        delete nodes[id];\n        return node;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        }
      },
      {
        "contract_name": "MockPriceOracle",
        "code_snippet": "function fetchPrice() external view override returns (uint256) {\n        return price;\n    }",
        "references": {
          "references": []
        }
      },
      {
        "contract_name": "StabilityPool",
        "code_snippet": "function isLiquidationPossible(\n        uint256 amount\n    ) external view override returns (bool) {\n        return amount <= totalStakedRaw;\n    }\nfunction performLiquidation(\n        uint256 amount,\n        uint256 collateral\n    ) external payable onlyDebtContract returns (bool) {\n        //require(msg.sender == debtContract, \"Caller is not the debt contract\");\n        //uint256 totalEffectiveStake = getTotalEffectiveStake();\n        require(amount <= totalStakedRaw, \"Invalid liquidation amount\");\n        require(msg.value == collateral, \"Invalid collateral amount\");\n\n        uint256 previousScalingFactor = stakeScalingFactor;\n        //uint256 scalingFactorReduction = (_amount * precision) / totalStakedRaw;\n        // (1 - Amount / totalStakedRaw)\n        uint256 newScalingFactor = ((totalStakedRaw - amount) * precision) /\n            totalStakedRaw;\n        uint256 cumulativeProductScalingFactor = (stakeScalingFactor *\n            newScalingFactor) / precision;\n\n        stakeScalingFactor = cumulativeProductScalingFactor;\n\n        uint256 _collateral = collateral + collateralLoss;\n\n        uint256 _totalCollateralPerToken = ((_collateral *\n            previousScalingFactor *\n            precision) / totalStakedRaw) / precision;\n\n        // Update total collateral per token\n        totalCollateralPerToken += _totalCollateralPerToken;\n        collateralLoss =\n            _collateral -\n            ((_totalCollateralPerToken * totalStakedRaw * precision) /\n                previousScalingFactor) /\n            precision;\n\n        emit LiquidationPerformed(\n            amount,\n            collateral,\n            totalStakedRaw,\n            stakeScalingFactor,\n            totalCollateralPerToken\n        );\n\n        totalStakedRaw -= amount;\n\n        if (totalStakedRaw == 0 && rewardSenderActive) {\n            require(\n                IRewardSender(stableBaseCDP).setCanStabilityPoolReceiveRewards(\n                    false\n                ),\n                \"Unable to deactivate reward sender\"\n            );\n        }\n\n        if (cumulativeProductScalingFactor < minimumScalingFactor) {\n            StakeResetSnapshot memory resetSnapshot = StakeResetSnapshot({\n                scalingFactor: cumulativeProductScalingFactor,\n                totalRewardPerToken: totalRewardPerToken,\n                totalCollateralPerToken: totalCollateralPerToken,\n                totalSBRRewardPerToken: totalSbrRewardPerToken\n            });\n            stakeResetSnapshots[stakeResetCount] = resetSnapshot;\n            totalCollateralPerToken = 0;\n            totalRewardPerToken = 0;\n            totalSbrRewardPerToken = 0;\n            stakeScalingFactor = precision;\n            stakeResetCount++;\n            emit ScalingFactorReset(stakeResetCount - 1, resetSnapshot);\n        }\n        return true;\n    }\nfunction addCollateralReward(\n        uint256 amount\n    ) external payable returns (bool) {\n        require(amount > 0, \"Reward must be greater than zero\");\n        require(msg.value == amount, \"Invalid collateral amount\");\n        uint256 _totalStakedRaw = totalStakedRaw;\n        if (_totalStakedRaw == 0) {\n            return false;\n        }\n\n        uint256 _totalAmount = amount + collateralLoss;\n        uint256 _collateralPerToken = ((_totalAmount *\n            stakeScalingFactor *\n            precision) / _totalStakedRaw) / precision;\n\n        totalCollateralPerToken += _collateralPerToken;\n\n        collateralLoss =\n            _totalAmount -\n            (((_collateralPerToken * _totalStakedRaw * precision) /\n                stakeScalingFactor) / precision);\n\n        emit CollateralRewardAdded(amount);\n        return true;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "sbrToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "stableBaseCDP",
              "contract_name": "StableBaseCDP"
            }
          ]
        }
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function burn(\n        address from,\n        uint256 amount\n    ) external onlyOwner returns (bool) {\n        require(from != address(0), \"Invalid address\");\n        require(amount > 0, \"Amount must be greater than 0\");\n        require(balanceOf(from) >= amount, \"Insufficient balance\");\n\n        _burn(from, amount); // Using OpenZeppelin's internal _burn function\n\n        totalBurned += amount;\n\n        emit Burn(from, amount);\n        return true;\n    }\nfunction balanceOf(address account) external view returns (uint256);\nfunction _burn(address account, uint256 value) internal {\n        if (account == address(0)) {\n            revert ERC20InvalidSender(address(0));\n        }\n        _update(account, address(0), value);\n    }\nfunction _update(address from, address to, uint256 value) internal virtual {\n        if (from == address(0)) {\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\n            _totalSupply += value;\n        } else {\n            uint256 fromBalance = _balances[from];\n            if (fromBalance < value) {\n                revert ERC20InsufficientBalance(from, fromBalance, value);\n            }\n            unchecked {\n                // Overflow not possible: value <= fromBalance <= totalSupply.\n                _balances[from] = fromBalance - value;\n            }\n        }\n\n        if (to == address(0)) {\n            unchecked {\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\n                _totalSupply -= value;\n            }\n        } else {\n            unchecked {\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\n                _balances[to] += value;\n            }\n        }\n\n        emit Transfer(from, to, value);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "stableBaseCDP"
            }
          ]
        }
      },
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function addCollateralReward(\n        uint256 _amount\n    ) external payable returns (bool) {\n        //collateralToken.transferFrom(msg.sender, address(this), _amount);\n        uint _totalStake = totalStake;\n        if (_totalStake == 0) {\n            return false;\n        } else {\n            require(msg.value == _amount, \"Invalid collateral reward amount\");\n            totalCollateralPerToken += (_amount * PRECISION) / _totalStake;\n            emit CollateralRewardAdded(_amount);\n            return true;\n        }\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        }
      }
    ]
  }
}