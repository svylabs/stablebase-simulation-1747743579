{
  "action": {
    "name": "Stake",
    "summary": "Allows a user to stake a specified amount of the staking token.",
    "contract_name": "DFIREStaking",
    "function_name": "stake",
    "probability": 0.8
  },
  "action_detail": {
    "action_name": "Stake",
    "contract_name": "DFIREStaking",
    "function_name": "stake",
    "pre_execution_parameter_generation_rules": [
      "The `_amount` parameter must be a positive integer greater than 0.",
      "The caller (msg.sender) must possess a balance of `stakingToken` (DFIREToken) that is greater than or equal to `_amount`.",
      "The `DFIREStaking` contract must have an allowance from `msg.sender` to spend at least `_amount` of `stakingToken` (DFIREToken)."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "User-specific Stake Updates",
        "state_update_descriptions": [
          "The `stake` amount for `msg.sender` within the `stakes` mapping in the `DFIREStaking` contract increases by `_amount`.",
          "The `rewardSnapshot` for `msg.sender` in the `stakes` mapping is updated to the `totalRewardPerToken` value at the time the `_claim` internal function is executed.",
          "The `collateralSnapshot` for `msg.sender` in the `stakes` mapping is updated to the `totalCollateralPerToken` value at the time the `_claim` internal function is executed."
        ]
      },
      {
        "category": "Contract-wide Stake Updates",
        "state_update_descriptions": [
          "The `totalStake` in the `DFIREStaking` contract increases by `_amount`."
        ]
      },
      {
        "category": "Token Transfers",
        "state_update_descriptions": [
          "An amount of `_amount` of `stakingToken` (DFIREToken) is transferred from `msg.sender` to the `DFIREStaking` contract address.",
          "If a `reward` is calculated and is greater than 0 during the `_claim` internal function call, an amount of `reward` of `rewardToken` (DFIDToken) is transferred from the `DFIREStaking` contract to `msg.sender`.",
          "If a `collateralReward` is calculated and is greater than 0 during the `_claim` internal function call, an amount of `collateralReward` of native token (Ether) is transferred from the `DFIREStaking` contract to `msg.sender`."
        ]
      },
      {
        "category": "External Contract Interactions",
        "state_update_descriptions": [
          "If `rewardSenderActive` is true and `totalStake` was 0 before the current stake, the `setCanSBRStakingPoolReceiveRewards` function on the `stableBaseContract` (type `IRewardSender`) is called with `true`."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "User-specific Stake Validation",
        "rule_descriptions": [
          "The `stake` amount for `msg.sender` in the `stakes` mapping should be equal to its value before the transaction plus `_amount`.",
          "The `rewardSnapshot` for `msg.sender` in the `stakes` mapping should be equal to the value of `totalRewardPerToken` at the point of `_claim` execution.",
          "The `collateralSnapshot` for `msg.sender` in the `stakes` mapping should be equal to the value of `totalCollateralPerToken` at the point of `_claim` execution."
        ]
      },
      {
        "category": "Contract-wide Stake Validation",
        "rule_descriptions": [
          "The `totalStake` in the `DFIREStaking` contract should be equal to its value before the transaction plus `_amount`."
        ]
      },
      {
        "category": "Token Balance Validation",
        "rule_descriptions": [
          "The `stakingToken` (DFIREToken) balance of `msg.sender` should have decreased by `_amount`.",
          "The `stakingToken` (DFIREToken) balance of the `DFIREStaking` contract should have increased by `_amount`.",
          "The `rewardToken` (DFIDToken) balance of `msg.sender` should have increased by the `rewardAmount` value emitted in the `Claimed` event (if `rewardAmount > 0`).",
          "The `rewardToken` (DFIDToken) balance of the `DFIREStaking` contract should have decreased by the `rewardAmount` value emitted in the `Claimed` event (if `rewardAmount > 0`).",
          "The native token (Ether) balance of `msg.sender` should have increased by the `collateralReward` value emitted in the `Claimed` event (if `collateralReward > 0`).",
          "The native token (Ether) balance of the `DFIREStaking` contract should have decreased by the `collateralReward` value emitted in the `Claimed` event (if `collateralReward > 0`)."
        ]
      },
      {
        "category": "Event Emission Validation",
        "rule_descriptions": [
          "A `Staked` event must be emitted with `user` equal to `msg.sender` and `amount` equal to `_amount`.",
          "A `Claimed` event must be emitted with `user` equal to `msg.sender`, `rewardAmount` corresponding to the calculated reward, and `collateralReward` corresponding to the calculated collateral reward from the internal `_claim` function."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Stake",
    "contract_name": "DFIREStaking",
    "function_name": "stake",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].stake",
            "type": "uint256",
            "what_does_it_track": "The total amount of DFIRETokens that a specific user (msg.sender) has staked in the contract.",
            "why_is_is_important": "It represents the user's principal investment in the staking pool and is used for calculating their share of rewards.",
            "when_is_it_updated": "Increased by the '_amount' parameter when the user calls the 'stake' function.",
            "how_to_validate_state_update": "Compare the 'stake' value within the 'Stake' struct for 'msg.sender' before and after the transaction. The new value should be the old value plus the '_amount' staked.",
            "has_conditional_updates": false,
            "summary_of_update": "The amount of staking tokens ('DFIREToken') held by the user within the staking contract is increased.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "uint256",
            "what_does_it_track": "A snapshot of the 'totalRewardPerToken' at the last interaction (stake/claim/unstake) for a specific user. This is crucial for calculating pending DFIN rewards.",
            "why_is_is_important": "It ensures that users only accrue rewards for the time period since their last interaction, preventing double claiming and ensuring fair reward distribution.",
            "when_is_it_updated": "Updated to the current 'totalRewardPerToken' at the beginning of the 'stake' function call (via the internal '_claim' function).",
            "how_to_validate_state_update": "Compare the 'rewardSnapshot' value within the 'Stake' struct for 'msg.sender' before and after the transaction. The new value should be equal to the current 'totalRewardPerToken' at the time of update.",
            "has_conditional_updates": false,
            "summary_of_update": "The user's snapshot of the global reward accumulation rate is updated to the current rate.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "uint256",
            "what_does_it_track": "A snapshot of the 'totalCollateralPerToken' at the last interaction (stake/claim/unstake) for a specific user. This is crucial for calculating pending native token collateral rewards.",
            "why_is_is_important": "It ensures that users only accrue collateral rewards for the time period since their last interaction, preventing double claiming and ensuring fair distribution.",
            "when_is_it_updated": "Updated to the current 'totalCollateralPerToken' at the beginning of the 'stake' function call (via the internal '_claim' function).",
            "how_to_validate_state_update": "Compare the 'collateralSnapshot' value within the 'Stake' struct for 'msg.sender' before and after the transaction. The new value should be equal to the current 'totalCollateralPerToken' at the time of update.",
            "has_conditional_updates": false,
            "summary_of_update": "The user's snapshot of the global collateral reward accumulation rate is updated to the current rate.",
            "conditions": []
          },
          {
            "state_variable_name": "totalStake",
            "type": "uint256",
            "what_does_it_track": "The cumulative sum of all DFIRETokens staked by all users in the contract.",
            "why_is_is_important": "It represents the total liquidity locked in the staking pool and is used for calculating global reward distribution rates.",
            "when_is_it_updated": "Increased by the '_amount' parameter when any user calls the 'stake' function.",
            "how_to_validate_state_update": "Compare the 'totalStake' variable before and after the transaction. The new value should be the old value plus the '_amount' staked.",
            "has_conditional_updates": false,
            "summary_of_update": "The total amount of staking tokens ('DFIREToken') accumulated in the contract is increased.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIREToken",
        "state_updated": [
          {
            "state_variable_name": "balanceOf[msg.sender]",
            "type": "uint256",
            "what_does_it_track": "The DFIREToken balance of the user calling the 'stake' function.",
            "why_is_is_important": "It reflects the change in the user's liquid holdings of the staking token.",
            "when_is_it_updated": "Decreased by '_amount' due to the 'transferFrom' call from 'msg.sender' to the 'DFIREStaking' contract.",
            "how_to_validate_state_update": "Check the 'balanceOf' for 'msg.sender' before and after the transaction. The new balance should be the old balance minus '_amount'.",
            "has_conditional_updates": false,
            "summary_of_update": "The user's balance of DFIREToken is decreased as tokens are transferred to the staking contract.",
            "conditions": []
          },
          {
            "state_variable_name": "balanceOf[address(DFIREStaking)]",
            "type": "uint256",
            "what_does_it_track": "The DFIREToken balance held by the DFIREStaking contract.",
            "why_is_is_important": "It represents the total amount of staking tokens managed by the contract and available for distribution during unstaking.",
            "when_is_it_updated": "Increased by '_amount' due to the 'transferFrom' call from 'msg.sender' to the 'DFIREStaking' contract.",
            "how_to_validate_state_update": "Check the 'balanceOf' for the 'DFIREStaking' contract address before and after the transaction. The new balance should be the old balance plus '_amount'.",
            "has_conditional_updates": false,
            "summary_of_update": "The DFIREStaking contract's balance of DFIREToken is increased.",
            "conditions": []
          },
          {
            "state_variable_name": "allowance[msg.sender][address(DFIREStaking)]",
            "type": "uint256",
            "what_does_it_track": "The amount of DFIREToken that the DFIREStaking contract is authorized to spend on behalf of 'msg.sender'.",
            "why_is_is_important": "It reflects the consumption of pre-approved spending limits.",
            "when_is_it_updated": "Decreased by '_amount' when 'transferFrom' is successfully executed, consuming the allowance.",
            "how_to_validate_state_update": "Check the 'allowance' for 'msg.sender' to 'DFIREStaking' before and after the transaction. The new allowance should be the old allowance minus '_amount'.",
            "has_conditional_updates": false,
            "summary_of_update": "The allowance given by the user to the DFIREStaking contract to spend their DFIREToken is decreased.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "balanceOf[address(DFIREStaking)]",
            "type": "uint256",
            "what_does_it_track": "The DFIDToken balance held by the DFIREStaking contract, which represents the pool of reward tokens.",
            "why_is_is_important": "It tracks the supply of DFIDToken available within the staking contract for reward distribution.",
            "when_is_it_updated": "Decreased by the 'reward' amount when a reward is calculated and transferred to 'msg.sender' during the '_claim' process.",
            "how_to_validate_state_update": "Check the 'balanceOf' for the 'DFIREStaking' contract address before and after the transaction. The new balance should be the old balance minus the 'reward' amount.",
            "has_conditional_updates": true,
            "summary_of_update": "The DFIDToken balance of the DFIREStaking contract decreases as rewards are transferred to the user.",
            "conditions": [
              "Calculated 'reward' is greater than 0"
            ]
          },
          {
            "state_variable_name": "balanceOf[msg.sender]",
            "type": "uint256",
            "what_does_it_track": "The DFIDToken balance of the user calling the 'stake' function.",
            "why_is_is_important": "It reflects the user's receipt of staking rewards in DFIDToken.",
            "when_is_it_updated": "Increased by the 'reward' amount when a reward is calculated and transferred to 'msg.sender' during the '_claim' process.",
            "how_to_validate_state_update": "Check the 'balanceOf' for 'msg.sender' before and after the transaction. The new balance should be the old balance plus the 'reward' amount.",
            "has_conditional_updates": true,
            "summary_of_update": "The user's DFIDToken balance increases as they receive their accumulated rewards.",
            "conditions": [
              "Calculated 'reward' is greater than 0"
            ]
          }
        ]
      },
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "canSBRStakingPoolReceiveRewards",
            "type": "boolean",
            "what_does_it_track": "A boolean flag that controls whether the DFIREStaking contract, acting as a SBR staking pool, is enabled to receive rewards from the StableBaseCDP contract.",
            "why_is_is_important": "This flag determines if rewards can be sent from StableBaseCDP to the DFIREStaking pool, which is crucial for the reward distribution mechanism.",
            "when_is_it_updated": "Set to 'true' only if 'rewardSenderActive' is true AND 'totalStake' was zero before the current '_amount' was added to it.",
            "how_to_validate_state_update": "Call the getter function for 'canSBRStakingPoolReceiveRewards' (or equivalent) on the 'StableBaseCDP' contract. It should be set to 'true'.",
            "has_conditional_updates": true,
            "summary_of_update": "The flag indicating if the staking pool is eligible to receive rewards from the StableBaseCDP contract is set to true.",
            "conditions": [
              "The 'rewardSenderActive' flag in 'DFIREStaking' is true.",
              "The 'totalStake' in 'DFIREStaking' was 0 BEFORE the current staking '_amount' was added."
            ]
          }
        ]
      },
      {
        "contract_name": "Native ETH",
        "state_updated": [
          {
            "state_variable_name": "msg.sender.balance",
            "type": "uint256",
            "what_does_it_track": "The native blockchain token (e.g., ETH) balance of the user calling the 'stake' function.",
            "why_is_is_important": "It reflects the user's receipt of staking collateral rewards in the native token.",
            "when_is_it_updated": "Increased by the 'collateralReward' amount when a collateral reward is calculated and transferred to 'msg.sender' during the '_claim' process.",
            "how_to_validate_state_update": "Check the native token balance of 'msg.sender' before and after the transaction. The new balance should be the old balance plus the 'collateralReward' amount.",
            "has_conditional_updates": true,
            "summary_of_update": "The user's native token balance increases as they receive their accumulated collateral rewards.",
            "conditions": [
              "Calculated 'collateralReward' is greater than 0"
            ]
          },
          {
            "state_variable_name": "address(DFIREStaking).balance",
            "type": "uint256",
            "what_does_it_track": "The native blockchain token (e.g., ETH) balance held by the DFIREStaking contract.",
            "why_is_is_important": "It tracks the supply of native token collateral available within the staking contract for reward distribution.",
            "when_is_it_updated": "Decreased by the 'collateralReward' amount when a collateral reward is calculated and transferred to 'msg.sender' during the '_claim' process.",
            "how_to_validate_state_update": "Check the native token balance of the 'DFIREStaking' contract before and after the transaction. The new balance should be the old balance minus the 'collateralReward' amount.",
            "has_conditional_updates": true,
            "summary_of_update": "The native token balance of the DFIREStaking contract decreases as collateral rewards are transferred to the user.",
            "conditions": [
              "Calculated 'collateralReward' is greater than 0"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function stake(uint256 _amount) external {\n        require(_amount > 0, \"Cannot stake zero tokens\");\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n\n        require(\n            stakingToken.transferFrom(msg.sender, address(this), _amount),\n            \"Transfer tokens failed\"\n        );\n\n        user.stake += _amount;\n        uint256 _oldTotalStake = totalStake;\n        totalStake += _amount;\n\n        if (rewardSenderActive && _oldTotalStake == 0) {\n            IRewardSender(stableBaseContract)\n                .setCanSBRStakingPoolReceiveRewards(true);\n        }\n\n        emit Staked(msg.sender, _amount);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_rewardToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stableBaseContract",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbrToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbdToken",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_priceOracle",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_dfireTokenStaking",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForLiquidation",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForRedemption",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIREToken",
        "code_snippet": "function transferFrom(address from, address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "StabilityPool"
            }
          ]
        },
        "constants": []
      }
    ]
  }
}