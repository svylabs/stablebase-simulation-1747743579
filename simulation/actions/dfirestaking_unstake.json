{
  "action": {
    "name": "Unstake",
    "summary": "Allows a user to unstake a specified amount of their staked tokens.",
    "contract_name": "DFIREStaking",
    "function_name": "unstake",
    "probability": 0.6
  },
  "action_detail": {
    "action_name": "Unstake",
    "contract_name": "DFIREStaking",
    "function_name": "unstake",
    "pre_execution_parameter_generation_rules": [
      "The `_amount` parameter must be greater than 0.",
      "The `_amount` parameter must be less than or equal to the user's current stake.",
      "The user must have a stake greater than or equal to the requested unstake amount."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Stake Update",
        "state_update_descriptions": [
          "Decrease the user's stake by the unstaked amount.",
          "Decrease the total stake by the unstaked amount."
        ]
      },
      {
        "category": "Reward Claim",
        "state_update_descriptions": [
          "Update the user's reward snapshot to the current total reward per token.",
          "Update the user's collateral snapshot to the current total collateral per token.",
          "Transfer reward tokens to the user.",
          "Transfer collateral reward (ETH) to the user."
        ]
      },
      {
        "category": "Token Transfer",
        "state_update_descriptions": [
          "Transfer unstaked tokens to the user."
        ]
      },
      {
        "category": "Reward Sender Activation",
        "state_update_descriptions": [
          "If `rewardSenderActive` is true and `totalStake` becomes 0 after unstaking, `setCanSBRStakingPoolReceiveRewards` is called on `stableBaseContract` to set it to `false`."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Stake Update",
        "rule_descriptions": [
          "The user's stake is decreased by the unstaked amount.",
          "The total stake is decreased by the unstaked amount."
        ]
      },
      {
        "category": "Reward Claim",
        "rule_descriptions": [
          "The user's reward snapshot is updated to the current total reward per token before reward claim.",
          "The user's collateral snapshot is updated to the current total collateral per token before collateral reward claim.",
          "The user's balance of reward tokens is increased by the calculated reward amount.",
          "The user has received the calculated collateral reward amount (ETH)."
        ]
      },
      {
        "category": "Token Transfer",
        "rule_descriptions": [
          "The user's balance of staking tokens has increased by the unstaked amount."
        ]
      },
      {
        "category": "Reward Sender Activation",
        "rule_descriptions": [
          "If `rewardSenderActive` was true and `totalStake` is now 0, then `IRewardSender(stableBaseContract).setCanSBRStakingPoolReceiveRewards(false)` has been called."
        ]
      },
      {
        "category": "Events",
        "rule_descriptions": [
          "An `Unstaked` event is emitted with the user's address and the unstaked amount.",
          "A `Claimed` event is emitted with the user's address, the reward amount, and the collateral reward amount."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Unstake",
    "contract_name": "DFIREStaking",
    "function_name": "unstake",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].stake",
            "type": "uint256",
            "what_does_it_track": "The amount of tokens staked by a user.",
            "why_is_is_important": "Reflects the current amount staked by the user which determines the reward and collateral they can claim. Crucial for calculating the correct reward and collateral amount when claiming collateral/rewards",
            "when_is_it_updated": "When a user unstakes tokens.",
            "how_to_validate_state_update": "Check the stakes mapping for the user's address and verify that the stake is decreased by _amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Decreases the user's staked amount by _amount.",
            "conditions": [
              "_amount > 0",
              "_amount <= user.stake"
            ]
          },
          {
            "state_variable_name": "totalStake",
            "type": "uint256",
            "what_does_it_track": "The total amount of tokens staked in the contract by all users.",
            "why_is_is_important": "Used to calculate the reward per token and overall staking status. It also affects conditional reward distribution to other pools",
            "when_is_it_updated": "When a user unstakes tokens.",
            "how_to_validate_state_update": "Check the totalStake variable and ensure it has decreased by _amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Decreases the total staked amount in the contract by _amount.",
            "conditions": [
              "_amount > 0",
              "_amount <= user.stake"
            ]
          },
          {
            "state_variable_name": "IRewardSender(stableBaseContract).setCanSBRStakingPoolReceiveRewards(false)",
            "type": "bool",
            "what_does_it_track": "A flag in the stableBaseContract indicating whether the staking pool can receive rewards.",
            "why_is_is_important": "Controls the distribution of rewards to the staking pool. It affects how the stable base contract behaves wrt rewards distribution",
            "when_is_it_updated": "When the last user unstakes all tokens and rewardSenderActive is true.",
            "how_to_validate_state_update": "Check the state of `canSBRStakingPoolReceiveRewards` in `stableBaseContract` and verify that it is set to false.",
            "has_conditional_updates": true,
            "summary_of_update": "If rewardSenderActive is true and totalStake is 0, it calls `setCanSBRStakingPoolReceiveRewards(false)` on the `stableBaseContract`.",
            "conditions": [
              "rewardSenderActive",
              "totalStake == 0"
            ]
          },
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "uint256",
            "what_does_it_track": "The user's reward snapshot, used to calculate claimable rewards.",
            "why_is_is_important": "Crucial for calculating the correct reward amount when claiming. It affects how claimable rewards are calculated later",
            "when_is_it_updated": "When the user unstakes, to take a snapshot of totalRewardPerToken",
            "how_to_validate_state_update": "call the `getStake` function with `msg.sender` as the argument, check the `rewardSnapshot` value and confirm it is updated",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's reward snapshot to the current total reward per token.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "uint256",
            "what_does_it_track": "The user's collateral snapshot, used to calculate claimable collateral.",
            "why_is_is_important": "Crucial for calculating the correct collateral amount when claiming. It affects how claimable collateral is calculated later",
            "when_is_it_updated": "When the user unstakes, to take a snapshot of totalCollateralPerToken",
            "how_to_validate_state_update": "call the `getStake` function with `msg.sender` as the argument, check the `collateralSnapshot` value and confirm it is updated",
            "has_conditional_updates": false,
            "summary_of_update": "Updates the user's collateral snapshot to the current total collateral per token.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIREToken",
        "state_updated": [
          {
            "state_variable_name": "stakingToken.transfer(msg.sender, _amount)",
            "type": "transfer",
            "what_does_it_track": "The transfer of DFIREToken to the user.",
            "why_is_is_important": "Returns the unstaked tokens to the user. The user's balance is updated as part of token transfer.",
            "when_is_it_updated": "When a user unstakes tokens.",
            "how_to_validate_state_update": "Check the user's DFIREToken balance and verify that it has increased by _amount. Check the contract's DFIREToken balance and verify that it has decreased by _amount.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers _amount of staking tokens (DFIREToken) from the contract to the user.",
            "conditions": [
              "_amount > 0",
              "_amount <= user.stake"
            ]
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "rewardToken.transfer(msg.sender, reward)",
            "type": "transfer",
            "what_does_it_track": "The transfer of DFIDToken to the user.",
            "why_is_is_important": "Sends reward token to the user based on stake. The user's balance is updated as part of token transfer.",
            "when_is_it_updated": "When a user unstakes tokens.",
            "how_to_validate_state_update": "Check the user's reward token (DFIDToken) balance and verify that it has increased by reward. Check the contract's reward token (DFIDToken) balance and verify that it has decreased by reward.",
            "has_conditional_updates": true,
            "summary_of_update": "Transfers reward tokens (DFIDToken) from the contract to the user.",
            "conditions": [
              "((totalRewardPerToken - user.rewardSnapshot) * user.stake) / PRECISION > 0"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function unstake(uint256 _amount) external {\n        require(_amount > 0, \"Cannot unstake zero tokens\");\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n\n        require(_amount <= user.stake, \"Invalid unstake amount\");\n\n        user.stake -= _amount;\n        totalStake -= _amount;\n\n        if (rewardSenderActive && totalStake == 0) {\n            IRewardSender(stableBaseContract)\n                .setCanSBRStakingPoolReceiveRewards(false);\n        }\n\n        require(\n            stakingToken.transfer(msg.sender, _amount),\n            \"Transfer tokens failed\"\n        );\n\n        emit Unstaked(msg.sender, _amount);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": []
        },
        "constants": []
      },
      {
        "contract_name": "DFIREToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "stabilityPool",
              "contract_name": "StabilityPool"
            }
          ]
        },
        "constants": []
      }
    ]
  }
}