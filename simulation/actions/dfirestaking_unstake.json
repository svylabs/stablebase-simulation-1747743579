{
  "action": {
    "name": "Unstake",
    "summary": "Allows a user to unstake a specified amount of their staked tokens.",
    "contract_name": "DFIREStaking",
    "function_name": "unstake",
    "probability": 0.6
  },
  "action_detail": {
    "action_name": "Unstake",
    "contract_name": "DFIREStaking",
    "function_name": "unstake",
    "pre_execution_parameter_generation_rules": [
      "The '_amount' parameter must be a positive integer.",
      "The '_amount' parameter must be less than or equal to the current staked balance of the user, which can be queried from DFIREStaking.stakes[msg.sender].stake."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "User Specific Stake Data",
        "state_update_descriptions": [
          "The user's staked amount in the DFIREStaking contract (stakes[msg.sender].stake) decreases by the specified _amount.",
          "The user's reward snapshot (stakes[msg.sender].rewardSnapshot) is updated to the current totalRewardPerToken.",
          "The user's collateral snapshot (stakes[msg.sender].collateralSnapshot) is updated to the current totalCollateralPerToken."
        ]
      },
      {
        "category": "Global Staking Pool Data",
        "state_update_descriptions": [
          "The total staked amount in the DFIREStaking contract (totalStake) decreases by the specified _amount.",
          "If 'rewardSenderActive' is true and 'totalStake' becomes zero after this unstake, the 'canSBRStakingPoolReceiveRewards' flag on the StableBaseCDP contract (referenced by stableBaseContract) is set to false."
        ]
      },
      {
        "category": "Token Balances",
        "state_update_descriptions": [
          "The DFIREToken balance of the user (msg.sender) increases by the specified _amount.",
          "The DFIREToken balance held by the DFIREStaking contract decreases by the specified _amount.",
          "If a reward is calculated and is greater than zero, the DFIDToken balance of the user (msg.sender) increases by the calculated reward amount.",
          "If a reward is calculated and is greater than zero, the DFIDToken balance held by the DFIREStaking contract decreases by the calculated reward amount."
        ]
      },
      {
        "category": "Native Token Balances",
        "state_update_descriptions": [
          "If collateral reward is calculated and is greater than zero, the native token balance of the user (msg.sender) increases by the calculated collateral reward amount.",
          "If collateral reward is calculated and is greater than zero, the native token balance of the DFIREStaking contract decreases by the calculated collateral reward amount."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "User Specific Stake Data Validation",
        "rule_descriptions": [
          "The user's DFIREStaking.stakes[msg.sender].stake should be equal to its pre-execution value minus the _amount.",
          "The user's DFIREStaking.stakes[msg.sender].rewardSnapshot should be equal to the DFIREStaking.totalRewardPerToken at the time of transaction execution.",
          "The user's DFIREStaking.stakes[msg.sender].collateralSnapshot should be equal to the DFIREStaking.totalCollateralPerToken at the time of transaction execution."
        ]
      },
      {
        "category": "Global Staking Pool Data Validation",
        "rule_descriptions": [
          "The DFIREStaking.totalStake should be equal to its pre-execution value minus the _amount.",
          "If DFIREStaking.rewardSenderActive was true and DFIREStaking.totalStake became zero after the unstake, then StableBaseCDP.setCanSBRStakingPoolReceiveRewards should have been called with false. Otherwise, StableBaseCDP.canSBRStakingPoolReceiveRewards should remain unchanged."
        ]
      },
      {
        "category": "Token Balance Validation",
        "rule_descriptions": [
          "The DFIREToken.balanceOf(msg.sender) should be equal to its pre-execution value plus the _amount.",
          "The DFIREToken.balanceOf(address(DFIREStaking)) should be equal to its pre-execution value minus the _amount.",
          "The DFIDToken.balanceOf(msg.sender) should be equal to its pre-execution value plus the calculated reward amount (if reward > 0).",
          "The DFIDToken.balanceOf(address(DFIREStaking)) should be equal to its pre-execution value minus the calculated reward amount (if reward > 0)."
        ]
      },
      {
        "category": "Native Token Balance Validation",
        "rule_descriptions": [
          "The native token balance of msg.sender should be equal to its pre-execution value plus the calculated collateral reward amount (if collateral reward > 0).",
          "The native token balance of DFIREStaking contract should be equal to its pre-execution value minus the calculated collateral reward amount (if collateral reward > 0)."
        ]
      },
      {
        "category": "Event Emission Validation",
        "rule_descriptions": [
          "An 'Unstaked' event should be emitted with 'user' equal to msg.sender and 'amount' equal to the _amount.",
          "A 'Claimed' event should be emitted with 'user' equal to msg.sender, 'rewardAmount' equal to the calculated reward, and 'collateralReward' equal to the calculated collateral reward."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Unstake",
    "contract_name": "DFIREStaking",
    "function_name": "unstake",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].stake",
            "type": "uint256",
            "what_does_it_track": "The amount of DFIRE tokens staked by a specific user (msg.sender).",
            "why_is_is_important": "It reflects the current principal stake of the user in the contract.",
            "when_is_it_updated": "Decreased by `_amount` when the user successfully unstakes.",
            "how_to_validate_state_update": "Verify that `stakes[msg.sender].stake` has decreased by the `_amount` specified.",
            "has_conditional_updates": false,
            "summary_of_update": "The user's staked amount is reduced by the unstaked amount.",
            "conditions": []
          },
          {
            "state_variable_name": "totalStake",
            "type": "uint256",
            "what_does_it_track": "The cumulative sum of all DFIRE tokens currently staked in the contract.",
            "why_is_is_important": "It reflects the overall liquidity and total value locked in the staking pool, critical for reward distribution calculations.",
            "when_is_it_updated": "Decreased by `_amount` when any user unstakes.",
            "how_to_validate_state_update": "Verify that `totalStake` has decreased by the `_amount` specified.",
            "has_conditional_updates": false,
            "summary_of_update": "The total amount of DFIRE tokens staked in the contract is reduced by the unstaked amount.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "uint256",
            "what_does_it_track": "A snapshot of the `totalRewardPerToken` value for a user's stake, used to calculate pending rewards.",
            "why_is_is_important": "It prevents users from claiming rewards accrued before their last interaction and ensures accurate reward calculation based on their stake duration.",
            "when_is_it_updated": "Updated to the current `totalRewardPerToken` value each time `_claim` (and thus `unstake`) is called for the user.",
            "how_to_validate_state_update": "Verify that `stakes[msg.sender].rewardSnapshot` is updated to the current `totalRewardPerToken` value.",
            "has_conditional_updates": false,
            "summary_of_update": "The user's `rewardSnapshot` is updated to the current `totalRewardPerToken` to reflect rewards claimed.",
            "conditions": []
          },
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "uint256",
            "what_does_it_track": "A snapshot of the `totalCollateralPerToken` value for a user's stake, used to calculate pending collateral rewards.",
            "why_is_is_important": "It prevents users from claiming collateral rewards accrued before their last interaction and ensures accurate collateral reward calculation.",
            "when_is_it_updated": "Updated to the current `totalCollateralPerToken` value each time `_claim` (and thus `unstake`) is called for the user.",
            "how_to_validate_state_update": "Verify that `stakes[msg.sender].collateralSnapshot` is updated to the current `totalCollateralPerToken` value.",
            "has_conditional_updates": false,
            "summary_of_update": "The user's `collateralSnapshot` is updated to the current `totalCollateralPerToken` to reflect collateral rewards claimed.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "balances[msg.sender]",
            "type": "uint256",
            "what_does_it_track": "The balance of DFID tokens held by `msg.sender`.",
            "why_is_is_important": "It represents the user's ownership of reward tokens and updates their transferable balance.",
            "when_is_it_updated": "Increased by the calculated reward amount if `reward` is positive, as part of the `_claim` process.",
            "how_to_validate_state_update": "Verify that the `balanceOf(msg.sender)` increases by the `reward` amount and `balanceOf(DFIREStaking)` decreases by the `reward` amount in the DFIDToken contract.",
            "has_conditional_updates": true,
            "summary_of_update": "The `msg.sender` receives their calculated DFID (reward) tokens.",
            "conditions": [
              "Calculated `reward` amount is greater than 0."
            ]
          },
          {
            "state_variable_name": "balances[DFIREStaking]",
            "type": "uint256",
            "what_does_it_track": "The balance of DFID tokens held by the DFIREStaking contract.",
            "why_is_is_important": "It reflects the pool of reward tokens available within the staking contract for distribution.",
            "when_is_it_updated": "Decreased by the calculated reward amount if `reward` is positive, as part of the `_claim` process.",
            "how_to_validate_state_update": "Verify that the `balanceOf(DFIREStaking)` decreases by the `reward` amount and `balanceOf(msg.sender)` increases by the `reward` amount in the DFIDToken contract.",
            "has_conditional_updates": true,
            "summary_of_update": "The staking contract's balance of DFID (reward) tokens decreases.",
            "conditions": [
              "Calculated `reward` amount is greater than 0."
            ]
          }
        ]
      },
      {
        "contract_name": "DFIREToken",
        "state_updated": [
          {
            "state_variable_name": "balances[msg.sender]",
            "type": "uint256",
            "what_does_it_track": "The balance of DFIRE tokens held by `msg.sender`.",
            "why_is_is_important": "It represents the user's ownership of the principal staking tokens and updates their transferable balance.",
            "when_is_it_updated": "Increased by `_amount` upon successful unstaking.",
            "how_to_validate_state_update": "Verify that the `balanceOf(msg.sender)` increases by `_amount` and `balanceOf(DFIREStaking)` decreases by `_amount` in the DFIREToken contract.",
            "has_conditional_updates": false,
            "summary_of_update": "The `msg.sender` receives their unstaked DFIRE tokens.",
            "conditions": []
          },
          {
            "state_variable_name": "balances[DFIREStaking]",
            "type": "uint256",
            "what_does_it_track": "The balance of DFIRE tokens held by the DFIREStaking contract.",
            "why_is_is_important": "It reflects the total principal tokens managed by the staking contract.",
            "when_is_it_updated": "Decreased by `_amount` upon successful unstaking.",
            "how_to_validate_state_update": "Verify that the `balanceOf(DFIREStaking)` decreases by `_amount` and `balanceOf(msg.sender)` increases by `_amount` in the DFIREToken contract.",
            "has_conditional_updates": false,
            "summary_of_update": "The staking contract's balance of DFIRE tokens decreases.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "canSBRStakingPoolReceiveRewards",
            "type": "boolean",
            "what_does_it_track": "Whether the DFIREStaking pool is allowed to receive rewards from the `IRewardSender` (StableBaseCDP).",
            "why_is_is_important": "It controls the reward distribution mechanism, pausing rewards if the staking pool is empty.",
            "when_is_it_updated": "Set to `false` if `rewardSenderActive` is true and `totalStake` becomes 0 after `_amount` is deducted.",
            "how_to_validate_state_update": "Verify that `canSBRStakingPoolReceiveRewards` is set to `false` in the `StableBaseCDP` contract if the conditions are met.",
            "has_conditional_updates": true,
            "summary_of_update": "The flag indicating if the staking pool can receive rewards is set to false.",
            "conditions": [
              "`rewardSenderActive` is true",
              "`totalStake` becomes 0 after the current unstake operation"
            ]
          }
        ]
      },
      {
        "contract_name": "Native Token (ETH/BNB)",
        "state_updated": [
          {
            "state_variable_name": "Native Token Balance (msg.sender)",
            "type": "uint256",
            "what_does_it_track": "The native token (e.g., ETH, BNB) balance of `msg.sender`.",
            "why_is_is_important": "It represents the user's ownership of native currency and updates their transferable balance.",
            "when_is_it_updated": "Increased by the calculated `collateralReward` amount if positive, as part of the `_claim` process.",
            "how_to_validate_state_update": "Verify that the native token balance of `msg.sender` increases by `collateralReward` and the native token balance of `DFIREStaking` decreases by `collateralReward`.",
            "has_conditional_updates": true,
            "summary_of_update": "The `msg.sender` receives their calculated native token collateral rewards.",
            "conditions": [
              "Calculated `collateralReward` amount is greater than 0."
            ]
          },
          {
            "state_variable_name": "Native Token Balance (DFIREStaking)",
            "type": "uint256",
            "what_does_it_track": "The native token (e.g., ETH, BNB) balance of the DFIREStaking contract.",
            "why_is_is_important": "It reflects the pool of native token collateral rewards available within the staking contract for distribution.",
            "when_is_it_updated": "Decreased by the calculated `collateralReward` amount if positive, as part of the `_claim` process.",
            "how_to_validate_state_update": "Verify that the native token balance of `DFIREStaking` decreases by `collateralReward` and the native token balance of `msg.sender` increases by `collateralReward`.",
            "has_conditional_updates": true,
            "summary_of_update": "The staking contract's native token balance decreases.",
            "conditions": [
              "Calculated `collateralReward` amount is greater than 0."
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function unstake(uint256 _amount) external {\n        require(_amount > 0, \"Cannot unstake zero tokens\");\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n\n        require(_amount <= user.stake, \"Invalid unstake amount\");\n\n        user.stake -= _amount;\n        totalStake -= _amount;\n\n        if (rewardSenderActive && totalStake == 0) {\n            IRewardSender(stableBaseContract)\n                .setCanSBRStakingPoolReceiveRewards(false);\n        }\n\n        require(\n            stakingToken.transfer(msg.sender, _amount),\n            \"Transfer tokens failed\"\n        );\n\n        emit Unstaked(msg.sender, _amount);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_rewardToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stableBaseContract",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbrToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbdToken",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_priceOracle",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_dfireTokenStaking",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForLiquidation",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForRedemption",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIREToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": []
        },
        "constants": []
      }
    ]
  }
}