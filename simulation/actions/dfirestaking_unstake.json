{
  "action": {
    "name": "Unstake",
    "summary": "Allows a user to unstake a specified amount of their staked tokens.",
    "contract_name": "DFIREStaking",
    "function_name": "unstake",
    "probability": 0.6
  },
  "action_detail": {
    "action_name": "Unstake",
    "contract_name": "DFIREStaking",
    "function_name": "unstake",
    "pre_execution_parameter_generation_rules": [
      "The '_amount' to unstake must be greater than zero.",
      "The '_amount' to unstake must be less than or equal to the current staked amount of the user (query DFIREStaking.stakes(msg.sender).stake)."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "DFIREStaking Contract State",
        "state_update_descriptions": [
          "The user's staked amount (stakes[msg.sender].stake) decreases by the specified '_amount'.",
          "The total staked amount in the DFIREStaking contract (totalStake) decreases by the specified '_amount'.",
          "The user's reward snapshot (stakes[msg.sender].rewardSnapshot) is updated to the current totalRewardPerToken.",
          "The user's collateral snapshot (stakes[msg.sender].collateralSnapshot) is updated to the current totalCollateralPerToken."
        ]
      },
      {
        "category": "Token Balances",
        "state_update_descriptions": [
          "The user's DFIREToken balance increases by the unstaked '_amount'.",
          "The DFIREStaking contract's DFIREToken balance decreases by the unstaked '_amount'.",
          "The user's DFIDToken balance increases by the calculated reward amount (if reward > 0).",
          "The DFIREStaking contract's DFIDToken balance decreases by the calculated reward amount (if reward > 0).",
          "The user's native currency (e.g., Ether) balance increases by the calculated collateral reward amount (if collateralReward > 0).",
          "The DFIREStaking contract's native currency (e.g., Ether) balance decreases by the calculated collateral reward amount (if collateralReward > 0)."
        ]
      },
      {
        "category": "External Contract Interactions (Conditional)",
        "state_update_descriptions": [
          "If rewardSenderActive is true AND totalStake becomes 0 after unstaking, the stableBaseContract (StableBaseCDP) will have its 'canSBRStakingPoolReceiveRewards' flag set to false."
        ]
      },
      {
        "category": "Events Emitted",
        "state_update_descriptions": [
          "An 'Unstaked' event is emitted, indicating the user (msg.sender) and the '_amount' unstaked.",
          "A 'Claimed' event is emitted, indicating the user (msg.sender) and the reward and collateral reward amounts that were transferred."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "DFIREStaking Contract State",
        "rule_descriptions": [
          "The user's staked amount (stakes[msg.sender].stake) must be equal to its value before the transaction minus the '_amount' unstaked.",
          "The total staked amount in the DFIREStaking contract (totalStake) must be equal to its value before the transaction minus the '_amount' unstaked.",
          "The user's reward snapshot (stakes[msg.sender].rewardSnapshot) must be equal to the totalRewardPerToken at the time of the transaction.",
          "The user's collateral snapshot (stakes[msg.sender].collateralSnapshot) must be equal to the totalCollateralPerToken at the time of the transaction."
        ]
      },
      {
        "category": "Token Balances",
        "rule_descriptions": [
          "The user's DFIREToken balance must have increased by the '_amount' unstaked.",
          "The DFIREStaking contract's DFIREToken balance must have decreased by the '_amount' unstaked.",
          "The user's DFIDToken balance must have increased by the calculated reward amount.",
          "The DFIREStaking contract's DFIDToken balance must have decreased by the calculated reward amount.",
          "The user's native currency balance (e.g., Ether) must have increased by the calculated collateral reward amount.",
          "The DFIREStaking contract's native currency balance (e.g., Ether) must have decreased by the calculated collateral reward amount."
        ]
      },
      {
        "category": "External Contract State (Conditional)",
        "rule_descriptions": [
          "If rewardSenderActive was true and totalStake became 0, then the stableBaseContract (StableBaseCDP) must have its 'canSBRStakingPoolReceiveRewards' flag set to false. Otherwise, its state should remain unchanged."
        ]
      },
      {
        "category": "Event Validation",
        "rule_descriptions": [
          "An 'Unstaked' event must be emitted with 'user' equal to the transaction sender (msg.sender) and 'amount' equal to the '_amount' specified.",
          "A 'Claimed' event must be emitted with 'user' equal to the transaction sender (msg.sender), 'rewardAmount' equal to the calculated reward, and 'collateralReward' equal to the calculated collateral reward."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Unstake",
    "contract_name": "DFIREStaking",
    "function_name": "unstake",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].rewardSnapshot",
            "type": "uint256",
            "what_does_it_track": "The reward per token snapshot for a specific user's stake, used to calculate rewards earned since the last snapshot.",
            "why_is_is_important": "It prevents users from claiming rewards for the same period multiple times and ensures accurate reward calculation based on their stake duration and the global reward accrual. After a user unstakes, their accumulated rewards are calculated and distributed, and this snapshot is updated to the current totalRewardPerToken to mark that the rewards up to this point have been processed. This prevents future claims from re-calculating already distributed rewards, ensuring that only new rewards accrued after this point are considered in subsequent claims or unstakes.",
            "when_is_it_updated": "When the unstake function is called, it internally calls _claim, which updates this variable.",
            "how_to_validate_state_update": "Verify that stakes[msg.sender].rewardSnapshot is updated to the current value of totalRewardPerToken immediately before reward calculation in the _claim function.",
            "has_conditional_updates": false,
            "summary_of_update": "The rewardSnapshot for the user is updated to the current totalRewardPerToken to reflect that all accrued rewards up to this point have been claimed (or will be claimed).",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].collateralSnapshot",
            "type": "uint256",
            "what_does_it_track": "The collateral per token snapshot for a specific user's stake, used to calculate collateral rewards earned since the last snapshot.",
            "why_is_is_important": "It prevents users from claiming collateral rewards for the same period multiple times and ensures accurate collateral reward calculation based on their stake duration and the global collateral reward accrual. Similar to rewardSnapshot, this is updated to ensure only future collateral rewards are accounted for in subsequent operations.",
            "when_is_it_updated": "When the unstake function is called, it internally calls _claim, which updates this variable.",
            "how_to_validate_state_update": "Verify that stakes[msg.sender].collateralSnapshot is updated to the current value of totalCollateralPerToken immediately before collateral reward calculation in the _claim function.",
            "has_conditional_updates": false,
            "summary_of_update": "The collateralSnapshot for the user is updated to the current totalCollateralPerToken to reflect that all accrued collateral rewards up to this point have been claimed (or will be claimed).",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "stakes[msg.sender].stake",
            "type": "uint256",
            "what_does_it_track": "The amount of DFIRE tokens currently staked by a specific user.",
            "why_is_is_important": "It reflects the user's current token holdings within the staking contract and is crucial for maintaining accurate staking records. This reduction is fundamental to unstaking, releasing the specified tokens back to the user.",
            "when_is_it_updated": "After validating the unstake amount, and after processing any pending rewards, the user's stake is reduced.",
            "how_to_validate_state_update": "Check that stakes[msg.sender].stake decreases by the exact _amount specified, provided _amount is valid and less than or equal to the current stake.",
            "has_conditional_updates": false,
            "summary_of_update": "The user's staked amount is reduced by the _amount specified.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIREStaking",
        "state_updated": [
          {
            "state_variable_name": "totalStake",
            "type": "uint256",
            "what_does_it_track": "The sum of all DFIRE tokens currently staked by all users in the contract.",
            "why_is_is_important": "It represents the overall liquidity locked in the staking pool and is used for various calculations, including determining if the reward sender should be active. Reducing it accurately maintains the total pool size.",
            "when_is_it_updated": "After a user's individual stake is reduced, the global totalStake is also reduced.",
            "how_to_validate_state_update": "Verify that totalStake decreases by the exact _amount specified, provided _amount is valid.",
            "has_conditional_updates": false,
            "summary_of_update": "The total amount of DFIRE tokens staked in the contract is reduced by the _amount unstaked by the user.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "DFIDToken",
        "state_updated": [
          {
            "state_variable_name": "balanceOf",
            "type": "mapping(address => uint256)",
            "what_does_it_track": "The balance of DFID tokens held by each address.",
            "why_is_is_important": "It reflects the distribution of reward tokens after a user unstakes, ensuring users receive their accrued rewards. This transfer directly impacts the token balances of the contract and the user.",
            "when_is_it_updated": "If a calculated reward amount is greater than zero, the transfer function of the rewardToken (DFIDToken) is called to move tokens from the staking contract to the user.",
            "how_to_validate_state_update": "Verify that DFIDToken.balanceOf(DFIREStaking) decreases by reward amount and DFIDToken.balanceOf(msg.sender) increases by reward amount, if reward is greater than zero.",
            "has_conditional_updates": true,
            "summary_of_update": "The DFIDToken balance of the DFIREStaking contract decreases, and the DFIDToken balance of msg.sender increases by the calculated reward amount.",
            "conditions": [
              "reward > 0"
            ]
          }
        ]
      },
      {
        "contract_name": "DFIREToken",
        "state_updated": [
          {
            "state_variable_name": "balanceOf",
            "type": "mapping(address => uint256)",
            "what_does_it_track": "The balance of DFIRE tokens held by each address.",
            "why_is_is_important": "It reflects the transfer of the unstaked tokens back to the user's wallet, reducing the contract's holdings and increasing the user's liquid balance. This is the core action of unstaking, returning the staked asset.",
            "when_is_it_updated": "After updating the user's stake and the total stake, the transfer function of the stakingToken (DFIREToken) is called to return the unstaked tokens to the user.",
            "how_to_validate_state_update": "Verify that DFIREToken.balanceOf(DFIREStaking) decreases by _amount and DFIREToken.balanceOf(msg.sender) increases by _amount.",
            "has_conditional_updates": false,
            "summary_of_update": "The DFIREToken balance of the DFIREStaking contract decreases, and the DFIREToken balance of msg.sender increases by the _amount being unstaked.",
            "conditions": []
          }
        ]
      },
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "canSBRStakingPoolReceiveRewards",
            "type": "boolean",
            "what_does_it_track": "A flag indicating whether the SBR Staking Pool is eligible to receive rewards.",
            "why_is_is_important": "It controls the flow of rewards to the staking pool, preventing rewards from being sent if the pool is empty and active reward sending is enabled, thus optimizing resource usage. This is an important mechanism to manage reward distribution efficiency.",
            "when_is_it_updated": "This variable is updated if, after the unstake operation, the totalStake in DFIREStaking becomes zero and rewardSenderActive is true.",
            "how_to_validate_state_update": "Verify that the setCanSBRStakingPoolReceiveRewards function on stableBaseContract (StableBaseCDP) is called with false as an argument.",
            "has_conditional_updates": true,
            "summary_of_update": "If rewardSenderActive is true and totalStake becomes 0 after the unstake operation, the ability for the SBR Staking Pool to receive rewards is disabled.",
            "conditions": [
              "rewardSenderActive is true",
              "totalStake == 0"
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "DFIREStaking",
        "code_snippet": "function unstake(uint256 _amount) external {\n        require(_amount > 0, \"Cannot unstake zero tokens\");\n        Stake storage user = stakes[msg.sender];\n        _claim(user);\n\n        require(_amount <= user.stake, \"Invalid unstake amount\");\n\n        user.stake -= _amount;\n        totalStake -= _amount;\n\n        if (rewardSenderActive && totalStake == 0) {\n            IRewardSender(stableBaseContract)\n                .setCanSBRStakingPoolReceiveRewards(false);\n        }\n\n        require(\n            stakingToken.transfer(msg.sender, _amount),\n            \"Transfer tokens failed\"\n        );\n\n        emit Unstaked(msg.sender, _amount);\n    }\nfunction _claim(Stake storage user) internal {\n        uint256 reward = ((totalRewardPerToken - user.rewardSnapshot) *\n            user.stake) / PRECISION;\n        user.rewardSnapshot = totalRewardPerToken;\n        uint256 collateralReward = ((totalCollateralPerToken -\n            user.collateralSnapshot) * user.stake) / PRECISION;\n        user.collateralSnapshot = totalCollateralPerToken;\n        if (reward > 0) {\n            require(\n                rewardToken.transfer(msg.sender, reward),\n                \"Transfer failed\"\n            );\n        }\n        if (collateralReward > 0) {\n            (bool success, ) = msg.sender.call{value: collateralReward}(\"\");\n            require(success, \"Transfer failed\");\n        }\n\n        emit Claimed(msg.sender, reward, collateralReward);\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "stakingToken",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "rewardToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "stableBaseContract",
              "contract_name": "StableBaseCDP"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIDToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_rewardToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stableBaseContract",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbrToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbdToken",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_priceOracle",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_dfireTokenStaking",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForLiquidation",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForRedemption",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        },
        "constants": []
      },
      {
        "contract_name": "DFIREToken",
        "code_snippet": "function transfer(address to, uint256 value) external returns (bool);",
        "references": {
          "references": [
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "StabilityPool"
            }
          ]
        },
        "constants": []
      }
    ]
  }
}