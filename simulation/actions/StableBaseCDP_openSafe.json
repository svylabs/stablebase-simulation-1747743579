"{\"action\":{\"name\":\"Open Safe\",\"summary\":\"Opens a new CDP (Safe).\",\"contract_name\":\"StableBaseCDP\",\"function_name\":\"openSafe\",\"probability\":0.7},\"action_detail\":{\"action_name\":\"Open Safe\",\"contract_name\":\"StableBaseCDP\",\"function_name\":\"openSafe\",\"pre_execution_parameter_generation_rules\":[\"Generate a _safeId that is greater than 0 and does not already exist in the safes mapping (safes[_safeId].collateralAmount == 0 and _ownerOf(_safeId) == address(0)).\",\"Generate an _amount that is greater than 0. This amount will also be sent as msg.value along with the transaction.\"],\"on_execution_state_updates_made\":[{\"category\":\"Safe Creation\",\"state_update_descriptions\":[\"A new Safe is created with collateralAmount set to _amount, borrowedAmount set to 0, weight set to 0, totalBorrowedAmount set to 0, and feePaid set to 0.\",\"A liquidation snapshot is created for the safe.\"]},{\"category\":\"Total Collateral Update\",\"state_update_descriptions\":[\"The totalCollateral state variable is increased by _amount.\"]},{\"category\":\"NFT Minting\",\"state_update_descriptions\":[\"An ERC721 NFT representing the Safe is minted and assigned to the message sender (msg.sender) with the _safeId as its tokenId.\"]},{\"category\":\"Event Emission\",\"state_update_descriptions\":[\"A Transfer event is emitted from address(0) to msg.sender for tokenId _safeId.\"]},{\"category\":\"Owner Mapping Update\",\"state_update_descriptions\":[\"The _owners mapping is updated with the new owner of the tokenId.\"]},{\"category\":\"Balances Mapping Update\",\"state_update_descriptions\":[\"The _balances mapping is updated to reflect that the recipient owns one more NFT.\"]}],\"post_execution_contract_state_validation_rules\":[{\"category\":\"Safe Existence\",\"rule_descriptions\":[\"Validate that a Safe with the provided _safeId exists.\",\"Verify that the owner of the Safe is the message sender (msg.sender).\"]},{\"category\":\"Collateral Amount\",\"rule_descriptions\":[\"Confirm that the collateral amount of the created Safe matches the provided _amount.\"]},{\"category\":\"Borrowed Amount\",\"rule_descriptions\":[\"Ensure that the initial borrowed amount of the Safe is 0.\"]},{\"category\":\"Total Collateral\",\"rule_descriptions\":[\"Check that the totalCollateral contract state variable has been increased by the amount of collateral deposited.\"]},{\"category\":\"Liquidation Snapshot\",\"rule_descriptions\":[\"Verify that a liquidation snapshot exists for the given safeId.\",\"Check that the debtPerCollateralSnapshot in the liquidation snapshot is equal to cumulativeDebtPerUnitCollateral at the time of opening the safe.\",\"Check that the collateralPerCollateralSnapshot in the liquidation snapshot is equal to cumulativeCollateralPerUnitCollateral at the time of opening the safe.\"]},{\"category\":\"Balance Update Validation\",\"rule_descriptions\":[\"Check that the balance of the msg.sender has increased by 1, indicating that the NFT was minted to the user.\"]}]},\"action_execution\":{\"action_name\":\"Open Safe\",\"contract_name\":\"StableBaseCDP\",\"function_name\":\"openSafe\",\"does_register_new_identifier\":true,\"new_identifiers\":[{\"name\":\"_safeId\",\"type\":\"structured_id_external\",\"has_max_identifier_limit_per_address\":true,\"max_identifier_limit_per_address\":20,\"description\":\"Unique ID for the newly created Safe.\"}],\"all_state_updates\":[{\"contract_name\":\"StableBaseCDP\",\"state_updated\":[{\"state_variable_name\":\"safes\",\"type\":\"mapping\",\"summary_of_update\":\"Updates the Safe struct with the provided collateral amount, setting borrowedAmount, weight, totalBorrowedAmount and feePaid to 0. A new liquidation snapshot is created for the safe.\",\"has_conditional_updates\":true,\"conditions\":[\"_amount > 0\",\"msg.value == _amount\",\"_safeId > 0\",\"safes[_safeId].collateralAmount == 0\",\"_ownerOf(_safeId) == address(0)\"]},{\"state_variable_name\":\"liquidationSnapshots\",\"type\":\"mapping\",\"summary_of_update\":\"Creates a snapshot of cumulativeDebtPerUnitCollateral and cumulativeCollateralPerUnitCollateral\",\"has_conditional_updates\":true,\"conditions\":[\"_amount > 0\",\"msg.value == _amount\",\"_safeId > 0\",\"safes[_safeId].collateralAmount == 0\",\"_ownerOf(_safeId) == address(0)\"]},{\"state_variable_name\":\"totalCollateral\",\"type\":\"global\",\"summary_of_update\":\"Increases the total collateral by the amount provided\",\"has_conditional_updates\":true,\"conditions\":[\"_amount > 0\",\"msg.value == _amount\",\"_safeId > 0\",\"safes[_safeId].collateralAmount == 0\",\"_ownerOf(_safeId) == address(0)\"]},{\"state_variable_name\":\"_owners\",\"type\":\"mapping\",\"summary_of_update\":\"Sets the owner of the new Safe (ERC721 token) to the message sender, effectively assigning ownership of the Safe NFT.\",\"has_conditional_updates\":true,\"conditions\":[\"_amount > 0\",\"msg.value == _amount\",\"_safeId > 0\",\"safes[_safeId].collateralAmount == 0\",\"_ownerOf(_safeId) == address(0)\",\"to != address(0)\"]},{\"state_variable_name\":\"_balances\",\"type\":\"mapping\",\"summary_of_update\":\"Increments the token balance of the message sender, representing ownership of an additional Safe (ERC721 token).\",\"has_conditional_updates\":true,\"conditions\":[\"_amount > 0\",\"msg.value == _amount\",\"_safeId > 0\",\"safes[_safeId].collateralAmount == 0\",\"_ownerOf(_safeId) == address(0)\",\"to != address(0)\"]}]}]}}"