{
  "action": {
    "name": "Close Safe",
    "summary": "Closes an existing CDP (Safe).",
    "contract_name": "StableBaseCDP",
    "function_name": "closeSafe",
    "probability": 0.3
  },
  "action_detail": {
    "action_name": "Close Safe",
    "contract_name": "StableBaseCDP",
    "function_name": "closeSafe",
    "pre_execution_parameter_generation_rules": [
      "The `safeId` parameter must correspond to an existing Safe that is owned by the `msg.sender`.",
      "The Safe identified by `safeId` must have a `borrowedAmount` of 0 after its internal state is updated by the `_updateSafe` function. This implies that the user must have fully repaid any outstanding debt on this Safe prior to calling `closeSafe`."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "Safe State Updates",
        "state_update_descriptions": [
          "The `collateralAmount` of the Safe (identified by `safeId`) might be adjusted based on the `cumulativeCollateralPerUnitCollateral` and `collateralPerCollateralSnapshot` if `_updateSafe` logic is triggered.",
          "The `borrowedAmount` of the Safe (identified by `safeId`) might be adjusted based on the `cumulativeDebtPerUnitCollateral` and `debtPerCollateralSnapshot` if `_updateSafe` logic is triggered.",
          "The `totalBorrowedAmount` of the Safe (identified by `safeId`) might be adjusted based on the `cumulativeDebtPerUnitCollateral` if `_updateSafe` logic is triggered.",
          "The `collateralPerCollateralSnapshot` for the Safe (identified by `safeId`) is updated to the current `cumulativeCollateralPerUnitCollateral`.",
          "The `debtPerCollateralSnapshot` for the Safe (identified by `safeId`) is updated to the current `cumulativeDebtPerUnitCollateral`.",
          "The entire Safe record for `safeId` is deleted from the `safes` mapping.",
          "The `_balances` mapping for the original owner of `safeId` decreases by 1.",
          "The `_owners` mapping for `safeId` is set to `address(0)`, indicating the NFT is burned.",
          "The `_tokenApprovals` for `safeId` is cleared (set to `address(0)`)."
        ]
      },
      {
        "category": "Global State Updates",
        "state_update_descriptions": [
          "The `totalCollateral` decreases by the final `collateralAmount` of the closed Safe (after any adjustments by `_updateSafe`).",
          "The `totalDebt` might be adjusted if the `_updateSafe` function logic is triggered, reflecting changes in the global debt.",
          "The `PROTOCOL_MODE` might change from `BOOTSTRAP` to `NORMAL` if the `totalDebt` (after any `_updateTotalDebt` adjustments) exceeds `BOOTSTRAP_MODE_DEBT_THRESHOLD`."
        ]
      },
      {
        "category": "ETH Transfer",
        "state_update_descriptions": [
          "An amount of ETH equivalent to the final `collateralAmount` of the closed Safe is transferred from the `StableBaseCDP` contract to the `msg.sender` (the owner of the Safe)."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "Contract State Validation",
        "rule_descriptions": [
          "The `safes` mapping at `safeId` should return default values (e.g., all fields as 0) or indicate an uninitialized state, as the Safe entry has been deleted.",
          "The `ownerOf(safeId)` should return `address(0)`, confirming that the Safe NFT has been burned.",
          "The `balanceOf(originalOwner)` for the Safe's previous owner should be 1 less than its value before the transaction.",
          "The `totalCollateral` state variable should be equal to its value before execution minus the `collateralAmount` of the Safe at the time of closure (after `_updateSafe` but before deletion).",
          "The `totalDebt` state variable should reflect any changes that occurred due to the `_updateSafe` call, if it was triggered."
        ]
      },
      {
        "category": "Event Emission Validation",
        "rule_descriptions": [
          "A `SafeClosed` event must be emitted with the correct `safeId`, the final `refundedCollateral` (which is the `collateralAmount` of the Safe after `_updateSafe`), and the updated `totalCollateral` and `totalDebt` values.",
          "A `RemovedSafe` event must be emitted with the correct `safeId` and the `Safe` struct data of the Safe *before* it was deleted from the mapping.",
          "A `Transfer` event (from ERC721) must be emitted with `from` as the original owner's address, `to` as `address(0)`, and `tokenId` as the `safeId`.",
          "A `SafeUpdated` event might be emitted if `_updateSafe` logic was triggered (i.e., if `liquidationSnapshot.collateralPerCollateralSnapshot != cumulativeCollateralPerUnitCollateral`)."
        ]
      },
      {
        "category": "Balance Validation",
        "rule_descriptions": [
          "The `msg.sender`'s ETH balance should increase by the `collateralAmount` of the Safe returned.",
          "The `StableBaseCDP` contract's ETH balance should decrease by the `collateralAmount` of the Safe returned."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Close Safe",
    "contract_name": "StableBaseCDP",
    "function_name": "closeSafe",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "safes[safeId]",
            "type": "mapping(uint256 => Safe)",
            "what_does_it_track": "Individual Collateralized Debt Positions (CDPs) with their collateral, borrowed amount, weight, total borrowed amount, and fee paid.",
            "why_is_is_important": "It tracks the core data for each CDP, and its deletion signifies the closing of a specific CDP.",
            "when_is_it_updated": "The Safe's internal fields (`borrowedAmount`, `totalBorrowedAmount`, `collateralAmount`) are updated by calling `_updateSafe` at the beginning of `closeSafe`. Immediately after, the entire Safe entry for `safeId` is deleted from the `safes` mapping.",
            "how_to_validate_state_update": "Verify that the `borrowedAmount` and `collateralAmount` fields of the specified Safe in the `safes` mapping are updated to reflect accrued debt and collateral based on `cumulativeDebtPerUnitCollateral` and `cumulativeCollateralPerUnitCollateral` respectively. After these potential updates, confirm that the entire entry for `safeId` in the `safes` mapping is deleted.",
            "has_conditional_updates": true,
            "summary_of_update": "The individual Safe's `borrowedAmount`, `totalBorrowedAmount`, and `collateralAmount` are first updated based on global cumulative values, and then the entire Safe entry is deleted from the `safes` mapping, effectively resetting all its fields to their default values (zero).",
            "conditions": [
              "The safe's internal debt and collateral snapshots differ from the current cumulative system snapshots."
            ]
          },
          {
            "state_variable_name": "totalCollateral",
            "type": "uint256",
            "what_does_it_track": "The aggregate sum of all collateral locked across all active Safes in the system.",
            "why_is_is_important": "It represents the overall collateral backing the stablecoin in the protocol.",
            "when_is_it_updated": "Potentially increased within `_updateSafe` (called by `closeSafe`) based on accrued collateral, and then decreased by the `collateralAmount` of the safe being closed.",
            "how_to_validate_state_update": "Check if `totalCollateral` decreases by the `collateralAmount` of the closed safe. Account for any prior increases due to the `_updateSafe` call.",
            "has_conditional_updates": true,
            "summary_of_update": "The `totalCollateral` is decreased by the `collateralAmount` held in the closed safe. Before this, it might have been increased due to accrued collateral from `_updateSafe`.",
            "conditions": [
              "The safe's internal debt and collateral snapshots differ from the current cumulative system snapshots (for increases).",
              "The safe has no outstanding borrowed amount (`safe.borrowedAmount == 0`)."
            ]
          },
          {
            "state_variable_name": "liquidationSnapshots[safeId]",
            "type": "mapping(uint256 => LiquidationSnapshot)",
            "what_does_it_track": "Snapshots of cumulative collateral and debt per unit collateral for a specific safe.",
            "why_is_is_important": "Used to correctly calculate the change in an individual safe's debt and collateral due to global system adjustments.",
            "when_is_it_updated": "Updated within the `_updateSafe` function, which is called at the beginning of `closeSafe`.",
            "how_to_validate_state_update": "Verify that `liquidationSnapshots[safeId].collateralPerCollateralSnapshot` is updated to `cumulativeCollateralPerUnitCollateral` and `liquidationSnapshots[safeId].debtPerCollateralSnapshot` is updated to `cumulativeDebtPerUnitCollateral`.",
            "has_conditional_updates": true,
            "summary_of_update": "The `collateralPerCollateralSnapshot` and `debtPerCollateralSnapshot` for the specific `safeId` are updated to their current cumulative system values.",
            "conditions": [
              "The safe's internal debt and collateral snapshots differ from the current cumulative system snapshots."
            ]
          },
          {
            "state_variable_name": "totalDebt",
            "type": "uint256",
            "what_does_it_track": "The aggregate sum of all borrowed stablecoin across all active Safes in the system.",
            "why_is_is_important": "It represents the total stablecoin supply generated by the protocol.",
            "when_is_it_updated": "Potentially increased within `_updateTotalDebt` (called by `_updateSafe`) if there is a debt increase.",
            "how_to_validate_state_update": "Check if `totalDebt` increases by the `debtIncrease` calculated in `_updateSafe`.",
            "has_conditional_updates": true,
            "summary_of_update": "The `totalDebt` is potentially increased by any accrued debt from the safe being closed, as calculated in `_updateSafe`.",
            "conditions": [
              "The safe's internal debt and collateral snapshots differ from the current cumulative system snapshots."
            ]
          },
          {
            "state_variable_name": "PROTOCOL_MODE",
            "type": "enum SBStructs.Mode",
            "what_does_it_track": "The current operational mode of the protocol.",
            "why_is_is_important": "It dictates certain protocol behaviors and limits related to debt and system operations.",
            "when_is_it_updated": "Updated within the `_updateTotalDebt` function, which is called by `_updateSafe` (called by `closeSafe`).",
            "how_to_validate_state_update": "Verify that `PROTOCOL_MODE` transitions from `BOOTSTRAP` to `NORMAL` if the total debt threshold is exceeded while in BOOTSTRAP mode.",
            "has_conditional_updates": true,
            "summary_of_update": "The protocol mode can transition from `BOOTSTRAP` to `NORMAL` if the total debt exceeds a defined threshold.",
            "conditions": [
              "The current total debt is greater than `BOOTSTRAP_MODE_DEBT_THRESHOLD` AND the `PROTOCOL_MODE` is currently `BOOTSTRAP`."
            ]
          },
          {
            "state_variable_name": "_tokenApprovals[tokenId]",
            "type": "mapping(uint256 => address)",
            "what_does_it_track": "The address approved to transfer a specific ERC721 token.",
            "why_is_is_important": "It manages transfer permissions for the ERC721 Safe token.",
            "when_is_it_updated": "Updated when `_approve(address(0), tokenId, address(0), false)` is called as part of `_burn` (within `_removeSafe`).",
            "how_to_validate_state_update": "Check that `getApproved(safeId)` returns `address(0)` for the burned token.",
            "has_conditional_updates": false,
            "summary_of_update": "The approval for the specific `safeId` is cleared by setting it to the zero address, as part of the ERC721 burn process.",
            "conditions": []
          },
          {
            "state_variable_name": "_balances[address]",
            "type": "mapping(address => uint256)",
            "what_does_it_track": "The number of ERC721 tokens (Safes) owned by an address.",
            "why_is_is_important": "It maintains the correct count of Safes held by each user.",
            "when_is_it_updated": "Decreased by 1 for the previous owner when `_burn` (within `_removeSafe`) is executed, specifically in the `_update` function.",
            "how_to_validate_state_update": "Check that `balanceOf(previousOwner)` decreases by 1 after the `safeId` is burned.",
            "has_conditional_updates": false,
            "summary_of_update": "The balance (number of Safes) of the previous owner of the `safeId` is decreased by 1.",
            "conditions": []
          },
          {
            "state_variable_name": "_owners[tokenId]",
            "type": "mapping(uint256 => address)",
            "what_does_it_track": "The owner of a specific ERC721 token.",
            "why_is_is_important": "It determines the ownership of each individual Safe token.",
            "when_is_it_updated": "Set to `address(0)` for the `safeId` when `_burn` (within `_removeSafe`) is executed, specifically in the `_update` function.",
            "how_to_validate_state_update": "Check that `ownerOf(safeId)` returns `address(0)` for the burned token.",
            "has_conditional_updates": false,
            "summary_of_update": "The owner of the `safeId` is set to the zero address, effectively burning the ERC721 token.",
            "conditions": []
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "StableBaseCDP",
        "code_snippet": "function closeSafe(uint256 safeId) external _onlyOwner(safeId) {\n        Safe storage safe = safes[safeId];\n        _updateSafe(safeId, safe);\n        require(\n            safe.borrowedAmount == 0,\n            \"Cannot close Safe with borrowed amount\"\n        );\n        uint256 collateralAmount = safe.collateralAmount;\n        totalCollateral -= collateralAmount; // Should we need this or not\n        // Remove the Safe from the mapping\n        _removeSafe(safeId);\n        emit SafeClosed(safeId, collateralAmount, totalCollateral, totalDebt);\n        (bool success, ) = msg.sender.call{value: collateralAmount}(\"\");\n        require(success, \"Transfer failed\");\n    }\nfunction _updateSafe(\n        uint _safeId,\n        Safe storage _safe\n    ) internal returns (Safe memory) {\n        // Update borrowed amount\n        LiquidationSnapshot storage liquidationSnapshot = liquidationSnapshots[\n            _safeId\n        ];\n        if (\n            liquidationSnapshot.collateralPerCollateralSnapshot !=\n            cumulativeCollateralPerUnitCollateral\n        ) {\n            uint debtIncrease = (_safe.collateralAmount *\n                (cumulativeDebtPerUnitCollateral -\n                    liquidationSnapshot.debtPerCollateralSnapshot)) / PRECISION;\n            _safe.borrowedAmount += debtIncrease;\n            _safe.totalBorrowedAmount += debtIncrease;\n            liquidationSnapshot\n                .debtPerCollateralSnapshot = cumulativeDebtPerUnitCollateral;\n\n            // Update deposited amount\n            uint collateralIncrease = (_safe.collateralAmount *\n                (cumulativeCollateralPerUnitCollateral -\n                    liquidationSnapshot.collateralPerCollateralSnapshot)) /\n                PRECISION;\n            _safe.collateralAmount += collateralIncrease;\n            liquidationSnapshot\n                .collateralPerCollateralSnapshot = cumulativeCollateralPerUnitCollateral;\n\n            totalCollateral += collateralIncrease;\n            _updateTotalDebt(totalDebt, debtIncrease, true);\n            emit SafeUpdated(\n                _safeId,\n                _safe.collateralAmount,\n                _safe.borrowedAmount,\n                collateralIncrease,\n                debtIncrease,\n                totalCollateral,\n                totalDebt\n            );\n        }\n\n        return _safe;\n    }\nfunction _updateTotalDebt(\n        uint256 currentDebt,\n        uint256 delta,\n        bool add\n    ) internal returns (uint256) {\n        uint256 debt = currentDebt;\n        if (add) {\n            debt = currentDebt + delta;\n        } else {\n            debt = currentDebt - delta;\n        }\n        // Bootstrap Mode to Normal mode only once, Normal mode to bootstrap mode is not possible\n        if (\n            debt > BOOTSTRAP_MODE_DEBT_THRESHOLD &&\n            PROTOCOL_MODE == SBStructs.Mode.BOOTSTRAP\n        ) {\n            PROTOCOL_MODE = SBStructs.Mode.NORMAL;\n        }\n        totalDebt = debt;\n        return debt;\n    }\nfunction _removeSafe(uint256 _safeId) internal {\n        //safes[_safeId].status = SafeStatus.CLOSED;\n        Safe memory safe = safes[_safeId];\n        delete safes[_safeId];\n        _burn(_safeId);\n        emit RemovedSafe(_safeId, safe);\n    }\nfunction _burn(uint256 tokenId) internal {\n        address previousOwner = _update(address(0), tokenId, address(0));\n        if (previousOwner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n    }\nfunction _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\n        address from = _ownerOf(tokenId);\n\n        // Perform (optional) operator check\n        if (auth != address(0)) {\n            _checkAuthorized(from, auth, tokenId);\n        }\n\n        // Execute the update\n        if (from != address(0)) {\n            // Clear approval. No need to re-authorize or emit the Approval event\n            _approve(address(0), tokenId, address(0), false);\n\n            unchecked {\n                _balances[from] -= 1;\n            }\n        }\n\n        if (to != address(0)) {\n            unchecked {\n                _balances[to] += 1;\n            }\n        }\n\n        _owners[tokenId] = to;\n\n        emit Transfer(from, to, tokenId);\n\n        return from;\n    }\nfunction _ownerOf(uint256 tokenId) internal view virtual returns (address) {\n        return _owners[tokenId];\n    }\nfunction _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\n        if (!_isAuthorized(owner, spender, tokenId)) {\n            if (owner == address(0)) {\n                revert ERC721NonexistentToken(tokenId);\n            } else {\n                revert ERC721InsufficientApproval(spender, tokenId);\n            }\n        }\n    }\nfunction _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\n        return\n            spender != address(0) &&\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\n    }\nfunction isApprovedForAll(address owner, address operator) external view returns (bool);\nfunction _getApproved(uint256 tokenId) internal view virtual returns (address) {\n        return _tokenApprovals[tokenId];\n    }\nfunction _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\n        // Avoid reading the owner unless necessary\n        if (emitEvent || auth != address(0)) {\n            address owner = _requireOwned(tokenId);\n\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\n                revert ERC721InvalidApprover(auth);\n            }\n\n            if (emitEvent) {\n                emit Approval(owner, to, tokenId);\n            }\n        }\n\n        _tokenApprovals[tokenId] = to;\n    }\nfunction _requireOwned(uint256 tokenId) internal view returns (address) {\n        address owner = _ownerOf(tokenId);\n        if (owner == address(0)) {\n            revert ERC721NonexistentToken(tokenId);\n        }\n        return owner;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "sbdToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "priceOracle",
              "contract_name": "MockPriceOracle"
            },
            {
              "state_variable_name": "stabilityPool",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "dfireTokenStaking",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "safesOrderedForLiquidation",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "safesOrderedForRedemption",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        },
        "constants": [
          {
            "name": "BASIS_POINTS_DIVISOR",
            "value": "10000",
            "type": "uint256"
          },
          {
            "name": "FIRST_TIME_BORROW_BASIS_POINTS_DISCOUNT_THRESHOLD",
            "value": "20",
            "type": "uint256"
          },
          {
            "name": "MINIMUM_DEBT",
            "value": "2000 * 10 ** 18",
            "type": "uint256"
          },
          {
            "name": "PRECISION",
            "value": "10 ** 18",
            "type": "uint256"
          },
          {
            "name": "SBR_FEE_REWARD",
            "value": "1000",
            "type": "uint256"
          },
          {
            "name": "REDEMPTION_LIQUIDATION_FEE",
            "value": "75",
            "type": "uint256"
          },
          {
            "name": "REDEMPTION_BASE_FEE",
            "value": "15",
            "type": "uint256"
          },
          {
            "name": "EXTRA_GAS_COMPENSATION",
            "value": "100000",
            "type": "uint256"
          },
          {
            "name": "BOOTSTRAP_MODE_DEBT_THRESHOLD",
            "value": "5000000 * 10 ** 18",
            "type": "uint256"
          }
        ]
      }
    ]
  }
}