{
  "action": {
    "name": "Add Collateral",
    "summary": "Adds collateral to a CDP.",
    "contract_name": "StableBaseCDP",
    "function_name": "addCollateral",
    "probability": 0.6
  },
  "action_detail": {
    "action_name": "Add Collateral",
    "contract_name": "StableBaseCDP",
    "function_name": "addCollateral",
    "pre_execution_parameter_generation_rules": [
      "Identify a valid `safeId` (an existing CDP) owned by the calling address. This can be done by querying the `balanceOf` function for the caller's address on `StableBaseCDP` and then iterating through owned token IDs to check `ownerOf(safeId)`. Ensure `StableBaseCDP.safes[safeId].collateralAmount` is greater than 0.",
      "Determine `amount`: A positive `uint256` value representing the amount of collateral (in wei) to add to the CDP. This `amount` must also be specified as the `msg.value` when sending the transaction.",
      "Determine `nearestSpotInLiquidationQueue`: A `uint256` value. This parameter is used as a hint for insertion into the `safesOrderedForLiquidation` linked list. It can be `0` to allow the `OrderedDoublyLinkedList` to find the correct insertion point automatically. Alternatively, a `safeId` of an existing node within the `safesOrderedForLiquidation` list can be provided to optimize the search for the insertion point. For most cases, `0` is sufficient."
    ],
    "on_execution_state_updates_made": [
      {
        "category": "CDP State",
        "state_update_descriptions": [
          "The `collateralAmount` for the specified `safeId` in the `safes` mapping will be increased by the `amount` of collateral provided in the transaction. It may also be increased by `collateralIncrease` if accrued collateral from the `_updateSafe` function is applied.",
          "The `borrowedAmount` for the specified `safeId` in the `safes` mapping may be increased by `debtIncrease` if accrued debt from the `_updateSafe` function is applied.",
          "The `totalBorrowedAmount` for the specified `safeId` in the `safes` mapping may be increased by `debtIncrease` if accrued debt from the `_updateSafe` function is applied."
        ]
      },
      {
        "category": "Global Contract State",
        "state_update_descriptions": [
          "The `totalCollateral` state variable will be increased by the `amount` of collateral provided in the transaction. It may also be increased by `collateralIncrease` if accrued collateral from the `_updateSafe` function is applied.",
          "The `totalDebt` state variable may be increased by `debtIncrease` if accrued debt from the `_updateSafe` function is applied via the `_updateTotalDebt` internal function.",
          "The `PROTOCOL_MODE` may transition from `BOOTSTRAP` to `NORMAL` if the `totalDebt` exceeds `BOOTSTRAP_MODE_DEBT_THRESHOLD` after the update to `totalDebt`."
        ]
      },
      {
        "category": "Liquidation Snapshots",
        "state_update_descriptions": [
          "The `collateralPerCollateralSnapshot` for the specified `safeId` in the `liquidationSnapshots` mapping will be updated to the current `cumulativeCollateralPerUnitCollateral` if the `_updateSafe` function is triggered.",
          "The `debtPerCollateralSnapshot` for the specified `safeId` in the `liquidationSnapshots` mapping will be updated to the current `cumulativeDebtPerUnitCollateral` if the `_updateSafe` function is triggered."
        ]
      },
      {
        "category": "Liquidation Queue State (OrderedDoublyLinkedList)",
        "state_update_descriptions": [
          "The node corresponding to the `safeId` in the `safesOrderedForLiquidation` linked list (an instance of `OrderedDoublyLinkedList`) will be updated or re-inserted based on its new collateralization ratio (`_newRatio`). This involves modifications to the `value` field of `safesOrderedForLiquidation.nodes[safeId]`, and potentially its `prev` and `next` pointers, as well as the `head` and `tail` pointers of the linked list."
        ]
      }
    ],
    "post_execution_contract_state_validation_rules": [
      {
        "category": "CDP State Validation",
        "rule_descriptions": [
          "Assert that `StableBaseCDP.safes[safeId].collateralAmount` is equal to its value before the transaction plus the `amount` provided and any `collateralIncrease` (if a `SafeUpdated` event was emitted).",
          "Assert that `StableBaseCDP.safes[safeId].borrowedAmount` is equal to its value before the transaction plus any `debtIncrease` (if a `SafeUpdated` event was emitted).",
          "Assert that `StableBaseCDP.safes[safeId].totalBorrowedAmount` is equal to its value before the transaction plus any `debtIncrease` (if a `SafeUpdated` event was emitted).",
          "Verify that the calculated new collateralization ratio for `safeId` (i.e., `(StableBaseCDP.safes[safeId].borrowedAmount * PRECISION) / StableBaseCDP.safes[safeId].collateralAmount`) matches the `newRatio` reported in the `AddedCollateral` and `LiquidationQueueUpdated` events."
        ]
      },
      {
        "category": "Global Contract State Validation",
        "rule_descriptions": [
          "Assert that `StableBaseCDP.totalCollateral` is equal to its value before the transaction plus the `amount` provided and any `collateralIncrease` (if a `SafeUpdated` event was emitted).",
          "Assert that `StableBaseCDP.totalDebt` is equal to its value before the transaction plus any `debtIncrease` (if a `SafeUpdated` event was emitted).",
          "If `StableBaseCDP.PROTOCOL_MODE` was `BOOTSTRAP` before the transaction and the new `totalDebt` exceeds `StableBaseCDP.BOOTSTRAP_MODE_DEBT_THRESHOLD`, assert that `StableBaseCDP.PROTOCOL_MODE` is now `NORMAL`. Otherwise, assert that `PROTOCOL_MODE` remains unchanged."
        ]
      },
      {
        "category": "Liquidation Snapshots Validation",
        "rule_descriptions": [
          "If a `SafeUpdated` event was emitted, assert that `StableBaseCDP.liquidationSnapshots[safeId].collateralPerCollateralSnapshot` is equal to the final `StableBaseCDP.cumulativeCollateralPerUnitCollateral` value.",
          "If a `SafeUpdated` event was emitted, assert that `StableBaseCDP.liquidationSnapshots[safeId].debtPerCollateralSnapshot` is equal to the final `StableBaseCDP.cumulativeDebtPerUnitCollateral` value."
        ]
      },
      {
        "category": "Liquidation Queue Validation",
        "rule_descriptions": [
          "Assert that the `value` of the node corresponding to `safeId` in the `safesOrderedForLiquidation` list (i.e., `safesOrderedForLiquidation.getNode(safeId).value`) equals the calculated `newRatio` for `safeId`.",
          "Assert that `safeId` is correctly positioned within the `safesOrderedForLiquidation` list according to its `newRatio` (i.e., verify `safesOrderedForLiquidation.nodes[safesOrderedForLiquidation.nodes[safeId].prev].value` is less than or equal to `newRatio` and `newRatio` is less than or equal to `safesOrderedForLiquidation.nodes[safesOrderedForLiquidation.nodes[safeId].next].value`, accounting for `head` and `tail` nodes)."
        ]
      },
      {
        "category": "Event Validation",
        "rule_descriptions": [
          "Verify that an `AddedCollateral` event was emitted with the correct `safeId`, `amount` (input), calculated `newRatio`, final `totalCollateral`, and final `totalDebt`.",
          "Verify that a `LiquidationQueueUpdated` event was emitted with the correct `safeId`, calculated `newRatio`, and `nextNode` (the `next` node ID from the `OrderedDoublyLinkedList`).",
          "Conditionally verify that a `SafeUpdated` event was emitted if the `_updateSafe` function was triggered (i.e., if `liquidationSnapshots[safeId].collateralPerCollateralSnapshot` was not equal to `cumulativeCollateralPerUnitCollateral` at the start of the transaction). If emitted, verify its parameters: `safeId`, updated `collateralAmount`, updated `debtAmount`, `collateralIncrease`, `debtIncrease`, final `totalCollateral`, and final `totalDebt`."
        ]
      }
    ]
  },
  "action_execution": {
    "action_name": "Add Collateral",
    "contract_name": "StableBaseCDP",
    "function_name": "addCollateral",
    "does_register_new_identifier": false,
    "new_identifiers": [],
    "all_state_updates": [
      {
        "contract_name": "StableBaseCDP",
        "state_updated": [
          {
            "state_variable_name": "safes[safeId].collateralAmount",
            "type": "mapping",
            "what_does_it_track": "The amount of collateral (ETH) deposited into a specific CDP (Safe).",
            "why_is_is_important": "Crucial for determining the collateralization ratio of a CDP and its solvency, directly impacting its health and liquidation status.",
            "when_is_it_updated": "Immediately upon successful execution of addCollateral. The accrued collateral part is updated when the safe's snapshot is out of sync with the protocol's cumulative collateral.",
            "how_to_validate_state_update": "Verify that the 'collateralAmount' of the safe has increased by the 'amount' provided by the user, and additionally by 'collateralIncrease' calculated based on the difference between cumulativeCollateralPerUnitCollateral and the safe's snapshot, if the snapshot was outdated.",
            "has_conditional_updates": true,
            "summary_of_update": "Increases the collateral held by the specified CDP (Safe) by the amount provided by the user. It may also increase due to accrued protocol-wide collateral if the safe's internal snapshot is outdated.",
            "conditions": [
              "The CDP (Safe) must exist (safe.collateralAmount > 0).",
              "The value sent with the transaction (msg.value) must equal the 'amount' parameter.",
              "The safe's internal liquidation snapshot (liquidationSnapshots[safeId].collateralPerCollateralSnapshot) is different from the protocol's cumulative collateral per unit collateral (cumulativeCollateralPerUnitCollateral)."
            ]
          },
          {
            "state_variable_name": "safes[safeId].borrowedAmount",
            "type": "mapping",
            "what_does_it_track": "The current outstanding debt (SBD) for a specific CDP.",
            "why_is_is_important": "Critical for calculating the collateralization ratio and determining liquidation eligibility, as it represents the amount of stablecoin the CDP owes.",
            "when_is_it_updated": "When the safe's internal liquidation snapshot is updated, typically due to a prior interaction with the safe or an update call like _updateSafe, and the debt snapshot is out of sync with the protocol's cumulative debt per unit collateral.",
            "how_to_validate_state_update": "Verify that the 'borrowedAmount' of the safe has increased by 'debtIncrease', which is calculated based on the difference between cumulativeDebtPerUnitCollateral and the safe's debt snapshot.",
            "has_conditional_updates": true,
            "summary_of_update": "Increases the current outstanding debt (SBD) for a specific CDP based on accumulated debt from protocol-wide debt accrual since its last update.",
            "conditions": [
              "The safe's internal liquidation snapshot (liquidationSnapshots[safeId].collateralPerCollateralSnapshot) is different from the protocol's cumulative collateral per unit collateral (cumulativeCollateralPerUnitCollateral)."
            ]
          },
          {
            "state_variable_name": "safes[safeId].totalBorrowedAmount",
            "type": "mapping",
            "what_does_it_track": "The total accumulated debt ever borrowed by a specific CDP over its lifetime.",
            "why_is_is_important": "Provides a historical record of borrowing activity for a CDP, useful for auditing or historical analysis, rather than immediate solvency calculations.",
            "when_is_it_updated": "When the safe's internal liquidation snapshot is updated and its debt snapshot is out of sync with the protocol's cumulative debt per unit collateral.",
            "how_to_validate_state_update": "Verify that the 'totalBorrowedAmount' of the safe has increased by 'debtIncrease'.",
            "has_conditional_updates": true,
            "summary_of_update": "Increases the total accumulated debt ever borrowed by a specific CDP (including repaid amounts), based on accumulated debt from protocol-wide debt accrual.",
            "conditions": [
              "The safe's internal liquidation snapshot (liquidationSnapshots[safeId].collateralPerCollateralSnapshot) is different from the protocol's cumulative collateral per unit collateral (cumulativeCollateralPerUnitCollateral)."
            ]
          },
          {
            "state_variable_name": "liquidationSnapshots[safeId].collateralPerCollateralSnapshot",
            "type": "mapping",
            "what_does_it_track": "A timestamped snapshot of the protocol's 'cumulativeCollateralPerUnitCollateral' at the time of the last update for a given safeId.",
            "why_is_is_important": "Used to calculate the amount of collateral accrued by the safe since its last interaction, reflecting changes in the protocol's overall collateral efficiency.",
            "when_is_it_updated": "When the safe's data is updated (e.g., via _updateSafe) and its existing collateral snapshot is not equal to the current cumulative collateral per unit collateral.",
            "how_to_validate_state_update": "Verify that the 'collateralPerCollateralSnapshot' for the safe has been updated to the current 'cumulativeCollateralPerUnitCollateral' value.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates the snapshot of the protocol's cumulative collateral per unit collateral for a specific safe, used for internal accounting of accrued collateral.",
            "conditions": [
              "The safe's internal liquidation snapshot (liquidationSnapshots[safeId].collateralPerCollateralSnapshot) is different from the protocol's cumulative collateral per unit collateral (cumulativeCollateralPerUnitCollateral)."
            ]
          },
          {
            "state_variable_name": "liquidationSnapshots[safeId].debtPerCollateralSnapshot",
            "type": "mapping",
            "what_does_it_track": "A timestamped snapshot of the protocol's 'cumulativeDebtPerUnitCollateral' at the time of the last update for a given safeId.",
            "why_is_is_important": "Used to calculate the amount of debt accrued by the safe since its last interaction, reflecting changes in the protocol's overall debt burden.",
            "when_is_it_updated": "When the safe's data is updated (e.g., via _updateSafe) and its collateral snapshot is not equal to the current cumulative collateral per unit collateral.",
            "how_to_validate_state_update": "Verify that the 'debtPerCollateralSnapshot' for the safe has been updated to the current 'cumulativeDebtPerUnitCollateral' value.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates the snapshot of the protocol's cumulative debt per unit collateral for a specific safe, used for internal accounting of accrued debt.",
            "conditions": [
              "The safe's internal liquidation snapshot (liquidationSnapshots[safeId].collateralPerCollateralSnapshot) is different from the protocol's cumulative collateral per unit collateral (cumulativeCollateralPerUnitCollateral)."
            ]
          },
          {
            "state_variable_name": "totalCollateral",
            "type": "uint256",
            "what_does_it_track": "The total amount of collateral held by the protocol across all active CDPs.",
            "why_is_is_important": "Represents the total value locked in the protocol and the total backing for all minted stablecoins, directly impacting the protocol's overall stability.",
            "when_is_it_updated": "When a user adds collateral to a safe via addCollateral, and potentially when a safe's internal accrued collateral is updated.",
            "how_to_validate_state_update": "Verify that 'totalCollateral' has increased by the 'amount' provided by the user, and additionally by 'collateralIncrease' if the safe's snapshot was outdated.",
            "has_conditional_updates": true,
            "summary_of_update": "Increases the total collateral held by the protocol across all active CDPs, reflecting both user-added collateral and accrued collateral from existing safes.",
            "conditions": [
              "The CDP (Safe) must exist (safe.collateralAmount > 0).",
              "The value sent with the transaction (msg.value) must equal the 'amount' parameter.",
              "The safe's internal liquidation snapshot (liquidationSnapshots[safeId].collateralPerCollateralSnapshot) is different from the protocol's cumulative collateral per unit collateral (cumulativeCollateralPerUnitCollateral) for the 'collateralIncrease' part."
            ]
          },
          {
            "state_variable_name": "totalDebt",
            "type": "uint256",
            "what_does_it_track": "The total amount of stablecoin debt outstanding across all active CDPs.",
            "why_is_is_important": "Represents the total stablecoin supply minted by the protocol, crucial for understanding market dynamics and protocol solvency.",
            "when_is_it_updated": "When a safe's internal accrued debt is updated (via _updateTotalDebt, called from _updateSafe).",
            "how_to_validate_state_update": "Verify that 'totalDebt' has increased by 'debtIncrease', which is the accrued debt calculated for the safe.",
            "has_conditional_updates": true,
            "summary_of_update": "Increases the total stablecoin debt outstanding across all active CDPs, reflecting accrued debt on an existing safe.",
            "conditions": [
              "The safe's internal liquidation snapshot (liquidationSnapshots[safeId].collateralPerCollateralSnapshot) is different from the protocol's cumulative collateral per unit collateral (cumulativeCollateralPerUnitCollateral)."
            ]
          },
          {
            "state_variable_name": "PROTOCOL_MODE",
            "type": "enum",
            "what_does_it_track": "The current operational mode of the protocol (e.g., BOOTSTRAP or NORMAL).",
            "why_is_is_important": "Influences fee structures, liquidation thresholds, and other protocol mechanics, potentially impacting user incentives and protocol stability.",
            "when_is_it_updated": "During the update of totalDebt within the _updateTotalDebt function, if the debt threshold is crossed and the protocol is in Bootstrap mode.",
            "how_to_validate_state_update": "Check if the conditions are met. If so, 'PROTOCOL_MODE' should change from BOOTSTRAP to NORMAL.",
            "has_conditional_updates": true,
            "summary_of_update": "Switches the protocol's operating mode from Bootstrap to Normal if the total debt surpasses a predefined threshold while the protocol is in Bootstrap mode.",
            "conditions": [
              "The updated totalDebt (local 'debt' variable) is greater than 'BOOTSTRAP_MODE_DEBT_THRESHOLD'.",
              "The 'PROTOCOL_MODE' is currently set to 'SBStructs.Mode.BOOTSTRAP'."
            ]
          }
        ]
      },
      {
        "contract_name": "OrderedDoublyLinkedList",
        "state_updated": [
          {
            "state_variable_name": "nodes[safeId]",
            "type": "mapping",
            "what_does_it_track": "Stores the nodes of the doubly linked list. Specifically, 'value' tracks the collateralization ratio ('_newRatio') of the 'safeId', and 'prev'/'next' track the previous and next safeIds in the ordered list.",
            "why_is_is_important": "Maintains an ordered list of safes by their collateralization ratio, crucial for efficient identification and execution of liquidations.",
            "when_is_it_updated": "Whenever 'upsert' is called on 'safesOrderedForLiquidation' to update a safe's position based on its new collateralization ratio.",
            "how_to_validate_state_update": "Verify that 'nodes[safeId].value' equals the new collateralization ratio ('_newRatio'). Additionally, check that 'nodes[safeId].prev' and 'nodes[safeId].next' correctly reflect its new sorted position in the list, and that the linked list integrity (e.g., 'nodes[nodes[safeId].prev].next == safeId') is maintained.",
            "has_conditional_updates": true,
            "summary_of_update": "Inserts or updates the node corresponding to 'safeId' with its new collateralization ratio and re-positions it within the ordered doubly linked list to maintain sorted order for liquidation.",
            "conditions": [
              "Always updated with the new value. The specific 'prev' and 'next' pointers are conditionally set based on whether the node for 'safeId' already exists, its new value relative to existing nodes, and its position within the ordered list."
            ]
          },
          {
            "state_variable_name": "head",
            "type": "uint256",
            "what_does_it_track": "The ID of the first node (lowest collateralization ratio) in the ordered doubly linked list.",
            "why_is_is_important": "Serves as the entry point to efficiently traverse the list from the lowest collateralization ratios, which are prioritized for liquidation.",
            "when_is_it_updated": "When a new node is inserted as the new head of the list, or when the existing head node is removed.",
            "how_to_validate_state_update": "Verify that 'head' points to the 'safeId' with the lowest collateralization ratio after the update.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates the identifier of the first node (safeId with the lowest collateralization ratio) in the ordered doubly linked list, if the insertion or update results in a new minimum ratio or if the previous head was removed.",
            "conditions": [
              "The list was previously empty, and the new node is the first to be inserted.",
              "A new node is inserted at the very beginning of the list (i.e., its value is the lowest so far or tied with the current head and inserted before it).",
              "The current head node is removed (if upsert calls _remove first)."
            ]
          },
          {
            "state_variable_name": "tail",
            "type": "uint256",
            "what_does_it_track": "The ID of the last node (highest collateralization ratio) in the ordered doubly linked list.",
            "why_is_is_important": "Allows for efficient traversal of the list from the highest collateralization ratios, if needed, though liquidation typically starts from the head.",
            "when_is_it_updated": "When a new node is inserted as the new tail of the list, or when the existing tail node is removed.",
            "how_to_validate_state_update": "Verify that 'tail' points to the 'safeId' with the highest collateralization ratio after the update.",
            "has_conditional_updates": true,
            "summary_of_update": "Updates the identifier of the last node (safeId with the highest collateralization ratio) in the ordered doubly linked list, if the insertion or update results in a new maximum ratio or if the previous tail was removed.",
            "conditions": [
              "The list was previously empty, and the new node is the first to be inserted.",
              "A new node is inserted at the very end of the list (i.e., its value is the highest so far or tied with the current tail and inserted after it).",
              "The current tail node is removed (if upsert calls _remove first)."
            ]
          }
        ]
      }
    ]
  },
  "action_context": {
    "contract_context": [
      {
        "contract_name": "StableBaseCDP",
        "code_snippet": "function addCollateral(\n        uint256 safeId,\n        uint256 amount,\n        uint256 nearestSpotInLiquidationQueue\n    ) external payable _onlyOwner(safeId) {\n        Safe storage safe = safes[safeId];\n        _updateSafe(safeId, safe);\n        require(safe.collateralAmount > 0, \"Safe does not exist\");\n        require(msg.value == amount, \"Invalid amount\");\n\n        safe.collateralAmount += amount;\n        totalCollateral += amount;\n\n        uint256 _newRatio = (safe.borrowedAmount * PRECISION) /\n            safe.collateralAmount;\n        IDoublyLinkedList.Node memory node = safesOrderedForLiquidation.upsert(\n            safeId,\n            _newRatio,\n            nearestSpotInLiquidationQueue\n        );\n        emit LiquidationQueueUpdated(safeId, _newRatio, node.next);\n\n        emit AddedCollateral(\n            safeId,\n            amount,\n            _newRatio,\n            totalCollateral,\n            totalDebt\n        );\n    }\nfunction _updateSafe(\n        uint _safeId,\n        Safe storage _safe\n    ) internal returns (Safe memory) {\n        // Update borrowed amount\n        LiquidationSnapshot storage liquidationSnapshot = liquidationSnapshots[\n            _safeId\n        ];\n        if (\n            liquidationSnapshot.collateralPerCollateralSnapshot !=\n            cumulativeCollateralPerUnitCollateral\n        ) {\n            uint debtIncrease = (_safe.collateralAmount *\n                (cumulativeDebtPerUnitCollateral -\n                    liquidationSnapshot.debtPerCollateralSnapshot)) / PRECISION;\n            _safe.borrowedAmount += debtIncrease;\n            _safe.totalBorrowedAmount += debtIncrease;\n            liquidationSnapshot\n                .debtPerCollateralSnapshot = cumulativeDebtPerUnitCollateral;\n\n            // Update deposited amount\n            uint collateralIncrease = (_safe.collateralAmount *\n                (cumulativeCollateralPerUnitCollateral -\n                    liquidationSnapshot.collateralPerCollateralSnapshot)) /\n                PRECISION;\n            _safe.collateralAmount += collateralIncrease;\n            liquidationSnapshot\n                .collateralPerCollateralSnapshot = cumulativeCollateralPerUnitCollateral;\n\n            totalCollateral += collateralIncrease;\n            _updateTotalDebt(totalDebt, debtIncrease, true);\n            emit SafeUpdated(\n                _safeId,\n                _safe.collateralAmount,\n                _safe.borrowedAmount,\n                collateralIncrease,\n                debtIncrease,\n                totalCollateral,\n                totalDebt\n            );\n        }\n\n        return _safe;\n    }\nfunction _updateTotalDebt(\n        uint256 currentDebt,\n        uint256 delta,\n        bool add\n    ) internal returns (uint256) {\n        uint256 debt = currentDebt;\n        if (add) {\n            debt = currentDebt + delta;\n        } else {\n            debt = currentDebt - delta;\n        }\n        // Bootstrap Mode to Normal mode only once, Normal mode to bootstrap mode is not possible\n        if (\n            debt > BOOTSTRAP_MODE_DEBT_THRESHOLD &&\n            PROTOCOL_MODE == SBStructs.Mode.BOOTSTRAP\n        ) {\n            PROTOCOL_MODE = SBStructs.Mode.NORMAL;\n        }\n        totalDebt = debt;\n        return debt;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "sbdToken",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "priceOracle",
              "contract_name": "MockPriceOracle"
            },
            {
              "state_variable_name": "stabilityPool",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "dfireTokenStaking",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "safesOrderedForLiquidation",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "safesOrderedForRedemption",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        },
        "constants": [
          {
            "name": "BASIS_POINTS_DIVISOR",
            "value": "10000",
            "type": "uint256"
          },
          {
            "name": "FIRST_TIME_BORROW_BASIS_POINTS_DISCOUNT_THRESHOLD",
            "value": "20",
            "type": "uint256"
          },
          {
            "name": "MINIMUM_DEBT",
            "value": "2000 * 10 ** 18",
            "type": "uint256"
          },
          {
            "name": "PRECISION",
            "value": "10 ** 18",
            "type": "uint256"
          },
          {
            "name": "SBR_FEE_REWARD",
            "value": "1000",
            "type": "uint256"
          },
          {
            "name": "REDEMPTION_LIQUIDATION_FEE",
            "value": "75",
            "type": "uint256"
          },
          {
            "name": "REDEMPTION_BASE_FEE",
            "value": "15",
            "type": "uint256"
          },
          {
            "name": "EXTRA_GAS_COMPENSATION",
            "value": "100000",
            "type": "uint256"
          },
          {
            "name": "BOOTSTRAP_MODE_DEBT_THRESHOLD",
            "value": "5000000 * 10 ** 18",
            "type": "uint256"
          }
        ]
      },
      {
        "contract_name": "OrderedDoublyLinkedList",
        "code_snippet": "function upsert(\n        uint256 id,\n        uint256 value,\n        uint256 _nearestSpot\n    ) external override onlyOwner returns (Node memory) {\n        if (\n            nodes[id].value == 0 && nodes[id].next == 0 && nodes[id].prev == 0\n        ) {\n            return _insert(id, value, _nearestSpot);\n        } else {\n            return _update(id, value, _nearestSpot);\n        }\n    }\nfunction _insert(\n        uint256 id,\n        uint256 value,\n        uint256 _nearestSpot\n    ) internal returns (Node memory) {\n        Node memory node = Node(value, 0, 0);\n        return _insert(id, node, _nearestSpot);\n    }\nfunction _insert(\n        uint256 id,\n        Node memory node,\n        uint256 _nearestSpot\n    ) internal returns (Node memory) {\n        uint256 _head = head;\n        if (_head == 0) {\n            head = id;\n            tail = id;\n        } else {\n            uint256 _tail = tail;\n            if (_nearestSpot == 0) {\n                _nearestSpot = _head;\n            }\n\n            if (\n                nodes[_nearestSpot].prev == 0 &&\n                nodes[_nearestSpot].next == 0 &&\n                nodes[_nearestSpot].value == 0\n            ) {\n                _nearestSpot = head;\n                //nearest = nodes[_nearestSpot];\n            }\n            // nearest: 7, node:10: 7, 7, 9, 11, 11\n            // nearest: 9, node: 7: 7, 7, 9, 11, 11\n            // nearest: 9, node: 12: 7, 7, 9, 11, 11\n\n            while (\n                _nearestSpot != _tail && nodes[_nearestSpot].value < node.value\n            ) {\n                _nearestSpot = nodes[_nearestSpot].next;\n                //nearest = nodes[_nearestSpot];\n            }\n            // nearest: 11, node:10: 7, 7, 9, 11, 11\n            // nearest: 9, node:7: 7, 7, 9, 11, 11\n            // nearest: 11(last), node: 12: 7, 7, 9, 11, 11\n\n            while (\n                _nearestSpot != _head && nodes[_nearestSpot].value >= node.value\n            ) {\n                _nearestSpot = nodes[_nearestSpot].prev;\n                //nearest = nodes[_nearestSpot];\n            }\n            // nearest: 7, node: 7: 7, 7, 9, 11, 11\n\n            if (_nearestSpot == _head) {\n                if (nodes[_nearestSpot].value >= node.value) {\n                    node.next = _nearestSpot;\n                    nodes[_nearestSpot].prev = id;\n                    head = id;\n                } else {\n                    node.prev = _nearestSpot;\n                    node.next = nodes[_nearestSpot].next;\n                    nodes[_nearestSpot].next = id;\n                    if (node.next != 0) {\n                        nodes[node.next].prev = id;\n                    } else {\n                        tail = id;\n                    }\n                }\n            } else if (_nearestSpot == _tail) {\n                // nearest: 11(last), node: 12: 7, 7, 9, 11, 11\n                if (nodes[_nearestSpot].value < node.value) {\n                    node.prev = _nearestSpot;\n                    nodes[_nearestSpot].next = id;\n                    tail = id;\n                } else {\n                    node.prev = nodes[_nearestSpot].prev;\n                    node.next = _nearestSpot;\n                    nodes[_nearestSpot].prev = id;\n                    if (node.prev != 0) {\n                        nodes[node.prev].next = id;\n                    } else {\n                        head = id;\n                    }\n                }\n            } else {\n                // nearest: 9, node: 10: 7, 7, 9, 11, 11\n                node.prev = _nearestSpot;\n                node.next = nodes[_nearestSpot].next;\n                nodes[_nearestSpot].next = id;\n                nodes[node.next].prev = id;\n            }\n        }\n        nodes[id] = node;\n        return node;\n    }\nfunction _update(\n        uint256 id,\n        uint256 value,\n        uint256 _nearestSpot\n    ) internal returns (Node memory) {\n        Node memory node = _remove(id);\n        node.value = value;\n        node.prev = 0;\n        node.next = 0;\n        return _insert(id, node, _nearestSpot);\n    }\nfunction _remove(uint256 id) internal returns (Node memory) {\n        Node memory node = nodes[id];\n        if (node.prev == 0) {\n            head = node.next;\n            nodes[node.next].prev = 0;\n        } else {\n            nodes[node.prev].next = node.next;\n            nodes[node.next].prev = node.prev;\n        }\n        if (node.next == 0) {\n            tail = node.prev;\n            nodes[node.prev].next = 0;\n        } else {\n            nodes[node.next].prev = node.prev;\n            nodes[node.prev].next = node.next;\n        }\n        delete nodes[id];\n        return node;\n    }",
        "references": {
          "references": [
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "DFIDToken"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "DFIREToken"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_rewardToken",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stableBaseContract",
              "contract_name": "DFIREStaking"
            },
            {
              "state_variable_name": "_stakingToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbrToken",
              "contract_name": "StabilityPool"
            },
            {
              "state_variable_name": "_sbdToken",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_priceOracle",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stabilityPool",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_dfireTokenStaking",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForLiquidation",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_safesOrderedForRedemption",
              "contract_name": "StableBaseCDP"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            },
            {
              "state_variable_name": "_stableBaseCDP",
              "contract_name": "OrderedDoublyLinkedList"
            }
          ]
        },
        "constants": []
      }
    ]
  }
}