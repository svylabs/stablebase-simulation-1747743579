"{\"action\":{\"name\":\"Open Safe\",\"summary\":\"Opens a new CDP (Safe).\",\"contract_name\":\"StableBaseCDP\",\"function_name\":\"openSafe\",\"probability\":0.7},\"action_detail\":{\"action_name\":\"Open Safe\",\"contract_name\":\"StableBaseCDP\",\"function_name\":\"openSafe\",\"pre_execution_parameter_generation_rules\":[\"Generate a `_safeId` greater than 0 that does not already exist in the `safes` mapping.\",\"Generate an `_amount` greater than 0. This amount will be sent as msg.value, so it should be a reasonable collateral amount.\",\"Ensure that `msg.value` is equal to `_amount` when calling the function.\"],\"on_execution_state_updates_made\":[{\"category\":\"Safe Data\",\"state_update_descriptions\":[\"The `safes` mapping is updated with a new `Safe` struct for the given `_safeId`. The `Safe` struct's `collateralAmount` is set to `_amount`, `borrowedAmount` is set to 0, `weight` is set to 0, `totalBorrowedAmount` is set to 0, and `feePaid` is set to 0.\",\"The `liquidationSnapshots` mapping is updated with a new `LiquidationSnapshot` struct for the given `_safeId`. The `debtPerCollateralSnapshot` is set to the current value of `cumulativeDebtPerUnitCollateral`, and `collateralPerCollateralSnapshot` is set to the current value of `cumulativeCollateralPerUnitCollateral`.\",\"The `totalCollateral` state variable is increased by `_amount`.\"]},{\"category\":\"NFT Ownership\",\"state_update_descriptions\":[\"An ERC721 NFT representing the safe is minted to the `msg.sender` with the `_safeId` as the token ID. The `_owners` mapping in the ERC721 contract is updated to reflect the new owner of the NFT.\"]},{\"category\":\"Events\",\"state_update_descriptions\":[\"A `Transfer` event is emitted as a result of minting the NFT, indicating the transfer of the NFT representing the Safe from address(0) to the `msg.sender`.\"]}],\"post_execution_contract_state_validation_rules\":[{\"category\":\"Safe Data and Balances\",\"rule_descriptions\":[\"Verify that `safes[_safeId].collateralAmount` is equal to `_amount`.\",\"Verify that `safes[_safeId].borrowedAmount` is equal to 0.\",\"Verify that `safes[_safeId].weight` is equal to 0.\",\"Verify that `safes[_safeId].totalBorrowedAmount` is equal to 0.\",\"Verify that `safes[_safeId].feePaid` is equal to 0.\",\"Verify that `liquidationSnapshots[_safeId].debtPerCollateralSnapshot` is equal to the initial `cumulativeDebtPerUnitCollateral`.\",\"Verify that `liquidationSnapshots[_safeId].collateralPerCollateralSnapshot` is equal to the initial `cumulativeCollateralPerUnitCollateral`.\",\"Verify that `totalCollateral` has increased by `_amount`.\",\"Verify that `balanceOf(msg.sender)` is equal to 1, reflecting the newly minted NFT.\"]},{\"category\":\"NFT Ownership\",\"rule_descriptions\":[\"Verify that `ownerOf(_safeId)` is equal to `msg.sender`.\"]},{\"category\":\"Events\",\"rule_descriptions\":[\"Verify that an `OpenSafe` event is emitted with the correct parameters (`_safeId`, `msg.sender`, `_amount`, `totalCollateral`, `totalDebt`).\",\"Verify that a `Transfer` event is emitted with the correct parameters (from address is 0, to address is `msg.sender`, token ID is `_safeId`) as a result of minting the NFT.\"]}]},\"action_execution\":{\"action_name\":\"Open Safe\",\"contract_name\":\"StableBaseCDP\",\"function_name\":\"openSafe\",\"does_register_new_identifier\":true,\"new_identifiers\":[{\"name\":\"_safeId\",\"type\":\"random_id\",\"has_max_identifier_limit_per_address\":false,\"max_identifier_limit_per_address\":0,\"description\":\"A unique identifier for the newly opened safe.\"}],\"all_state_updates\":[{\"contract_name\":\"StableBaseCDP\",\"state_updated\":[{\"state_variable_name\":\"safes[_safeId].collateralAmount\",\"type\":\"uint256\",\"summary_of_update\":\"Sets the collateral amount of the safe to the provided amount.\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"safes[_safeId].borrowedAmount\",\"type\":\"uint256\",\"summary_of_update\":\"Sets the borrowed amount of the safe to 0.\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"safes[_safeId].weight\",\"type\":\"uint256\",\"summary_of_update\":\"Sets the weight of the safe to 0.\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"safes[_safeId].totalBorrowedAmount\",\"type\":\"uint256\",\"summary_of_update\":\"Sets the total borrowed amount of the safe to 0.\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"safes[_safeId].feePaid\",\"type\":\"uint256\",\"summary_of_update\":\"Sets the fee paid for the safe to 0.\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"liquidationSnapshots[_safeId]\",\"type\":\"LiquidationSnapshot\",\"summary_of_update\":\"Sets a snapshot of cumulative debt and collateral per collateral.\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"totalCollateral\",\"type\":\"uint256\",\"summary_of_update\":\"Increases the total collateral by the provided amount.\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"_owners[tokenId]\",\"type\":\"address\",\"summary_of_update\":\"Sets the owner of the newly minted safe (NFT).\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"_balances[to]\",\"type\":\"uint256\",\"summary_of_update\":\"Increases the balance of the recipient of the NFT.\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"_owners[_safeId]\",\"type\":\"address\",\"summary_of_update\":\"Assigns the owner of the safe (NFT).\",\"has_conditional_updates\":false,\"conditions\":[]},{\"state_variable_name\":\"_balances[msg.sender]\",\"type\":\"uint256\",\"summary_of_update\":\"Updates the NFT balance for the safe owner.\",\"has_conditional_updates\":false,\"conditions\":[]}]}]}}"