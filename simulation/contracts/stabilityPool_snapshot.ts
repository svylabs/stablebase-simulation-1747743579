// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/ilumina';
import { StabilityPoolSnapshot, UserInfo, StakeResetSnapshot, SBRRewardSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of StabilityPool state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor objects to fetch user-specific data
 * @returns Promise returning the interface StabilityPoolSnapshot
 */
export async function takestabilityPoolContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<StabilityPoolSnapshot> {
  try {
    // Fetch contract state
    const collateralLoss = BigInt(await contract.collateralLoss());
    const minimumScalingFactor = BigInt(await contract.minimumScalingFactor());
    const precision = BigInt(await contract.precision());
    const rewardLoss = BigInt(await contract.rewardLoss());
    const rewardSenderActive = await contract.rewardSenderActive();
    const sbrDistributionRate = BigInt(await contract.sbrDistributionRate());
    const sbrRewardDistributionEndTime = BigInt(await contract.sbrRewardDistributionEndTime());
    const sbrRewardDistributionStatus = await contract.sbrRewardDistributionStatus();
    const sbrRewardLoss = BigInt(await contract.sbrRewardLoss());
    const stakeResetCount = BigInt(await contract.stakeResetCount());
    const stakeScalingFactor = BigInt(await contract.stakeScalingFactor());
    const totalCollateralPerToken = BigInt(await contract.totalCollateralPerToken());
    const totalRewardPerToken = BigInt(await contract.totalRewardPerToken());
    const totalSbrRewardPerToken = BigInt(await contract.totalSbrRewardPerToken());
    const totalStakedRaw = BigInt(await contract.totalStakedRaw());
    const lastSBRRewardDistributedTime = BigInt(await contract.lastSBRRewardDistributedTime());

    // Fetch user-specific data
    const users: { [accountAddress: string]: UserInfo } = {};
    const stakeResetSnapshots: { [stakeResetCount: string]: StakeResetSnapshot } = {};
    const sbrRewardSnapshots: { [accountAddress: string]: SBRRewardSnapshot } = {};

    for (const actor of actors) {
      const accountAddress = actor.accountAddress;

      // Fetch user info
      try {
        const userInfo = await contract.users(accountAddress);
        users[accountAddress] = {
          stake: BigInt(userInfo.stake),
          rewardSnapshot: BigInt(userInfo.rewardSnapshot),
          collateralSnapshot: BigInt(userInfo.collateralSnapshot),
          cumulativeProductScalingFactor: BigInt(userInfo.cumulativeProductScalingFactor),
          stakeResetCount: BigInt(userInfo.stakeResetCount),
        };
      } catch (error) {
        console.error(`Error fetching user info for ${accountAddress}: ${error}`);
        // Initialize with default values if fetching fails.
        users[accountAddress] = {
          stake: BigInt(0),
          rewardSnapshot: BigInt(0),
          collateralSnapshot: BigInt(0),
          cumulativeProductScalingFactor: BigInt(0),
          stakeResetCount: BigInt(0),
        };
      }

            // Fetch SBR Reward Snapshot
            try {
                const sbrRewardSnapshot = await contract.sbrRewardSnapshots(accountAddress);
                sbrRewardSnapshots[accountAddress] = {
                    rewardSnapshot: BigInt(sbrRewardSnapshot.rewardSnapshot),
                    status: sbrRewardSnapshot.status
                };
            } catch (error) {
                console.error(`Error fetching SBR reward snapshot for ${accountAddress}: ${error}`);
                sbrRewardSnapshots[accountAddress] = {
                    rewardSnapshot: BigInt(0),
                    status: 0,
                };
            }
    }

    // Fetch stake reset snapshots
    try {
        const stakeResetSnapshotResult = await contract.stakeResetSnapshots(stakeResetCount);
        stakeResetSnapshots[stakeResetCount.toString()] = {
            scalingFactor: BigInt(stakeResetSnapshotResult.scalingFactor),
            totalRewardPerToken: BigInt(stakeResetSnapshotResult.totalRewardPerToken),
            totalCollateralPerToken: BigInt(stakeResetSnapshotResult.totalCollateralPerToken),
            totalSBRRewardPerToken: BigInt(stakeResetSnapshotResult.totalSBRRewardPerToken)
        };
    } catch (error) {
        console.error(`Error fetching stake reset snapshot for ${stakeResetCount.toString()}: ${error}`);
        // Initialize with default values if fetching fails.
        stakeResetSnapshots[stakeResetCount.toString()] = {
            scalingFactor: BigInt(0),
            totalRewardPerToken: BigInt(0),
            totalCollateralPerToken: BigInt(0),
            totalSBRRewardPerToken: BigInt(0)
        };
    }

    // Construct and return the snapshot
    const snapshot: StabilityPoolSnapshot = {
      collateralLoss,
      minimumScalingFactor,
      precision,
      rewardLoss,
      rewardSenderActive,
      sbrDistributionRate,
      sbrRewardDistributionEndTime,
      sbrRewardDistributionStatus,
      sbrRewardLoss,
      stakeResetCount,
      stakeScalingFactor,
      totalCollateralPerToken,
      totalRewardPerToken,
      totalSbrRewardPerToken,
      totalStakedRaw,
      users,
      stakeResetSnapshots,
      sbrRewardSnapshots,
      lastSBRRewardDistributedTime
    };

    return snapshot;
  } catch (error) {
    console.error('Error taking StabilityPool snapshot:', error);
    throw error; // Re-throw the error to be handled upstream
  }
}
