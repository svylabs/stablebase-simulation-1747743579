// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/ilumina';
import { StabilityPoolStateSnapshot, StabilityPoolUserSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of StabilityPool contract state.
 * @param contract - ethers.Contract instance of the StabilityPool.
 * @returns Promise resolving to StabilityPoolStateSnapshot.
 */
export async function takestabilityPoolContractSnapshot(contract: ethers.Contract): Promise<StabilityPoolStateSnapshot> {
  try {
    const [collateralLoss, lastSBRRewardDistributedTime, minimumScalingFactor, precision, rewardLoss, rewardSenderActive, sbrDistributionRate, sbrRewardDistributionEndTime, sbrRewardDistributionStatus, sbrRewardLoss, stakeResetCount, stakeScalingFactor, totalCollateralPerToken, totalRewardPerToken, totalSbrRewardPerToken, totalStakedRaw] = await Promise.all([
      contract.collateralLoss(),
      contract.lastSBRRewardDistributedTime(),
      contract.minimumScalingFactor(),
      contract.precision(),
      contract.rewardLoss(),
      contract.rewardSenderActive(),
      contract.sbrDistributionRate(),
      contract.sbrRewardDistributionEndTime(),
      contract.sbrRewardDistributionStatus(),
      contract.sbrRewardLoss(),
      contract.stakeResetCount(),
      contract.stakeScalingFactor(),
      contract.totalCollateralPerToken(),
      contract.totalRewardPerToken(),
      contract.totalSbrRewardPerToken(),
      contract.totalStakedRaw(),
    ]);

    const stakeResetSnapshots: any[] = [];
    for (let i = 0; i < Number(stakeResetCount); i++) {
      const snapshot = await contract.stakeResetSnapshots(i);
      stakeResetSnapshots.push({
        scalingFactor: BigInt(snapshot.scalingFactor),
        totalRewardPerToken: BigInt(snapshot.totalRewardPerToken),
        totalCollateralPerToken: BigInt(snapshot.totalCollateralPerToken),
        totalSBRRewardPerToken: BigInt(snapshot.totalSBRRewardPerToken),
      });
    }

    const snapshot: StabilityPoolStateSnapshot = {
      collateralLoss: BigInt(collateralLoss),
      lastSBRRewardDistributedTime: BigInt(lastSBRRewardDistributedTime),
      minimumScalingFactor: BigInt(minimumScalingFactor),
      precision: BigInt(precision),
      rewardLoss: BigInt(rewardLoss),
      rewardSenderActive,
      sbrDistributionRate: BigInt(sbrDistributionRate),
      sbrRewardDistributionEndTime: BigInt(sbrRewardDistributionEndTime),
      sbrRewardDistributionStatus,
      sbrRewardLoss: BigInt(sbrRewardLoss),
      stakeResetCount: BigInt(stakeResetCount),
      stakeScalingFactor: BigInt(stakeScalingFactor),
      totalCollateralPerToken: BigInt(totalCollateralPerToken),
      totalRewardPerToken: BigInt(totalRewardPerToken),
      totalSbrRewardPerToken: BigInt(totalSbrRewardPerToken),
      totalStakedRaw: BigInt(totalStakedRaw),
      stakeResetSnapshots,
    };
    return snapshot;
  } catch (error) {
    console.error('Error taking StabilityPool contract snapshot:', error);
    throw error;
  }
}

/**
 * Takes a snapshot of StabilityPool user-specific data.
 * @param contract - ethers.Contract instance of the StabilityPool.
 * @param accountAddress - The address of the user.
 * @returns Promise resolving to StabilityPoolUserSnapshot.
 */
export async function takestabilityPoolUserSnapshot(contract: ethers.Contract, accountAddress: string): Promise<StabilityPoolUserSnapshot> {
  try {
    const [userInfo, pendingReward, pendingCollateral, sbrRewardSnapshot] = await Promise.all([
      contract.getUser(accountAddress),
      contract.userPendingReward(accountAddress),
      contract.userPendingCollateral(accountAddress),
      contract.sbrRewardSnapshots(accountAddress)
    ]);

    const snapshot: StabilityPoolUserSnapshot = {
      userInfo: {
        stake: BigInt(userInfo.stake),
        rewardSnapshot: BigInt(userInfo.rewardSnapshot),
        collateralSnapshot: BigInt(userInfo.collateralSnapshot),
        cumulativeProductScalingFactor: BigInt(userInfo.cumulativeProductScalingFactor),
        stakeResetCount: BigInt(userInfo.stakeResetCount)
      },
      pendingReward: BigInt(pendingReward),
      pendingCollateral: BigInt(pendingCollateral),
      sbrRewardSnapshot: {
        rewardSnapshot: BigInt(sbrRewardSnapshot.rewardSnapshot),
        status: sbrRewardSnapshot.status
      }
    };
    return snapshot;
  } catch (error) {
    console.error('Error taking StabilityPool user snapshot:', error);
    throw error;
  }
}