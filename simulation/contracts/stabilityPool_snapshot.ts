// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/ilumina';
import { StabilityPoolSnapshot, UserInfo, SBRRewardSnapshot, StakeResetSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of StabilityPool state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances to fetch user-specific data
 * @returns Promise returning the interface StabilityPoolSnapshot
 */
export async function takestabilityPoolContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<StabilityPoolSnapshot> {
  try {\n    const basisPointsDivisor = await contract.BASIS_POINTS_DIVISOR();
    const collateralLoss = await contract.collateralLoss();
    const lastSBRRewardDistributedTime = await contract.lastSBRRewardDistributedTime();
    const minimumScalingFactor = await contract.minimumScalingFactor();
    const precision = await contract.precision();
    const rewardLoss = await contract.rewardLoss();
    const rewardSenderActive = await contract.rewardSenderActive();
    const sbrDistributionRate = await contract.sbrDistributionRate();
    const sbrRewardDistributionEndTime = await contract.sbrRewardDistributionEndTime();
    const sbrRewardDistributionStatus = await contract.sbrRewardDistributionStatus();
    const sbrRewardLoss = await contract.sbrRewardLoss();
    const stakeResetCount = await contract.stakeResetCount();
    const stakeScalingFactor = await contract.stakeScalingFactor();
    const totalCollateralPerToken = await contract.totalCollateralPerToken();
    const totalRewardPerToken = await contract.totalRewardPerToken();
    const totalSbrRewardPerToken = await contract.totalSbrRewardPerToken();
    const totalStakedRaw = await contract.totalStakedRaw();

    // Fetch user-specific data
    const users: { [accountAddress: string]: UserInfo } = {};
    const sbrRewardSnapshots: { [accountAddress: string]: SBRRewardSnapshot } = {};
    const stakeResetSnapshots: { [stakeResetCount: number]: StakeResetSnapshot } = {};
    const userPendingCollateral: { [accountAddress: string]: bigint } = {};
    const userPendingReward: { [accountAddress: string]: bigint } = {};
    const userPendingRewardAndCollateral: { [accountAddress: string]: [bigint, bigint, bigint] } = {};

    for (const actor of actors) {
      const accountAddress = actor.getIdentifier('accountAddress') as string;
      if (accountAddress) {
        try {
          users[accountAddress] = await contract.getUser(accountAddress);
          sbrRewardSnapshots[accountAddress] = await contract.sbrRewardSnapshots(accountAddress);
          userPendingCollateral[accountAddress] = await contract.userPendingCollateral(accountAddress);
          userPendingReward[accountAddress] = await contract.userPendingReward(accountAddress);
          userPendingRewardAndCollateral[accountAddress] = await contract.userPendingRewardAndCollateral(accountAddress);
        } catch (error) {
          console.error(`Error fetching user data for ${accountAddress}:`, error);
          // Handle error, e.g., set default values or skip the user
        }
      }
    }

     // Populate StakeResetSnapshots
     for (let i = 0; i <= Number(stakeResetCount); i++) {
      try {
        stakeResetSnapshots[i] = await contract.stakeResetSnapshots(i);
      } catch (error) {
        console.error(`Error fetching stake reset snapshot for index ${i}:`, error);
      }
    }

    const snapshot: StabilityPoolSnapshot = {
      basisPointsDivisor: BigInt(basisPointsDivisor.toString()),
      collateralLoss: BigInt(collateralLoss.toString()),
      lastSBRRewardDistributedTime: BigInt(lastSBRRewardDistributedTime.toString()),
      minimumScalingFactor: BigInt(minimumScalingFactor.toString()),
      precision: BigInt(precision.toString()),
      rewardLoss: BigInt(rewardLoss.toString()),
      rewardSenderActive,
      sbrDistributionRate: BigInt(sbrDistributionRate.toString()),
      sbrRewardDistributionEndTime: BigInt(sbrRewardDistributionEndTime.toString()),
      sbrRewardDistributionStatus,
      sbrRewardLoss: BigInt(sbrRewardLoss.toString()),
      stakeResetCount: BigInt(stakeResetCount.toString()),
      stakeScalingFactor: BigInt(stakeScalingFactor.toString()),
      totalCollateralPerToken: BigInt(totalCollateralPerToken.toString()),
      totalRewardPerToken: BigInt(totalRewardPerToken.toString()),
      totalSbrRewardPerToken: BigInt(totalSbrRewardPerToken.toString()),
      totalStakedRaw: BigInt(totalStakedRaw.toString()),
      users,
      sbrRewardSnapshots,
      stakeResetSnapshots,
      userPendingCollateral,
      userPendingReward,
      userPendingRewardAndCollateral,
    };

    return snapshot;
  } catch (error) {
    console.error('Error taking StabilityPool snapshot:', error);
    throw error; // Re-throw the error to be handled upstream
  }
}