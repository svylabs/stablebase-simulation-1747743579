// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { StabilityPoolSnapshot, UserInfo, StakeResetSnapshot, SBRRewardSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of StabilityPool state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor objects
 * @returns Promise returning the interface StabilityPoolSnapshot
 */
export async function takestabilityPoolContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<StabilityPoolSnapshot> {
  try {
    const collateralLoss = BigInt(await contract.collateralLoss());
    const minimumScalingFactor = BigInt(await contract.minimumScalingFactor());
    const precision = BigInt(await contract.precision());
    const rewardLoss = BigInt(await contract.rewardLoss());
    const rewardSenderActive = await contract.rewardSenderActive();
    const sbrDistributionRate = BigInt(await contract.sbrDistributionRate());
    const sbrRewardDistributionEndTime = BigInt(await contract.sbrRewardDistributionEndTime());
    const sbrRewardDistributionStatus = await contract.sbrRewardDistributionStatus();
    const sbrRewardLoss = BigInt(await contract.sbrRewardLoss());
    const stakeResetCount = BigInt(await contract.stakeResetCount());
    const stakeScalingFactor = BigInt(await contract.stakeScalingFactor());
    const totalCollateralPerToken = BigInt(await contract.totalCollateralPerToken());
    const totalRewardPerToken = BigInt(await contract.totalRewardPerToken());
    const totalSbrRewardPerToken = BigInt(await contract.totalSbrRewardPerToken());
    const totalStakedRaw = BigInt(await contract.totalStakedRaw());
    const lastSBRRewardDistributedTime = BigInt(await contract.lastSBRRewardDistributedTime());

    // Fetch user data
    const users: { [accountAddress: string]: UserInfo } = {};
    for (const actor of actors) {
      try {
        const accountAddress = actor.accountAddress;
        const userData = await contract.users(accountAddress);
        users[accountAddress] = {
          stake: BigInt(userData.stake),
          rewardSnapshot: BigInt(userData.rewardSnapshot),
          collateralSnapshot: BigInt(userData.collateralSnapshot),
          cumulativeProductScalingFactor: BigInt(userData.cumulativeProductScalingFactor),
          stakeResetCount: BigInt(userData.stakeResetCount),
        };
      } catch (userError: any) {
        console.error(`Error fetching user data for ${actor.accountAddress}: ${userError.message}`);
      }
    }

    // Fetch stake reset snapshots
    const stakeResetSnapshots: { [stakeResetCount: string]: StakeResetSnapshot } = {};
      stakeResetSnapshots[stakeResetCount.toString()] = await contract.stakeResetSnapshots(stakeResetCount)
      .then((snapshot: any) => ({
        scalingFactor: BigInt(snapshot.scalingFactor),
        totalRewardPerToken: BigInt(snapshot.totalRewardPerToken),
        totalCollateralPerToken: BigInt(snapshot.totalCollateralPerToken),
        totalSBRRewardPerToken: BigInt(snapshot.totalSBRRewardPerToken),
      }))
      .catch((error: any) => {
        console.error(`Error fetching stake reset snapshot for ${stakeResetCount.toString()}: ${error.message}`);
        return {
            scalingFactor: BigInt(0),
            totalRewardPerToken: BigInt(0),
            totalCollateralPerToken: BigInt(0),
            totalSBRRewardPerToken: BigInt(0),
        };
      });


    // Fetch SBR reward snapshots
    const sbrRewardSnapshots: { [accountAddress: string]: SBRRewardSnapshot } = {};
      for (const actor of actors) {
        try {
          const accountAddress = actor.accountAddress;
          const sbrRewardSnapshot = await contract.sbrRewardSnapshots(accountAddress);
          sbrRewardSnapshots[accountAddress] = {
            rewardSnapshot: BigInt(sbrRewardSnapshot.rewardSnapshot),
            status: sbrRewardSnapshot.status,
          };
        } catch (sbrError: any) {
          console.error(`Error fetching SBR reward snapshot for ${actor.accountAddress}: ${sbrError.message}`);
        }
      }

    return {
      collateralLoss,
      minimumScalingFactor,
      precision,
      rewardLoss,
      rewardSenderActive,
      sbrDistributionRate,
      sbrRewardDistributionEndTime,
      sbrRewardDistributionStatus,
      sbrRewardLoss,
      stakeResetCount,
      stakeScalingFactor,
      totalCollateralPerToken,
      totalRewardPerToken,
      totalSbrRewardPerToken,
      totalStakedRaw,
      users,
      stakeResetSnapshots,
      sbrRewardSnapshots,
      lastSBRRewardDistributedTime,
    };
  } catch (error: any) {
    console.error(`Error taking StabilityPool snapshot: ${error.message}`);
    throw error;
  }
}