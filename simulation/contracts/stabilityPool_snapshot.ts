// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/ilumina';
import { StabilityPoolSnapshot, UserInfo, StakeResetSnapshot, SBRRewardSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of StabilityPool state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances representing users
 * @returns Promise returning the StabilityPoolSnapshot interface
 */
export async function takestabilityPoolContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<StabilityPoolSnapshot> {
  try {
    const collateralLoss = BigInt(await contract.collateralLoss());
    const minimumScalingFactor = BigInt(await contract.minimumScalingFactor());
    const precision = BigInt(await contract.precision());
    const rewardLoss = BigInt(await contract.rewardLoss());
    const rewardSenderActive = await contract.rewardSenderActive();
    const sbrDistributionRate = BigInt(await contract.sbrDistributionRate());
    const sbrRewardDistributionEndTime = BigInt(await contract.sbrRewardDistributionEndTime());
    const sbrRewardDistributionStatus = await contract.sbrRewardDistributionStatus();
    const sbrRewardLoss = BigInt(await contract.sbrRewardLoss());
    const stakeResetCount = BigInt(await contract.stakeResetCount());
    const stakeScalingFactor = BigInt(await contract.stakeScalingFactor());
    const totalCollateralPerToken = BigInt(await contract.totalCollateralPerToken());
    const totalRewardPerToken = BigInt(await contract.totalRewardPerToken());
    const totalSbrRewardPerToken = BigInt(await contract.totalSbrRewardPerToken());
    const totalStakedRaw = BigInt(await contract.totalStakedRaw());
    const lastSBRRewardDistributedTime = BigInt(await contract.lastSBRRewardDistributedTime());

    // Fetch user-specific data
    const users: { [accountAddress: string]: UserInfo } = {};
    for (const actor of actors) {
      try {
        const accountAddress = actor.accountAddress;
        const userInfo = await contract.users(accountAddress);
        users[accountAddress] = {
          stake: BigInt(userInfo.stake),
          rewardSnapshot: BigInt(userInfo.rewardSnapshot),
          collateralSnapshot: BigInt(userInfo.collateralSnapshot),
          cumulativeProductScalingFactor: BigInt(userInfo.cumulativeProductScalingFactor),
          stakeResetCount: BigInt(userInfo.stakeResetCount),
        };
      } catch (userError: any) {
        console.error(`Error fetching user info for ${actor.accountAddress}:`, userError);
        throw new Error(`Failed to fetch user info for ${actor.accountAddress}: ${userError.message}`);
      }
    }

    // Fetch stake reset snapshots
    const stakeResetSnapshots: { [stakeResetCount: string]: StakeResetSnapshot } = {};
    for (let i = 0; i <= Number(stakeResetCount); i++) {
      try {
        const stakeResetSnapshot = await contract.stakeResetSnapshots(i);
        stakeResetSnapshots[i.toString()] = {
          scalingFactor: BigInt(stakeResetSnapshot.scalingFactor),
          totalRewardPerToken: BigInt(stakeResetSnapshot.totalRewardPerToken),
          totalCollateralPerToken: BigInt(stakeResetSnapshot.totalCollateralPerToken),
          totalSBRRewardPerToken: BigInt(stakeResetSnapshot.totalSBRRewardPerToken),
        };
      } catch (stakeResetError: any) {
        console.error(`Error fetching stake reset snapshot for index ${i}:`, stakeResetError);
        throw new Error(`Failed to fetch stake reset snapshot for index ${i}: ${stakeResetError.message}`);
      }
    }

    // Fetch SBR reward snapshots
    const sbrRewardSnapshots: { [accountAddress: string]: SBRRewardSnapshot } = {};
    for (const actor of actors) {
      try {
        const accountAddress = actor.accountAddress;
        const sbrRewardSnapshot = await contract.sbrRewardSnapshots(accountAddress);
        sbrRewardSnapshots[accountAddress] = {
          rewardSnapshot: BigInt(sbrRewardSnapshot.rewardSnapshot),
          status: sbrRewardSnapshot.status,
        };
      } catch (sbrRewardError: any) {
        console.error(`Error fetching SBR reward snapshot for ${actor.accountAddress}:`, sbrRewardError);
        throw new Error(`Failed to fetch SBR reward snapshot for ${actor.accountAddress}: ${sbrRewardError.message}`);
      }
    }

    return {
      collateralLoss,
      minimumScalingFactor,
      precision,
      rewardLoss,
      rewardSenderActive,
      sbrDistributionRate,
      sbrRewardDistributionEndTime,
      sbrRewardDistributionStatus,
      sbrRewardLoss,
      stakeResetCount,
      stakeScalingFactor,
      totalCollateralPerToken,
      totalRewardPerToken,
      totalSbrRewardPerToken,
      totalStakedRaw,
      users,
      stakeResetSnapshots,
      sbrRewardSnapshots,
      lastSBRRewardDistributedTime,
    };
  } catch (error: any) {
    console.error('Error taking StabilityPool snapshot:', error);
    throw new Error(`Failed to take StabilityPool snapshot: ${error.message}`);
  }
}
