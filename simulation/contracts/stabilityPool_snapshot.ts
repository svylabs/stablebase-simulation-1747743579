// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { StabilityPoolSnapshot, UserInfo, StakeResetSnapshot, SBRRewardSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of StabilityPool state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances, each containing an accountAddress.
 * @returns Promise returning the StabilityPoolSnapshot interface
 */
export async function takestabilityPoolContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<StabilityPoolSnapshot> {
  try {
    const collateralLoss = BigInt(await contract.collateralLoss());
    const minimumScalingFactor = BigInt(await contract.minimumScalingFactor());
    const precision = BigInt(await contract.precision());
    const rewardLoss = BigInt(await contract.rewardLoss());
    const rewardSenderActive = await contract.rewardSenderActive();
    const sbrDistributionRate = BigInt(await contract.sbrDistributionRate());
    const sbrRewardDistributionEndTime = BigInt(await contract.sbrRewardDistributionEndTime());
    const sbrRewardDistributionStatus = await contract.sbrRewardDistributionStatus();
    const sbrRewardLoss = BigInt(await contract.sbrRewardLoss());
    const stakeResetCount = BigInt(await contract.stakeResetCount());
    const stakeScalingFactor = BigInt(await contract.stakeScalingFactor());
    const totalCollateralPerToken = BigInt(await contract.totalCollateralPerToken());
    const totalRewardPerToken = BigInt(await contract.totalRewardPerToken());
    const totalSbrRewardPerToken = BigInt(await contract.totalSbrRewardPerToken());
    const totalStakedRaw = BigInt(await contract.totalStakedRaw());
    const lastSBRRewardDistributedTime = BigInt(await contract.lastSBRRewardDistributedTime());

    // Fetch user-specific data
    const users: { [accountAddress: string]: UserInfo } = {};
    const stakeResetSnapshots: { [stakeResetCount: string]: StakeResetSnapshot } = {};
    const sbrRewardSnapshots: { [accountAddress: string]: SBRRewardSnapshot } = {};

    for (const actor of actors) {
      const accountAddress = actor.accountAddress;
      if (accountAddress) {
        const userInfo = await contract.users(accountAddress);

        users[accountAddress] = {
          stake: BigInt(userInfo.stake),
          rewardSnapshot: BigInt(userInfo.rewardSnapshot),
          collateralSnapshot: BigInt(userInfo.collateralSnapshot),
          cumulativeProductScalingFactor: BigInt(userInfo.cumulativeProductScalingFactor),
          stakeResetCount: BigInt(userInfo.stakeResetCount),
        };

        const sbrRewardSnapshot = await contract.sbrRewardSnapshots(accountAddress);

        sbrRewardSnapshots[accountAddress] = {
            rewardSnapshot: BigInt(sbrRewardSnapshot.rewardSnapshot),
            status: sbrRewardSnapshot.status,
        };

        // Fetch stake reset snapshots for the user's stakeResetCount
        const userStakeResetCount = userInfo.stakeResetCount.toString();
        if (!stakeResetSnapshots[userStakeResetCount]) {
          const stakeResetSnapshot = await contract.stakeResetSnapshots(userInfo.stakeResetCount);
          stakeResetSnapshots[userStakeResetCount] = {
            scalingFactor: BigInt(stakeResetSnapshot.scalingFactor),
            totalRewardPerToken: BigInt(stakeResetSnapshot.totalRewardPerToken),
            totalCollateralPerToken: BigInt(stakeResetSnapshot.totalCollateralPerToken),
            totalSBRRewardPerToken: BigInt(stakeResetSnapshot.totalSBRRewardPerToken),
          };
        }
      }
    }

    return {
      collateralLoss,
      minimumScalingFactor,
      precision,
      rewardLoss,
      rewardSenderActive,
      sbrDistributionRate,
      sbrRewardDistributionEndTime,
      sbrRewardDistributionStatus,
      sbrRewardLoss,
      stakeResetCount,
      stakeScalingFactor,
      totalCollateralPerToken,
      totalRewardPerToken,
      totalSbrRewardPerToken,
      totalStakedRaw,
      users,
      stakeResetSnapshots,
      sbrRewardSnapshots,
      lastSBRRewardDistributedTime
    };
  } catch (error) {
    console.error('Error taking StabilityPool snapshot:', error);
    throw error; // Re-throw the error to be handled upstream
  }
}
