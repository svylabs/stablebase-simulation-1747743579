// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/ilumina';
import { StabilityPoolStateSnapshot, StabilityPoolUserSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of StabilityPool contract state.
 * @param contract - ethers.Contract instance of the StabilityPool.
 * @returns Promise resolving to a StabilityPoolStateSnapshot object.
 */
export async function takestabilityPoolContractSnapshot(contract: ethers.Contract): Promise<StabilityPoolStateSnapshot> {
  try {
    const collateralLoss = (await contract.collateralLoss()).toBigInt();
    const lastSBRRewardDistributedTime = (await contract.lastSBRRewardDistributedTime()).toBigInt();
    const minimumScalingFactor = (await contract.minimumScalingFactor()).toBigInt();
    const precision = (await contract.precision()).toBigInt();
    const rewardLoss = (await contract.rewardLoss()).toBigInt();
    const rewardSenderActive = await contract.rewardSenderActive();
    const sbrDistributionRate = (await contract.sbrDistributionRate()).toBigInt();
    const sbrRewardDistributionEndTime = (await contract.sbrRewardDistributionEndTime()).toBigInt();
    const sbrRewardDistributionStatus = await contract.sbrRewardDistributionStatus();
    const sbrRewardLoss = (await contract.sbrRewardLoss()).toBigInt();
    const stakeResetCount = (await contract.stakeResetCount()).toBigInt();
    const stakeScalingFactor = (await contract.stakeScalingFactor()).toBigInt();
    const totalCollateralPerToken = (await contract.totalCollateralPerToken()).toBigInt();
    const totalRewardPerToken = (await contract.totalRewardPerToken()).toBigInt();
    const totalSbrRewardPerToken = (await contract.totalSbrRewardPerToken()).toBigInt();
    const totalStakedRaw = (await contract.totalStakedRaw()).toBigInt();

    // Fetch stake reset snapshots
    const stakeResetSnapshots: any[] = [];
    for (let i = 0; i < Number(stakeResetCount); i++) {
      const snapshot = await contract.stakeResetSnapshots(i);
      stakeResetSnapshots.push({
        scalingFactor: snapshot.scalingFactor.toBigInt(),
        totalRewardPerToken: snapshot.totalRewardPerToken.toBigInt(),
        totalCollateralPerToken: snapshot.totalCollateralPerToken.toBigInt(),
        totalSBRRewardPerToken: snapshot.totalSBRRewardPerToken.toBigInt(),
      });
    }

    return {
      collateralLoss,
      lastSBRRewardDistributedTime,
      minimumScalingFactor,
      precision,
      rewardLoss,
      rewardSenderActive,
      sbrDistributionRate,
      sbrRewardDistributionEndTime,
      sbrRewardDistributionStatus,
      sbrRewardLoss,
      stakeResetCount,
      stakeScalingFactor,
      totalCollateralPerToken,
      totalRewardPerToken,
      totalSbrRewardPerToken,
      totalStakedRaw,
      stakeResetSnapshots,
    };
  } catch (error) {
    console.error('Error taking StabilityPool contract snapshot:', error);
    throw error;
  }
}

/**
 * Takes a snapshot of StabilityPool user-specific data.
 * @param contract - ethers.Contract instance of the StabilityPool.
 * @param accountAddress - The address of the user.
 * @returns Promise resolving to a StabilityPoolUserSnapshot object.
 */
export async function takestabilityPoolUserSnapshot(contract: ethers.Contract, accountAddress: string): Promise<StabilityPoolUserSnapshot> {
  try {
    const userInfo = await contract.getUser(accountAddress);
    const pendingReward = (await contract.userPendingReward(accountAddress)).toBigInt();
    const pendingCollateral = (await contract.userPendingCollateral(accountAddress)).toBigInt();
    const sbrRewardSnapshot = await contract.sbrRewardSnapshots(accountAddress);

    return {
      userInfo: {
        stake: userInfo.stake.toBigInt(),
        rewardSnapshot: userInfo.rewardSnapshot.toBigInt(),
        collateralSnapshot: userInfo.collateralSnapshot.toBigInt(),
        cumulativeProductScalingFactor: userInfo.cumulativeProductScalingFactor.toBigInt(),
        stakeResetCount: userInfo.stakeResetCount.toBigInt(),
      },
      pendingReward,
      pendingCollateral,
      sbrRewardSnapshot: {
        rewardSnapshot: sbrRewardSnapshot.rewardSnapshot.toBigInt(),
        status: sbrRewardSnapshot.status,
      },
    };
  } catch (error) {
    console.error('Error taking StabilityPool user snapshot:', error);
    throw error;
  }
}
