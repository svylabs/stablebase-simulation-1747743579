// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { OrderedDoublyLinkedListSnapshot, Node } from './snapshot_interfaces';

/**
 * Takes a snapshot of OrderedDoublyLinkedList state
 * @param contract - ethers.Contract instance
 * @param actors - Array of actors to fetch user specific data
 * @returns Promise returning the interface OrderedDoublyLinkedListSnapshot
 */
export async function takesafesOrderedForLiquidationContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<OrderedDoublyLinkedListSnapshot> {
  try {
    const head = await contract.getHead() as bigint;
    const tail = await contract.getTail() as bigint;
    const owner = await contract.owner() as string;

    const nodes: { [key: bigint]: Node } = {};

    // Fetch node data for each Safe ID provided by the actors
    for (const actor of actors) {
      const safeIds = actor.getIdentifiers()['Safe ID'];

      if (safeIds) {
        const safeIdArray = Array.isArray(safeIds) ? safeIds : [safeIds];

        for (const safeId of safeIdArray) {
          if (safeId) {
            try {
              const safeIdBigInt = BigInt(safeId);
              const nodeData = await contract.getNode(safeIdBigInt);
              const node: Node = {
                value: BigInt(nodeData.value),
                prev: BigInt(nodeData.prev),
                next: BigInt(nodeData.next),
              };
              nodes[safeIdBigInt] = node;
            } catch (error: any) {
              console.error(`Error fetching node data for Safe ID ${safeId} from contract ${contract.address}:`, error);
              // Handle the error appropriately, e.g., by logging it or throwing a custom error.
              // Consider whether to continue or break the loop based on the severity of the error.
            }
          }
        }
      }
    }

    return {
      head: head,
      tail: tail,
      nodes: nodes,
      owner: owner,
    };
  } catch (error: any) {
    console.error(`Error taking OrderedDoublyLinkedList contract snapshot for contract ${contract.address}:`, error);
    throw new Error(`Failed to snapshot OrderedDoublyLinkedList contract state: ${error.message}`);
  }
}
