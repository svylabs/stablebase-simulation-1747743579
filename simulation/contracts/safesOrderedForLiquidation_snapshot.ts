// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { OrderedDoublyLinkedListSnapshot, Node } from './snapshot_interfaces';
import { Actor } from '@svylabs/ilumina';

/**
 * Takes a snapshot of the OrderedDoublyLinkedList contract state.
 *
 * @param contract - ethers.Contract instance of the OrderedDoublyLinkedList contract.
 * @param actors - An array of Actor objects, each containing identifiers for specific safes.
 * @returns A promise that resolves to an OrderedDoublyLinkedListSnapshot object representing the contract state.
 * @throws An error if any part of the snapshot process fails, including contract calls or data processing.
 */
export async function takesafesOrderedForLiquidationContractSnapshot(
  contract: ethers.Contract,
  actors: Actor[]
): Promise<OrderedDoublyLinkedListSnapshot> {
  try {
    // Fetch the head and tail of the linked list.
    const head: bigint = BigInt(await contract.head());
    const tail: bigint = BigInt(await contract.tail());

    // Fetch the contract owner.
    const owner: string = await contract.owner();

    // Initialize an object to store node data.
    const nodes: { [key: string]: Node } = {};

    // Iterate over each actor to fetch node data based on the _safeId identifier.
    for (const actor of actors) {
      const identifiers = actor.getIdentifiers();

      // Check if the actor has a _safeId identifier.
      if (identifiers._safeId) {
        // Ensure _safeId is an array; if not, convert it to an array.
        const safeIds: any[] = Array.isArray(identifiers._safeId) ? identifiers._safeId : [identifiers._safeId];

        // Iterate over each safeId in the array.
        for (const safeId of safeIds) {
          try {
            // Convert safeId to a BigInt.
            const safeIdBigInt: bigint = BigInt(safeId);

            // Fetch node data from the contract.
            const nodeData: any = await contract.nodes(safeIdBigInt);

            // Create a Node object from the fetched data.
            const node: Node = {
              value: BigInt(nodeData.value),
              prev: BigInt(nodeData.prev),
              next: BigInt(nodeData.next),
            };

            // Store the node data in the nodes object, using safeId as the key.
            nodes[safeId] = node;
          } catch (nodeError: any) {
            // Handle errors when fetching node data for a specific safeId.
            console.error(`Error fetching node data for safeId ${safeId}:`, nodeError);

            // Create a default empty node.
            nodes[safeId] = { value: BigInt(0), prev: BigInt(0), next: BigInt(0) };
          }
        }
      }
    }

    // Return the snapshot object.
    return {
      head,
      tail,
      nodes,
      owner,
    };
  } catch (error: any) {
    // Handle any errors that occur during the snapshot process.
    console.error('Error in takesafesOrderedForLiquidationContractSnapshot:', error);
    throw new Error(`Failed to snapshot OrderedDoublyLinkedList state: ${error.message}`);
  }
}
