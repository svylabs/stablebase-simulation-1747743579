// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { DFIDTokenSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of DFIDToken state, including balances and allowances for provided actors.
 * @param contract - ethers.Contract instance for the DFIDToken contract.
 * @param actors - Array of Actor instances. Each actor should have an 'accountAddress' identifier.
 *                 If actors are provided, the function fetches accountBalance for each actor and sets allowance to zero.
 * @returns Promise resolving to a DFIDTokenSnapshot object containing contract state and actor-specific data.
 */
export async function takedfidTokenContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<DFIDTokenSnapshot> {
  let accountBalance: bigint = BigInt(0);
  let allowanceAmount: bigint = BigInt(0);

  try {
    // Fetch common contract state
    const decimalPlaces = await contract.decimals();
    const tokenName = await contract.name();
    const tokenSymbol = await contract.symbol();
    const totalBurnedAmount = await contract.totalBurned();
    const totalTokenSupply = await contract.totalSupply();

    if (actors && actors.length > 0) {
      for (const actor of actors) {
        const identifiers = actor.getIdentifiers();

        if (identifiers && identifiers['accountAddress']) {
          const accountAddress = identifiers['accountAddress'];

          try {
            const balance = await contract.balanceOf(accountAddress);
            accountBalance += balance;
          } catch (error: any) {
            console.error(`Error fetching account balance for address ${accountAddress}:`, error);
            throw new Error(`Failed to fetch account balance for address ${accountAddress}: ${error.message}`);
          }

          // Setting allowance to zero since we don't have enough info about owner and spender.
          allowanceAmount = BigInt(0);
        }
      }
    } 

    const snapshot: DFIDTokenSnapshot = {
      allowanceAmount: allowanceAmount,
      accountBalance: accountBalance,
      decimalPlaces: decimalPlaces,
      tokenName: tokenName,
      tokenSymbol: tokenSymbol,
      totalBurnedAmount: BigInt(totalBurnedAmount),
      totalTokenSupply: BigInt(totalTokenSupply),
    };

    return snapshot;
  } catch (error: any) {
    console.error('Error taking DFIDToken contract snapshot:', error);
    throw new Error(`Failed to take DFIDToken contract snapshot: ${error.message}`);
  }
}