// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { DFIDTokenSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of DFIDToken state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances
 * @returns Promise returning the interface DFIDTokenSnapshot
 */
export async function takedfidTokenContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<DFIDTokenSnapshot> {
  try {
    const Name = await contract.name();
    const Symbol = await contract.symbol();
    const Decimals = await contract.decimals();
    const TotalSupply = await contract.totalSupply();
    const TotalBurned = await contract.totalBurned();
    const Owner = await contract.owner();

    const Balance: { [accountAddress: string]: bigint } = {};
    const Allowance: { [accountAddress: string]: { [accountAddress: string]: bigint } } = {};

    for (const actor of actors) {
      const accountAddress = actor.accountAddress;

      try {
        Balance[accountAddress] = BigInt(await contract.balanceOf(accountAddress));
      } catch (error: any) {
        console.error(`Error fetching Balance for account ${accountAddress}:`, error);
        Balance[accountAddress] = BigInt(0);
      }

      Allowance[accountAddress] = {};

      for (const otherActor of actors) {
        const spenderAddress = otherActor.accountAddress;
        if (accountAddress !== undefined && spenderAddress !== undefined) {
            try {
              Allowance[accountAddress][spenderAddress] = BigInt(await contract.allowance(accountAddress, spenderAddress));
            } catch (error: any) {
              console.error(`Error fetching Allowance for owner ${accountAddress} and spender ${spenderAddress}:`, error);
              Allowance[accountAddress][spenderAddress] = BigInt(0);
            }
        }
        
      }
    }

    return {
      Name,
      Symbol,
      Decimals,
      TotalSupply: BigInt(TotalSupply),
      TotalBurned: BigInt(TotalBurned),
      Owner,
      Balance,
      Allowance,
    };
  } catch (error: any) {
    console.error('Error taking DFIDToken snapshot:', error);
    throw new Error(`Failed to take DFIDToken snapshot: ${error.message}`);
  }
}