// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/ilumina';
import { DFIDTokenState } from './snapshot_interfaces';

/**
 * Takes a snapshot of DFIDToken state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances to fetch user-specific data.
 * @returns Promise returning the interface DFIDTokenState
 */
export async function takedfidTokenContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<DFIDTokenState> {
  try {
    const name = await contract.name();
    const symbol = await contract.symbol();
    const decimals = await contract.decimals();
    const totalSupply = await contract.totalSupply();
    const totalBurned = await contract.totalBurned();
    const owner = await contract.owner();

    const allowances: { [accountAddress: string]: { [accountAddress: string]: bigint } } = {};
    const balances: { [accountAddress: string]: bigint } = {};

    for (const actor of actors) {
      const accountAddress = actor.accountAddress;

      // Fetch Balances
      try {
        const balance = await contract.balanceOf(accountAddress);
        balances[accountAddress] = balance;
      } catch (err: any) {
        console.error(`Error fetching balance for ${accountAddress}:`, err);
        balances[accountAddress] = BigInt(0);
      }

      // Fetch Allowances
      allowances[accountAddress] = {};
      for (const otherActor of actors) {
        const spenderAddress = otherActor.accountAddress;
        try {
          const allowance = await contract.allowance(accountAddress, spenderAddress);
          allowances[accountAddress][spenderAddress] = allowance;
        } catch (err: any) {
          console.error(`Error fetching allowance for ${accountAddress} -> ${spenderAddress}:`, err);
          allowances[accountAddress][spenderAddress] = BigInt(0);
        }
      }
    }

    return {
      name,
      symbol,
      decimals,
      totalSupply,
      totalBurned,
      allowances,
      balances,
      owner,
    };
  } catch (error: any) {
    console.error('Error taking DFIDToken contract snapshot:', error);
    throw new Error(`Failed to take DFIDToken snapshot: ${error.message}`);
  }
}