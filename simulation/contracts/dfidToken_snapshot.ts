// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/ilumina';
import { DFIDTokenSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of DFIDToken state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances
 * @returns Promise returning the interface DFIDTokenSnapshot
 */
export async function takedfidTokenContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<DFIDTokenSnapshot> {
  try {
    const allowances: { [owner: string]: { [spender: string]: bigint } } = {};
    const balances: { [account: string]: bigint } = {};

    const decimals = Number(await contract.decimals());
    const name = await contract.name();
    const owner = await contract.owner();
    const symbol = await contract.symbol();
    const totalBurned = BigInt(await contract.totalBurned());
    const totalSupply = BigInt(await contract.totalSupply());

    for (const actor of actors) {
      const accountAddress = actor.getIdentifiers().accountAddress as string;

      balances[accountAddress] = BigInt(await contract.balanceOf(accountAddress));

      allowances[accountAddress] = {};
            // Fetch allowance only against the owner themselves
      allowances[accountAddress][accountAddress] = BigInt(await contract.allowance(accountAddress, accountAddress));
    }

    return {
      allowances,
      balances,
      decimals,
      name,
      owner,
      symbol,
      totalBurned,
      totalSupply,
    };
  } catch (error) {
    console.error('Error taking DFIDToken snapshot:', error);
    throw error;
  }
}