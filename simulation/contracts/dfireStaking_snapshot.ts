// Generated by SnapshotCodeGenerator

import { ethers } from "ethers";import { Actor } from "@svylabs/ilumina";import { IStake, IDFIREStakingSnapshot } from "./snapshot_interfaces.ts";/** * Takes a snapshot of DFIREStaking contract state. * It captures contract-wide parameters and specific user-related data * for the first available actor's account address if any actors are provided. * If no account address is available, user-specific fields will be set to default values. * @param contract - The ethers.Contract instance connected to the DFIREStaking contract. * @param actors - An array of Actor objects, used to fetch user-specific data. * @returns A Promise that resolves to an IDFIREStakingSnapshot object. */export async function takedfireStakingContractSnapshot(  contract: ethers.Contract,  actors: Actor[]): Promise<IDFIREStakingSnapshot> {  const snapshot: Partial<IDFIREStakingSnapshot> = {};  let accountAddress: string | undefined;  if (actors && actors.length > 0) {    const identifiers = actors[0].getIdentifiers();    if (identifiers && identifiers.accountAddress) {      accountAddress = identifiers.accountAddress as string;    }  }  try {    snapshot.rewardSenderActive = await contract.rewardSenderActive();  } catch (error) {    console.error("Error fetching rewardSenderActive:", error);    snapshot.rewardSenderActive = false;  }  try {    const totalCollateralPerToken = await contract.totalCollateralPerToken();    snapshot.totalCollateralPerToken = BigInt(totalCollateralPerToken);  } catch (error) {    console.error("Error fetching totalCollateralPerToken:", error);    snapshot.totalCollateralPerToken = BigInt(0);  }  try {    const totalRewardPerToken = await contract.totalRewardPerToken();    snapshot.totalRewardPerToken = BigInt(totalRewardPerToken);  } catch (error) {    console.error("Error fetching totalRewardPerToken:", error);    snapshot.totalRewardPerToken = BigInt(0);  }  try {    const totalStake = await contract.totalStake();    snapshot.totalStake = BigInt(totalStake);  } catch (error) {    console.error("Error fetching totalStake:", error);    snapshot.totalStake = BigInt(0);  }  if (accountAddress) {    try {      const userStakeResult = await contract.getStake(accountAddress);      snapshot.userStake = {        stake: BigInt(userStakeResult.stake),        rewardSnapshot: BigInt(userStakeResult.rewardSnapshot),        collateralSnapshot: BigInt(userStakeResult.collateralSnapshot)      };    } catch (error) {      console.error(`Error fetching userStake for ${accountAddress}:`, error);      snapshot.userStake = {        stake: BigInt(0),        rewardSnapshot: BigInt(0),        collateralSnapshot: BigInt(0)      };    }    try {      const userPendingRewardsResult = await contract.userPendingReward(accountAddress);      snapshot.userPendingRewards = {        pendingRewardAmount: BigInt(userPendingRewardsResult.pendingRewardAmount),        pendingCollateralReward: BigInt(userPendingRewardsResult.pendingCollateralReward)      };    } catch (error) {      console.error(`Error fetching userPendingRewards for ${accountAddress}:`, error);      snapshot.userPendingRewards = {        pendingRewardAmount: BigInt(0),        pendingCollateralReward: BigInt(0)      };    }  } else {    console.warn("No accountAddress provided in actors for user-specific data. Setting userStake and userPendingRewards to default values.");    snapshot.userStake = {      stake: BigInt(0),      rewardSnapshot: BigInt(0),      collateralSnapshot: BigInt(0)    };    snapshot.userPendingRewards = {      pendingRewardAmount: BigInt(0),      pendingCollateralReward: BigInt(0)    };  }  return snapshot as IDFIREStakingSnapshot;}