// Generated by SnapshotCodeGenerator

import { ethers } from "ethers";
import { Actor } from "@svylabs/ilumina";
import { DFIREStakingSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of DFIREStaking state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances to fetch user-specific data
 * @returns Promise returning the interface DFIREStakingSnapshot
 */
export async function takedfireStakingContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<DFIREStakingSnapshot> {
    try {
        const owner = await contract.owner();
        const rewardSenderActive = await contract.rewardSenderActive();
        const totalCollateralPerToken = await contract.totalCollateralPerToken();
        const totalRewardPerToken = await contract.totalRewardPerToken();
        const totalStake = await contract.totalStake();

        const stakeByUser: { [accountAddress: string]: { stake: bigint; rewardSnapshot: bigint; collateralSnapshot: bigint } } = {};
        const userPendingReward: { [accountAddress: string]: { reward: bigint; collateralReward: bigint } } = {};

        for (const actor of actors) {
            const accountAddress = actor.accountAddress;

            const stakeData = await contract.stakes(accountAddress);
            stakeByUser[accountAddress] = {
                stake: stakeData.stake,
                rewardSnapshot: stakeData.rewardSnapshot,
                collateralSnapshot: stakeData.collateralSnapshot
            };

            const rewardData = await contract.userPendingReward(accountAddress);
            userPendingReward[accountAddress] = {
                reward: rewardData.reward,
                collateralReward: rewardData.collateralReward
            };
        }

        return {
            owner,
            rewardSenderActive,
            totalCollateralPerToken,
            totalRewardPerToken,
            totalStake,
            stakeByUser,
            userPendingReward
        };
    } catch (error: any) {
        console.error("Error in takedfireStakingContractSnapshot:", error);
        throw new Error(`Failed to snapshot DFIREStaking contract state: ${error.message}`);
    }
}