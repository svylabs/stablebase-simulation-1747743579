// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/ilumina';
import { DFIREStakingState } from './snapshot_interfaces';

/**
 * Takes a snapshot of DFIREStaking state
 * @param contract - ethers.Contract instance
 * @param actors - List of actors to fetch user specific data
 * @returns Promise returning the interface DFIREStakingState
 */
export async function takedfireStakingContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<DFIREStakingState> {
  try {
    const rewardSenderActive = await contract.rewardSenderActive();
    const totalCollateralPerToken = await contract.totalCollateralPerToken();
    const totalRewardPerToken = await contract.totalRewardPerToken();
    const totalStake = await contract.totalStake();

    const stakes: { [accountAddress: string]: { stake: bigint; rewardSnapshot: bigint; collateralSnapshot: bigint; } } = {};
    const stakeByUser: { [accountAddress: string]: { stake: bigint; rewardSnapshot: bigint; collateralSnapshot: bigint; } } = {};
    const userPendingReward: { [accountAddress: string]: [bigint, bigint] } = {};

    for (const actor of actors) {
      const accountAddress = actor.accountAddress;

      // Fetch stakes
      const stakeData = await contract.stakes(accountAddress);
      stakes[accountAddress] = {
        stake: stakeData.stake,
        rewardSnapshot: stakeData.rewardSnapshot,
        collateralSnapshot: stakeData.collateralSnapshot,
      };

      // Fetch stakeByUser
      stakeByUser[accountAddress] = await contract.getStake(accountAddress);

      // Fetch userPendingReward
      const pendingReward = await contract.userPendingReward(accountAddress);
      userPendingReward[accountAddress] = [pendingReward[0], pendingReward[1]];
    }

    return {
      rewardSenderActive,
      stakes,
      totalCollateralPerToken,
      totalRewardPerToken,
      totalStake,
      stakeByUser,
      userPendingReward,
    };
  } catch (error: any) {
    console.error('Error in takedfireStakingContractSnapshot:', error);
    throw new Error(`Failed to snapshot DFIREStaking contract: ${error.message}`);
  }
}