// Generated by SnapshotCodeGenerator

export interface DFIDTokenSnapshot {
  allowances: { [owner: string]: { [spender: string]: bigint } };
  balances: { [account: string]: bigint };
  decimals: number;
  name: string;
  owner: string;
  symbol: string;
  totalBurned: bigint;
  totalSupply: bigint;
}

export interface DFIRETokenSnapshot {
  allowanceAmount: { [owner: string]: { [spender: string]: bigint } };
  accountBalance: { [accountAddress: string]: bigint };
  decimalPlaces: bigint;
  tokenName: string;
  contractOwner: string;
  tokenSymbol: string;
  burnedSupply: bigint;
  totalTokenSupply: bigint;
}

export interface DFIREStakingSnapshot {
  stakes: { [accountAddress: string]: { stake: bigint; rewardSnapshot: bigint; collateralSnapshot: bigint } };
  rewardSenderActive: boolean;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalStake: bigint;
  userPendingReward: { [accountAddress: string]: [bigint, bigint] };
  stakingToken: string;
  rewardToken: string;
  PRECISION: bigint;
}

export interface IStabilityPoolSnapshot {
  collateralLoss: bigint;
  users: {[accountAddress: string]: IUserInfo};
  isLiquidationPossible: boolean;
  lastSBRRewardDistributedTime: bigint;
  minimumScalingFactor: bigint;
  rewardLoss: bigint;
  rewardSenderActive: boolean;
  sbrDistributionRate: bigint;
  sbrRewardDistributionEndTime: bigint;
  sbrRewardDistributionStatus: number;
  sbrRewardLoss: bigint;
  sbrRewardSnapshots: {[accountAddress: string]: {rewardSnapshot: bigint, status: number}};
  stakeResetCount: bigint;
  stakeResetSnapshots: {[stakeResetCount: string]: {scalingFactor: bigint, totalRewardPerToken: bigint, totalCollateralPerToken: bigint, totalSBRRewardPerToken: bigint}};
  stakeScalingFactor: bigint;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalSbrRewardPerToken: bigint;
  totalStakedRaw: bigint;
  userPendingCollateral: {[accountAddress: string]: bigint};
  userPendingReward: {[accountAddress: string]: bigint};
  userPendingRewardAndCollateral: {[accountAddress: string]: [bigint, bigint, bigint]};
}

export interface IUserInfo {
    stake: bigint;
    rewardSnapshot: bigint;
    collateralSnapshot: bigint;
    cumulativeProductScalingFactor: bigint;
    stakeResetCount: bigint;
}

export interface StableBaseCDPSnapshot {
  balances: { [accountAddress: string]: bigint };
  safesData: { [safeId: number]: Safe };
  liquidationSnapshotsData: { [safeId: number]: LiquidationSnapshot };
  tokenApprovals: { [safeId: number]: string };
  operatorApprovals: { [ownerAddress: string]: { [operatorAddress: string]: boolean } };
  safeOwners: { [safeId: number]: string };
  tokenURIs: { [safeId: number]: string };
  totalCollateral: bigint;
  totalDebt: bigint;
  protocolMode: number;
  mode: number;
  sbrStakingPoolCanReceiveRewards: boolean;
  stabilityPoolCanReceiveRewards: boolean;
  name: string;
  symbol: string;
  cumulativeCollateralPerUnitCollateral: bigint;
  cumulativeDebtPerUnitCollateral: bigint;
  debtLoss: bigint;
  collateralLoss: bigint;
  inactiveDebtAndCollateral: { [safeId: number]: { debt: bigint; collateral: bigint } };
}

export interface Safe {
  collateralAmount: bigint;
  borrowedAmount: bigint;
  weight: bigint;
  totalBorrowedAmount: bigint;
  feePaid: bigint;
}

export interface LiquidationSnapshot {
  collateralPerCollateralSnapshot: bigint;
  debtPerCollateralSnapshot: bigint;
}

export interface OrderedDoublyLinkedListSnapshot {
  headId: bigint;
  tailId: bigint;
  nodes: { [safeId: bigint]: Node };
}

export interface Node {
  value: bigint;
  prev: bigint;
  next: bigint;
}

export interface MockPriceOracleSnapshot {
  priceFromFetch: bigint;
  lastGoodPrice: bigint;
  currentPrice: bigint;
  ownerAddress: string;
}

