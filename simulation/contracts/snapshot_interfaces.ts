// Generated by SnapshotCodeGenerator

export interface IDFIDTokenSnapshot {
  allowanceAmount: bigint;
  balance: bigint;
  decimals: number;
  tokenName: string;
  contractOwner: string;
  symbol: string;
  totalBurnedAmount: bigint;
  totalSupplyAmount: bigint;
}

export interface DFIRETokenSnapshot {
  allowances: { [accountAddress: string]: { [accountAddress: string]: bigint } };
  balances: { [accountAddress: string]: bigint };
  decimals: number;
  tokenName: string;
  contractOwner: string;
  symbol: string;
  totalBurned: bigint;
  totalSupply: bigint;
}

export interface DFIREStakingSnapshot {
  owner: string;
  rewardSenderActive: boolean;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalStake: bigint;
  stakeByUser: { [accountAddress: string]: { stake: bigint; rewardSnapshot: bigint; collateralSnapshot: bigint } };
  userPendingReward: { [accountAddress: string]: { reward: bigint; collateralReward: bigint } };
}

export interface UserInfo {
  stake: bigint;
  rewardSnapshot: bigint;
  collateralSnapshot: bigint;
  cumulativeProductScalingFactor: bigint;
  stakeResetCount: bigint;
}

export interface SBRRewardSnapshots {
  rewardSnapshot: bigint;
  status: number;
}

export interface StakeResetSnapshots {
  scalingFactor: bigint;
  totalRewardPerToken: bigint;
  totalCollateralPerToken: bigint;
  totalSBRRewardPerToken: bigint;
}

export interface Users {
  stake: bigint;
  rewardSnapshot: bigint;
  collateralSnapshot: bigint;
  cumulativeProductScalingFactor: bigint;
  stakeResetCount: bigint;
}

export interface StabilityPoolSnapshot {
  basisPointsDivisor: bigint;
  collateralLoss: bigint;
  userInfo: UserInfo;
  liquidationPossible: boolean;
  lastSBRRewardDistributedTime: bigint;
  minimumScalingFactor: bigint;
  precision: bigint;
  rewardLoss: bigint;
  rewardSenderActive: boolean;
  sbrDistributionRate: bigint;
  sbrRewardDistributionEndTime: bigint;
  sbrRewardDistributionStatus: number;
  sbrRewardLoss: bigint;
  sbrRewardSnapshots: SBRRewardSnapshots;
  stakeResetCount: bigint;
  stakeResetSnapshots: StakeResetSnapshots;
  stakeScalingFactor: bigint;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalSbrRewardPerToken: bigint;
  totalStakedRaw: bigint;
  users: Users;
  userPendingCollateral: bigint;
  userPendingReward: bigint;
  userPendingRewardAndCollateral: [bigint, bigint, bigint];
}

export interface StableBaseCDPSnapshot {
  tokenBalance: bigint;
  cumulativeCollateralPerUnitCollateral: bigint;
  cumulativeDebtPerUnitCollateral: bigint;
  debtLoss: bigint;
  approvedAddress: string;
  isApprovedForAll: boolean;
  currentMode: number;
  contractName: string;
  contractOwner: string;
  tokenOwner: string;
  priceOracleAddress: string;
  safeInfo: {
    collateralAmount: bigint;
    borrowedAmount: bigint;
    weight: bigint;
    totalBorrowedAmount: bigint;
    feePaid: bigint;
  };
  liquidationQueueAddress: string;
  redemptionQueueAddress: string;
  sbdTokenAddress: string;
  stabilityPoolAddress: string;
  tokenSymbol: string;
  tokenUri: string;
  totalCollateral: bigint;
  totalDebt: bigint;
  dfireTokenStakingAddress: string;
  liquidationSnapshot: {
        collateralPerCollateralSnapshot: bigint;
        debtPerCollateralSnapshot: bigint;
  };
  inactiveDebt: bigint;
  inactiveCollateral: bigint;
  sbrStakingPoolCanReceiveRewards: boolean;
  stabilityPoolCanReceiveRewards: boolean;
  collateralLoss: bigint;
}

export interface Node { value: bigint; prev: bigint; next: bigint; }

export interface OrderedDoublyLinkedListSnapshot {
  Head: bigint;
  Tail: bigint;
  HeadValue: bigint;
  TailValue: bigint;
  NodeByIdMapping: { [key: string]: Node };
  Node: Node;
  NodeById: Node;
  Nodes: Node[];
  TotalFound: bigint;
}

export interface MockPriceOracleState {
  lastGoodPrice: bigint;
  fetchPrice: bigint;
  owner: string;
}

