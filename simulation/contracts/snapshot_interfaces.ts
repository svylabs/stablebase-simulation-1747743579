// Generated by SnapshotCodeGenerator

export interface DFIDTokenSnapshot {
  allowances: { [owner: string]: { [spender: string]: bigint } };
  balances: { [account: string]: bigint };
  decimals: bigint;
  name: string;
  owner: string;
  symbol: string;
  totalBurned: bigint;
  totalSupply: bigint;
}

export interface DFIRETokenSnapshot {
  allowanceAmounts: { [owner: string]: { [spender: string]: bigint } };
  tokenBalances: { [account: string]: bigint };
  decimalPlaces: bigint;
  tokenName: string;
  tokenSymbol: string;
  burnedTokens: bigint;
  totalTokens: bigint;
  ownerAddress: string;
  stabilityPoolAddress: string;
}

export interface DFIREStakingSnapshot {
  precision: bigint;
  rewardSenderActive: boolean;
  stakes: { [accountAddress: string]: { stake: bigint; rewardSnapshot: bigint; collateralSnapshot: bigint } };
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalStake: bigint;
  userStakeDetails: { [accountAddress: string]: { stake: bigint; rewardSnapshot: bigint; collateralSnapshot: bigint } };
  userPendingReward: { [accountAddress: string]: [bigint, bigint] };
}

export interface StabilityPoolSnapshot {
  basisPointsDivisor: bigint;
  collateralLoss: bigint;
  lastSBRRewardDistributedTime: bigint;
  minimumScalingFactor: bigint;
  precision: bigint;
  rewardLoss: bigint;
  rewardSenderActive: boolean;
  sbrDistributionRate: bigint;
  sbrRewardDistributionEndTime: bigint;
  sbrRewardDistributionStatus: number;
  sbrRewardLoss: bigint;
  stakeResetCount: bigint;
  stakeScalingFactor: bigint;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalSbrRewardPerToken: bigint;
  totalStakedRaw: bigint;
  users: { [accountAddress: string]: UserInfo };
  sbrRewardSnapshots: { [accountAddress: string]: SBRRewardSnapshot };
  stakeResetSnapshots: { [stakeResetCount: number]: StakeResetSnapshot };
  userPendingCollateral: { [accountAddress: string]: bigint };
  userPendingReward: { [accountAddress: string]: bigint };
  userPendingRewardAndCollateral: { [accountAddress: string]: [bigint, bigint, bigint] };
}

export interface UserInfo {
  stake: bigint;
  rewardSnapshot: bigint;
  collateralSnapshot: bigint;
  cumulativeProductScalingFactor: bigint;
  stakeResetCount: bigint;
}

export interface SBRRewardSnapshot {
  rewardSnapshot: bigint;
  status: number; // enum StabilityPool.SBRRewardDistribution
}

export interface StakeResetSnapshot {
  scalingFactor: bigint;
  totalRewardPerToken: bigint;
  totalCollateralPerToken: bigint;
  totalSBRRewardPerToken: bigint;
}

export interface StableBaseCDPSnapshot {
  bootstrapModeDebtThreshold: bigint;
  extraGasCompensation: bigint;
  minimumDebt: bigint;
  protocolMode: number;
  redemptionBaseFee: bigint;
  redemptionLiquidationFee: bigint;
  sbrFeeReward: bigint;
  accountBalances: { [accountAddress: string]: bigint };
  collateralLoss: bigint;
  cumulativeCollateralPerUnitCollateral: bigint;
  cumulativeDebtPerUnitCollateral: bigint;
  debtLoss: bigint;
  approvedAddresses: { [safeId: number]: string };
  inactiveDebtAndCollateral: { [safeId: number]: { debt: bigint; collateral: bigint } };
  isApprovedForAll: { [ownerAddress: string]: { [operatorAddress: string]: boolean } };
  liquidationSnapshots: { [safeId: number]: { collateralPerCollateralSnapshot: bigint; debtPerCollateralSnapshot: bigint } };
  mode: number;
  safeOwners: { [safeId: number]: string };
  sbrStakingPoolCanReceiveRewards: boolean;
  stabilityPoolCanReceiveRewards: boolean;
  totalCollateral: bigint;
  totalDebt: bigint;
  safes: { [safeId: number]: Safe };
  tokenURIs: { [safeId: number]: string };
}

export interface Safe {
  collateralAmount: bigint;
  borrowedAmount: bigint;
  weight: bigint;
  totalBorrowedAmount: bigint;
  feePaid: bigint;
}

export interface Node {
  value: bigint;
  prev: bigint;
  next: bigint;
}

export interface OrderedDoublyLinkedListSnapshot {
  head: bigint;
  tail: bigint;
  nodes: { [safeId: string]: Node };
  nodesBatch: {n: Node[], totalFound: bigint}
}

export interface MockPriceOracleSnapshot {
  lastGoodPrice: bigint;
  price: bigint;
  fetchPrice: bigint;
  owner: string;
}

