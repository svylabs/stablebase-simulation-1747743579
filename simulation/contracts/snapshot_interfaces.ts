// Generated by SnapshotCodeGenerator

export interface DFIDTokenContractSnapshot {
  accountBalances: Record<string, bigint>;
  accountAllowances: Record<string, Record<string, bigint>>; 
  tokenName: string;
  tokenSymbol: string;
  tokenDecimals: bigint;
  tokenTotalSupply: bigint;
  contractOwner: string;
  totalTokensBurned: bigint;
}

export interface DFIRETokenAccountSnapshot {\n  balance: bigint;\n  allowances: Record<string, bigint>; // Key: spenderAddress\n}\n\ninterface DFIRETokenSnapshot {\n  decimals: bigint;\n  tokenName: string;\n  contractOwner: string;\n  tokenSymbol: string;\n  totalBurnedSupply: bigint;\n  totalTokenSupply: bigint;\n  accounts: Record<string, DFIRETokenAccountSnapshot>; // Key: accountAddress\n}

export interface IStake {stake: bigint;rewardSnapshot: bigint;collateralSnapshot: bigint;}export interface IDFIREStakingSnapshot {rewardSenderActive: boolean;totalCollateralPerToken: bigint;totalRewardPerToken: bigint;totalStake: bigint;userStake: IStake;userPendingRewards: {pendingRewardAmount: bigint;pendingCollateralReward: bigint;};}

type StabilityPoolSBRRewardDistribution = bigint; export interface IStabilityPoolUserInfo { stake: bigint; rewardSnapshot: bigint; collateralSnapshot: bigint; cumulativeProductScalingFactor: bigint; stakeResetCount: bigint; } export interface IStabilityPoolSBRRewardSnapshotInfo { rewardSnapshot: bigint; status: StabilityPoolSBRRewardDistribution; } export interface IStabilityPoolStakeResetSnapshot { scalingFactor: bigint; totalRewardPerToken: bigint; totalCollateralPerToken: bigint; totalSBRRewardPerToken: bigint; } export interface StabilityPoolSnapshot { collateralLoss: bigint; lastSBRRewardDistributedTime: bigint; minimumScalingFactor: bigint; precision: bigint; rewardLoss: bigint; rewardSenderActive: boolean; sbrDistributionRate: bigint; sbrRewardDistributionEndTime: bigint; sbrRewardDistributionStatus: StabilityPoolSBRRewardDistribution; sbrRewardLoss: bigint; stakeResetCount: bigint; stakeScalingFactor: bigint; totalCollateralPerToken: bigint; totalRewardPerToken: bigint; totalSbrRewardPerToken: bigint; totalStakedRaw: bigint; users: Record<string, IStabilityPoolUserInfo>; sbrRewardSnapshots: Record<string, IStabilityPoolSBRRewardSnapshotInfo>; userPendingCollateral: Record<string, bigint>; userPendingReward: Record<string, bigint>; userPendingRewardAndCollateral: Record<string, [bigint, bigint, bigint]>; stakeResetSnapshots: IStabilityPoolStakeResetSnapshot[]; }

export interface StableBaseCDPSnapshot {protocolMode: number;totalCollateralLoss: bigint;cumulativeCollateralPerUnitCollateral: bigint;cumulativeDebtPerUnitCollateral: bigint;totalDebtLoss: bigint;currentMode: number;contractName: string;sbrStakingPoolRewardsEnabled: boolean;stabilityPoolRewardsEnabled: boolean;contractSymbol: string;totalCollateral: bigint;totalDebt: bigint;balanceOfSafes: Record<string, bigint>;safeApprovedAddress: Record<bigint, string>;inactiveDebtAndCollateral: Record<bigint, {inactiveDebt: bigint;inactiveCollateral: bigint;}>;isOperatorApprovedForAll: Record<string, Record<string, boolean>>;safeOwner: Record<bigint, string>;safeDetails: Record<bigint, {collateralAmount: bigint;borrowedAmount: bigint;weight: bigint;totalBorrowedAmount: bigint;feePaid: bigint;}>;safeTokenURI: Record<bigint, string>;}

export interface Node {value: bigint;prev: bigint;next: bigint;}export interface OrderedDoublyLinkedListSnapshot {headId: bigint;tailId: bigint;nodes: {[id: string]: Node;};}

export interface MockPriceOracleSnapshot {currentPrice: bigint;lastGoodPriceValue: bigint;fetchedPrice: bigint;}

