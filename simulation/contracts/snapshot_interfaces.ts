// Generated by SnapshotCodeGenerator

export interface DFIDTokenState {
  name: string;
  symbol: string;
  decimals: number;
  totalSupply: bigint;
  totalBurned: bigint;
  allowances: { [accountAddress: string]: { [accountAddress: string]: bigint } };
  balances: { [accountAddress: string]: bigint };
  owner: string;
}

export interface DFIRETokenSnapshot {
  allowances: { [accountAddress: string]: { [accountAddress: string]: bigint } };
  balances: { [accountAddress: string]: bigint };
  decimals: number;
  name: string;
  owner: string;
  symbol: string;
  totalBurned: bigint;
  totalSupply: bigint;
}

export interface Stake {
  stake: bigint;
  rewardSnapshot: bigint;
  collateralSnapshot: bigint;
}

export interface DFIREStakingState {
  PRECISION: bigint;
  owner: string;
  rewardSenderActive: boolean;
  stableBaseContract: string;
  getStake(accountAddress: string): Stake;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalStake: bigint;
  userPendingReward(accountAddress: string): [bigint, bigint];
}

export interface StabilityPoolSnapshot {
  BASIS_POINTS_DIVISOR: bigint;
  collateralLoss: bigint;
  lastSBRRewardDistributedTime: bigint;
  minimumScalingFactor: bigint;
  precision: bigint;
  rewardLoss: bigint;
  rewardSenderActive: boolean;
  sbrDistributionRate: bigint;
  sbrRewardDistributionEndTime: bigint;
  sbrRewardDistributionStatus: string;
  sbrRewardLoss: bigint;
  stakeResetCount: bigint;
  stakeScalingFactor: bigint;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalSbrRewardPerToken: bigint;
  totalStakedRaw: bigint;
  sbrRewardSnapshots: { [accountAddress: string]: { rewardSnapshot: bigint; status: number } };
  stakeResetSnapshots: { [stakeResetCount: string]: { scalingFactor: bigint; totalRewardPerToken: bigint; totalCollateralPerToken: bigint; totalSBRRewardPerToken: bigint } };
  userInfos: { [accountAddress: string]: { stake: bigint; rewardSnapshot: bigint; collateralSnapshot: bigint; cumulativeProductScalingFactor: bigint; stakeResetCount: bigint } };
  pendingCollaterals: { [accountAddress: string]: bigint };
  pendingRewards: { [accountAddress: string]: bigint };
  pendingRewardAndCollaterals: { [accountAddress: string]: {pendingReward: bigint, pendingCollateral: bigint, total: bigint} };
}

export interface StableBaseCDPSnapshot {
  totalCollateral: bigint;
  totalDebt: bigint;
  safes: { [safeId: number]: { collateralAmount: bigint; borrowedAmount: bigint; weight: bigint; totalBorrowedAmount: bigint; feePaid: bigint } };
  name: string;
  symbol: string;
  collateralLoss: bigint;
  debtLoss: bigint;
  tokenURI: { [tokenId: number]: string };
  cumulativeCollateralPerUnitCollateral: bigint;
  cumulativeDebtPerUnitCollateral: bigint;
  inactiveDebt: { [safeId: number]: bigint };
  inactiveCollateral: { [safeId: number]: bigint };
  collateralPerCollateralSnapshot: { [safeId: number]: bigint };
  debtPerCollateralSnapshot: { [safeId: number]: bigint };
}

export interface OrderedDoublyLinkedListState {
  head: bigint;
  tail: bigint;
  nodes: { [key: string]: Node };
}

export interface Node {
  value: bigint;
  prev: bigint;
  next: bigint;
}

export interface NodeReturn {
  value: bigint;
  prev: bigint;
  next: bigint;
}

export interface NodesReturn {
  n: NodeReturn[];
  totalFound: bigint;
}

export interface MockPriceOracleState {
  lastGoodPrice: bigint;
  price: bigint;
  fetchedPrice: bigint;
}

