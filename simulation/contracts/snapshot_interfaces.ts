// Generated by SnapshotCodeGenerator

export interface DFIDTokenSnapshot {
  allowances: { [owner: string]: { [spender: string]: bigint } };
  balances: { [account: string]: bigint };
  decimals: number;
  name: string;
  owner: string;
  symbol: string;
  totalBurned: bigint;
  totalSupply: bigint;
}

export interface DFIRETokenSnapshot {
  allowances: { [owner: string]: { [spender: string]: bigint } };
  balances: { [account: string]: bigint };
  decimals: bigint;
  name: string;
  owner: string;
  symbol: string;
  totalBurned: bigint;
  totalSupply: bigint;
}

export interface DFIREStakingSnapshot {
  precisionValue: bigint;
  isRewardSenderActive: boolean;
  stakes: { [accountAddress: string]: StakeInfo };
  totalCollateralPerTokenValue: bigint;
  totalRewardPerTokenValue: bigint;
  totalStakeValue: bigint;
}

export interface StakeInfo {
  stake: bigint;
  rewardSnapshot: bigint;
  collateralSnapshot: bigint;
}

export interface StabilityPoolSnapshot {
  basisPointsDivisor: bigint;
  collateralLoss: bigint;
  precision: bigint;
  rewardLoss: bigint;
  rewardSenderActive: boolean;
  sbrDistributionRate: bigint;
  sbrRewardDistributionEndTime: bigint;
  sbrRewardDistributionStatus: number;
  sbrRewardLoss: bigint;
  stakeResetCount: bigint;
  stakeScalingFactor: bigint;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalSbrRewardPerToken: bigint;
  totalStakedRaw: bigint;
  users: { [accountAddress: string]: UserInfo };
  sbrRewardSnapshots: { [accountAddress: string]: SBRRewardSnapshot };
  stakeResetSnapshots: { [stakeResetCount: string]: StakeResetSnapshot };
}

export interface UserInfo {
  stake: bigint;
  rewardSnapshot: bigint;
  collateralSnapshot: bigint;
  cumulativeProductScalingFactor: bigint;
  stakeResetCount: bigint;
}

export interface SBRRewardSnapshot {
  rewardSnapshot: bigint;
  status: number;  // enum
}

export interface StakeResetSnapshot {
  scalingFactor: bigint;
  totalRewardPerToken: bigint;
  totalCollateralPerToken: bigint;
  totalSBRRewardPerToken: bigint;
}

export interface UserPendingRewardAndCollateralOutput {
  pendingReward: bigint;
  pendingCollateral: bigint;
  total: bigint;
}

export interface IsLiquidationPossibleOutput {
  possible: boolean;
}

export interface StableBaseCDPSnapshot {
  bootstrapModeDebtThreshold: bigint;
  extraGasCompensation: bigint;
  minimumDebt: bigint;
  protocolMode: number;
  redemptionBaseFee: bigint;
  redemptionLiquidationFee: bigint;
  sbrFeeReward: bigint;
  collateralLoss: bigint;
  cumulativeCollateralPerUnitCollateral: bigint;
  cumulativeDebtPerUnitCollateral: bigint;
  debtLoss: bigint;
  mode: number;
  contractName: string;
  sbrStakingPoolCanReceiveRewards: boolean;
  stabilityPoolCanReceiveRewards: boolean;
  contractSymbol: string;
  totalCollateral: bigint;
  totalDebt: bigint;
  accountBalance: bigint;
  interfaceSupport: boolean;
}

export interface SafeInfo {
    collateralAmount: bigint;
    borrowedAmount: bigint;
    weight: bigint;
    totalBorrowedAmount: bigint;
    feePaid: bigint;
}

export interface LiquidationSnapshot {
    collateralPerCollateralSnapshot: bigint;
    debtPerCollateralSnapshot: bigint;
}

export interface RedemptionAmountsAndFee {
    borrowMode: boolean;
    _collateralToRedeem: bigint;
    _amountToRedeem: bigint;
    _amountToRefund: bigint;
    _ownerFee: bigint;
    _redeemerFee: bigint;
}

export interface InactiveDebtAndCollateral {
    inactiveDebt: bigint;
    inactiveCollateral: bigint;
}

export interface OrderedDoublyLinkedListSnapshot {
  head: bigint;
  tail: bigint;
  nodes: { [key: bigint]: Node };
  owner: string;
}

export interface Node {
  value: bigint;
  prev: bigint;
  next: bigint;
}

export interface MockPriceOracleSnapshot {
  lastGoodPrice: bigint;
  currentPrice: bigint;
  fetchedPrice: bigint;
  ownerAddress: string;
}

