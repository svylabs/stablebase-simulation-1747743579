// Generated by SnapshotCodeGenerator

export interface DFIDTokenSnapshot {
  Name: string;
  Symbol: string;
  Decimals: number;
  TotalSupply: bigint;
  TotalBurned: bigint;
  Owner: string;
  Balance: {[accountAddress: string]: bigint};
  Allowance: {[accountAddress: string]: {[accountAddress: string]: bigint}};
}

export interface DFIRETokenSnapshot {
  Allowance: { [owner: string]: { [spender: string]: bigint } };
  Balance: bigint;
  Decimals: number;
  Name: string;
  Owner: string;
  Symbol: string;
  TotalBurned: bigint;
  TotalSupply: bigint;
}

export interface DFIREStakingState {
  rewardSenderActive: boolean;
  stakes: {
    [accountAddress: string]: {
      stake: bigint;
      rewardSnapshot: bigint;
      collateralSnapshot: bigint;
    };
  };
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalStake: bigint;
  stakeByUser: {
      stake: bigint;
      rewardSnapshot: bigint;
      collateralSnapshot: bigint;
    };
  userPendingReward: {
        0: bigint; 
        1: bigint; 
      };
}

export interface StabilityPoolSnapshot {
  collateralLoss: bigint;
  userInfo: {
    stake: bigint;
    rewardSnapshot: bigint;
    collateralSnapshot: bigint;
    cumulativeProductScalingFactor: bigint;
    stakeResetCount: bigint;
  };
  liquidationPossible: boolean;
  lastSBRRewardDistributedTime: bigint;
  minimumScalingFactor: bigint;
  precision: bigint;
  rewardLoss: bigint;
  rewardSenderActive: boolean;
  sbrDistributionRate: bigint;
  sbrRewardDistributionEndTime: bigint;
  sbrRewardDistributionStatus: number;
  sbrRewardLoss: bigint;
  sbrRewardSnapshots: {
    rewardSnapshot: bigint;
    status: number;
  };
  stakeResetCount: bigint;
  stakeResetSnapshots: {
    scalingFactor: bigint;
    totalRewardPerToken: bigint;
    totalCollateralPerToken: bigint;
    totalSBRRewardPerToken: bigint;
  };
  stakeScalingFactor: bigint;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalSbrRewardPerToken: bigint;
  totalStakedRaw: bigint;
  userPendingCollateral: bigint;
  userPendingReward: bigint;
  userPendingRewardAndCollateral: bigint[];
  users: {
    stake: bigint;
    rewardSnapshot: bigint;
    collateralSnapshot: bigint;
    cumulativeProductScalingFactor: bigint;
    stakeResetCount: bigint;
  };
}

export interface StableBaseCDPSnapshot {
  safes: { [safeId: bigint]: Safe };
  collateralLoss: bigint;
  cumulativeCollateralPerUnitCollateral: bigint;
  cumulativeDebtPerUnitCollateral: bigint;
  debtLoss: bigint;
  liquidationSnapshots: { [safeId: bigint]: LiquidationSnapshot };
  mode: number;
  name: string;
  dfireTokenStaking: string;
  safesOrderedForLiquidation: string;
  safesOrderedForRedemption: string;
  symbol: string;
  totalCollateral: bigint;
  totalDebt: bigint;
  balanceOf: { [accountAddress: string]: bigint };
  getApproved: { [safeId: bigint]: string };
  isApprovedForAll: { [accountAddress: string]: { [accountAddress: string]: boolean } };
  ownerOf: { [safeId: bigint]: string };
  tokenURI: { [safeId: bigint]: string };
  getInactiveDebtAndCollateral: { [safeId: bigint]: { debt: bigint; collateral: bigint } };
}

export interface Safe {
  collateralAmount: bigint;
  borrowedAmount: bigint;
  weight: bigint;
  totalBorrowedAmount: bigint;
  feePaid: bigint;
}

export interface LiquidationSnapshot {
  collateralPerCollateralSnapshot: bigint;
  debtPerCollateralSnapshot: bigint;
}

export interface OrderedDoublyLinkedListSnapshot {
  head: bigint;
  tail: bigint;
  nodeValue: {
    value: bigint;
    prev: bigint;
    next: bigint;
  };
  nodes: {
    value: bigint;
    prev: bigint;
    next: bigint;
  }[];
  totalFound: bigint;
  listHead: bigint;
  listTail: bigint;
  owner: string;
}

export interface MockPriceOracleSnapshot {
  lastGoodPrice: bigint;
  price: bigint;
  fetchPrice: bigint;
}

