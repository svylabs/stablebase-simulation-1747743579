// Generated by SnapshotCodeGenerator

export interface DFIDTokenSnapshot {
  allowanceAmount: bigint;
  accountBalance: bigint;
  decimalPlaces: number;
  tokenName: string;
  tokenSymbol: string;
  totalBurnedAmount: bigint;
  totalTokenSupply: bigint;
}

export interface DFIRETokenSnapshot {
  allowances: { [accountAddress: string]: bigint };
  balances: { [accountAddress: string]: bigint };
  name: string;
  symbol: string;
  decimals: number;
  totalSupply: bigint;
  totalBurned: bigint;
}

export interface Stake {
    stake: bigint;
    rewardSnapshot: bigint;
    collateralSnapshot: bigint;
}

export interface DFIREStakingSnapshot {
    stakesMapping: { [accountAddress: string]: Stake };
    totalCollateralPerToken: bigint;
    totalRewardPerToken: bigint;
    totalStake: bigint;
    userPendingReward: [bigint, bigint];
    rewardSenderActive: boolean;
}

/**
 * @dev Interface representing the state of the StabilityPool contract.
 */
export interface StabilityPoolState {
  collateralLoss: bigint;
  rewardLoss: bigint;
  rewardSenderActive: boolean;
  sbrRewardDistributionEndTime: bigint;
  sbrRewardDistributionStatus: number;
  stakeResetCount: bigint;
  stakeScalingFactor: bigint;
  totalCollateralPerToken: bigint;
  totalRewardPerToken: bigint;
  totalSbrRewardPerToken: bigint;
  totalStakedRaw: bigint;
  users: {[accountAddress: string]: IStabilityPoolUserInfo};
  sbrRewardSnapshots: {[accountAddress: string]: SBRRewardSnapshots};
  stakeResetSnapshots: {[stakeResetCount: string]: StakeResetSnapshot};
  lastSBRRewardDistributedTime: bigint;
  sbrDistributionRate: bigint;
  minimumScalingFactor: bigint;
  precision: bigint;
}

export interface IStabilityPoolUserInfo {
    stake: bigint;
    rewardSnapshot: bigint;
    collateralSnapshot: bigint;
    cumulativeProductScalingFactor: bigint;
    stakeResetCount: bigint;
}

export interface SBRRewardSnapshots {
    rewardSnapshot: bigint;
    status: number;
}

export interface StakeResetSnapshot {
    scalingFactor: bigint;
    totalRewardPerToken: bigint;
    totalCollateralPerToken: bigint;
    totalSBRRewardPerToken: bigint;
}

export interface StableBaseCDPSnapshot {
  collateralLoss: bigint;
  cumulativeCollateralPerUnitCollateral: bigint;
  cumulativeDebtPerUnitCollateral: bigint;
  debtLoss: bigint;
  approvedAddress: { [tokenId: bigint]: string };
  inactiveDebtAndCollateral: { [safeId: bigint]: [bigint, bigint] };
  isApprovedForAll: { [owner: string]: { [operator: string]: boolean } };
  liquidationSnapshots: { [safeId: bigint]: [bigint, bigint] };
  mode: number;
  name: string;
  ownerOf: { [tokenId: bigint]: string };
  redemptionCalculation: RedemptionCalculationOutput;
  safes: { [safeId: bigint]: Safe };
  sbrStakingPoolCanReceiveRewards: boolean;
  stabilityPoolCanReceiveRewards: boolean;
  symbol: string;
  supportsInterface: boolean;
  tokenURI: { [tokenId: bigint]: string };
  totalCollateral: bigint;
  totalDebt: bigint;
}

export interface Safe {
  collateralAmount: bigint;
  borrowedAmount: bigint;
  weight: bigint;
  totalBorrowedAmount: bigint;
  feePaid: bigint;
}

export interface RedemptionCalculationOutput {
  borrowMode: boolean;
  _collateralToRedeem: bigint;
  _amountToRedeem: bigint;
  _amountToRefund: bigint;
  _ownerFee: bigint;
  _redeemerFee: bigint;
}

export interface OrderedDoublyLinkedListSnapshot {
  head: bigint;
  tail: bigint;
  nodes: { [key: string]: Node };
  owner: string;
}

export interface Node {
  value: bigint;
  prev: bigint;
  next: bigint;
}

export interface MockPriceOracleSnapshot {
  fetchedPrice: bigint; // The price fetched from an external source
  lastGoodPrice: bigint; // The last known good price
  currentPrice: bigint; // The current price
  owner: string; // The address of the contract owner
}

