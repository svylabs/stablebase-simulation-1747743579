// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { OrderedDoublyLinkedListSnapshot, Node } from './snapshot_interfaces';

/**
 * Takes a snapshot of OrderedDoublyLinkedList state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances.
 * @returns Promise returning the interface OrderedDoublyLinkedListSnapshot
 */
export async function takesafesOrderedForRedemptionContractSnapshot(
  contract: ethers.Contract,
  actors: Actor[]
): Promise<OrderedDoublyLinkedListSnapshot> {
  try {\n    const head = BigInt(await contract.getHead());
    const tail = BigInt(await contract.getTail());
    const owner = await contract.owner();

    const nodes: { [key: bigint]: Node } = {};

    // Extract all 'Safe ID' identifiers from all actors
    const safeIds: bigint[] = [];
    actors.forEach((actor) => {
      const identifiers = actor.getIdentifiers();
      if (identifiers['Safe ID']) {
        const safeIdValues = Array.isArray(identifiers['Safe ID']) ? identifiers['Safe ID'] : [identifiers['Safe ID']];
        safeIdValues.forEach((safeId) => {
          if (typeof safeId === 'number' || typeof safeId === 'string') {
            safeIds.push(BigInt(safeId));
          } else if (typeof safeId === 'bigint') {
            safeIds.push(safeId);
          } else {
            console.warn("Unexpected type for Safe ID:", safeId);
          }
        });
      }
    });

    // Fetch node data for each unique Safe ID
    for (const safeId of safeIds) {
      try {\
        const node = await contract.nodes(safeId);
        nodes[safeId] = {
          value: BigInt(node.value),
          prev: BigInt(node.prev),
          next: BigInt(node.next),
        };
      } catch (error: any) {
        console.error(`Error fetching node for Safe ID ${safeId}:`, error);
      }
    }

    return {
      head,
      tail,
      nodes,
      owner,
    };
  } catch (error: any) {
    console.error('Error taking OrderedDoublyLinkedList snapshot:', error);
    throw new Error(`Failed to snapshot OrderedDoublyLinkedList contract state: ${error.message}`);
  }
}