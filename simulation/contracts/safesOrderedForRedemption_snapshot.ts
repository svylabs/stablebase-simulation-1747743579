// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/ilumina';
import { OrderedDoublyLinkedListSnapshot, Node } from './snapshot_interfaces';

/**
 * Takes a snapshot of OrderedDoublyLinkedList state
 * @param contract - ethers.Contract instance
 * @param actors - An array of Actor objects, each containing identifiers.
 * @returns Promise returning the interface OrderedDoublyLinkedListSnapshot
 */
export async function takesafesOrderedForRedemptionContractSnapshot(
  contract: ethers.Contract,
  actors: Actor[]
): Promise<OrderedDoublyLinkedListSnapshot> {
  try {
    const headId: bigint = (await contract.getHead()).toBigInt();
    const tailId: bigint = (await contract.getTail()).toBigInt();
    const nodes: { [safeId: bigint]: Node } = {};

    // Collect all safeIds from the actors.
    const safeIds: bigint[] = [];
    for (const actor of actors) {
      const identifiers = actor.getIdentifiers();
      if (identifiers.safeId) {
        if (Array.isArray(identifiers.safeId)) {
          for (const safeId of identifiers.safeId) {
            safeIds.push(BigInt(safeId));
          }
        } else {
          safeIds.push(BigInt(identifiers.safeId));
        }
      }
    }

    // Fetch node data for each safeId.
    for (const safeId of safeIds) {
      try {
        const nodeData = await contract.getNode(safeId);
        const node: Node = {
          value: nodeData.value.toBigInt(),
          prev: nodeData.prev.toBigInt(),
          next: nodeData.next.toBigInt(),
        };
        nodes[safeId] = node;
      } catch (nodeError: any) {
        console.error(`Error fetching node for safeId ${safeId}:`, nodeError);
        // Handle the error appropriately.  Perhaps skip this safeId or throw.
        // For now, skipping.
      }
    }

    return {
      headId,
      tailId,
      nodes,
    };
  } catch (error: any) {
    console.error('Error taking OrderedDoublyLinkedList snapshot:', error);
    throw new Error(`Failed to snapshot OrderedDoublyLinkedList contract state: ${error.message}`);
  }
}
