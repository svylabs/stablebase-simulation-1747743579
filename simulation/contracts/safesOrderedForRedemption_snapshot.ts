// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { OrderedDoublyLinkedListState, Node, NodeReturn, NodesReturn } from './snapshot_interfaces';

/**
 * Takes a snapshot of OrderedDoublyLinkedList state
 * @param contract - ethers.Contract instance
 * @param actors - An array of Actor objects.
 * @returns Promise returning the interface OrderedDoublyLinkedListState
 */
export async function takesafesOrderedForRedemptionContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<OrderedDoublyLinkedListState> {
    try {
        const head = BigInt(await contract.getHead());
        const tail = BigInt(await contract.getTail());

        const nodes: { [key: string]: Node } = {};

        // Process each actor to fetch node data
        for (const actor of actors) {
            const identifiers = actor.getIdentifiers();
            if (identifiers && identifiers._safeId) {
                const safeIds = Array.isArray(identifiers._safeId) ? identifiers._safeId : [identifiers._safeId];

                for (const safeId of safeIds) {
                    if (safeId !== undefined) {
                        const safeIdBigInt = BigInt(safeId);

                        // Fetch node using nodes mapping
                        const nodeMapping = await contract.nodes(safeIdBigInt);

                        // Fetch node using getNode
                        const nodeData = await contract.getNode(safeIdBigInt);

                        //Fetch nodes using getNodes
                        // const nodesData = await contract.getNodes(safeIdBigInt, safeIdBigInt);


                        nodes[safeIdBigInt.toString()] = {
                            value: BigInt(nodeMapping.value),
                            prev: BigInt(nodeMapping.prev),
                            next: BigInt(nodeMapping.next),
                        };
                    }
                }
            }
        }

        return {
            head,
            tail,
            nodes,
        };
    } catch (error: any) {
        console.error('Error in takesafesOrderedForRedemptionContractSnapshot:', error);
        throw new Error(`Failed to snapshot OrderedDoublyLinkedList state: ${error.message}`);
    }
}