// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { MockPriceOracleSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of MockPriceOracle state
 * @param contract - ethers.Contract instance
 * @returns Promise returning the interface MockPriceOracleSnapshot
 */
export async function takemockPriceOracleContractSnapshot(contract: ethers.Contract): Promise<MockPriceOracleSnapshot> {
  try {
    const lastGoodPrice = await contract.lastGoodPrice();
    const price = await contract.price();
    const fetchPrice = await contract.fetchPrice();

    const snapshot: MockPriceOracleSnapshot = {
      lastGoodPrice: BigInt(lastGoodPrice.toString()),
      price: BigInt(price.toString()),
      fetchPrice: BigInt(fetchPrice.toString()),
    };

    return snapshot;
  } catch (error: any) {
    console.error('Error taking MockPriceOracle snapshot:', error);
    throw new Error(`Failed to snapshot MockPriceOracle contract. Reason: ${error.message}`);
  }
}