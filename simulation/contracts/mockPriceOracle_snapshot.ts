// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { MockPriceOracleSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of MockPriceOracle state
 * @param contract - ethers.Contract instance
 * @returns Promise returning the interface MockPriceOracleSnapshot
 */
export async function takemockPriceOracleContractSnapshot(contract: ethers.Contract): Promise<MockPriceOracleSnapshot> {
  try {
    const lastGoodPrice: bigint = BigInt(await contract.lastGoodPrice());
    const currentPrice: bigint = BigInt(await contract.price());
    const fetchedPrice: bigint = BigInt(await contract.fetchPrice());
    const ownerAddress: string = await contract.owner();

    const snapshot: MockPriceOracleSnapshot = {
      lastGoodPrice,
      currentPrice,
      fetchedPrice,
      ownerAddress,
    };

    return snapshot;
  } catch (error: any) {
    console.error('Error taking MockPriceOracle snapshot:', error);
    throw new Error(`Failed to take MockPriceOracle snapshot: ${error.message} while calling ${error.method}`);
  }
}