// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';import { Actor } from '@svylabs/ilumina';import { MockPriceOracleSnapshot } from './snapshot_interfaces.ts';/** * Takes a snapshot of MockPriceOracle state * @param contract - ethers.Contract instance of the MockPriceOracle contract. * @returns Promise returning the MockPriceOracleSnapshot interface. * @throws Error if any contract call fails. */export async function takemockPriceOracleContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<MockPriceOracleSnapshot> {let currentPrice: bigint;let lastGoodPriceValue: bigint;let fetchedPrice: bigint;try {const priceResult = await contract.price();currentPrice = BigInt(priceResult);} catch (error) {console.error(`Failed to fetch currentPrice from MockPriceOracle contract: ${error}`);throw new Error(`Failed to snapshot currentPrice: ${error}`);}try {const lastGoodPriceResult = await contract.lastGoodPrice();lastGoodPriceValue = BigInt(lastGoodPriceResult);} catch (error) {console.error(`Failed to fetch lastGoodPrice from MockPriceOracle contract: ${error}`);throw new Error(`Failed to snapshot lastGoodPriceValue: ${error}`);}try {const fetchPriceResult = await contract.fetchPrice();fetchedPrice = BigInt(fetchPriceResult);} catch (error) {console.error(`Failed to fetch fetchedPrice from MockPriceOracle contract: ${error}`);throw new Error(`Failed to snapshot fetchedPrice: ${error}`);}return {currentPrice,lastGoodPriceValue,fetchedPrice,};}