// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { MockPriceOracleSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of MockPriceOracle state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances
 * @returns Promise returning the interface MockPriceOracleSnapshot
 */
export async function takemockPriceOracleContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<MockPriceOracleSnapshot> {
    try {
        const fetchedPrice = BigInt(await contract.fetchPrice());
        const lastGoodPrice = BigInt(await contract.lastGoodPrice());
        const currentPrice = BigInt(await contract.price());
        const owner = await contract.owner();

        // The actors parameter is provided but no actor specific data is fetched from contract, so the parameter is not used to fetch any data.
        // Returning contract level snapshot

        const snapshot: MockPriceOracleSnapshot = {
            fetchedPrice,
            lastGoodPrice,
            currentPrice,
            owner,
        };

        return snapshot;
    } catch (error: any) {
        console.error('Error taking MockPriceOracle snapshot:', error);
        throw new Error(`Failed to take MockPriceOracle snapshot: ${error.message}`);
    }
}