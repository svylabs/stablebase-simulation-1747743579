// Generated by SnapshotCodeGenerator

import { ethers } from "ethers";
import { Actor, Snapshot } from "@svylabs/ilumina";
import { MockPriceOracleState } from './snapshot_interfaces';

/**
 * Takes a snapshot of MockPriceOracle state
 * @param contract - ethers.Contract instance
 * @returns Promise returning the interface MockPriceOracleState
 */
export async function takemockPriceOracleContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<MockPriceOracleState> {
    try {
        const lastGoodPrice: bigint = BigInt(await contract.lastGoodPrice());
        const price: bigint = BigInt(await contract.price());
        const fetchedPrice: bigint = BigInt(await contract.fetchPrice());

        const snapshot: MockPriceOracleState = {
            lastGoodPrice,
            price,
            fetchedPrice
        };

        return snapshot;
    } catch (error: any) {
        console.error("Error taking MockPriceOracle snapshot:", error);
        throw new Error(`Failed to snapshot MockPriceOracle contract: ${error.message}`);
    }
}
