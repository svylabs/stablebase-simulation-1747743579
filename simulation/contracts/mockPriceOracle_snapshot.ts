// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { MockPriceOracleSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of MockPriceOracle state
 * @param contract - ethers.Contract instance
 * @returns Promise returning the interface MockPriceOracleSnapshot
 */
export async function takemockPriceOracleContractSnapshot(
    contract: ethers.Contract,
    actors: Actor[]
): Promise<MockPriceOracleSnapshot> {
    try {
        const priceFromFetch: bigint = BigInt(await contract.fetchPrice());
        const lastGoodPrice: bigint = BigInt(await contract.lastGoodPrice());
        const currentPrice: bigint = BigInt(await contract.price());
        const ownerAddress: string = await contract.owner();

        const snapshot: MockPriceOracleSnapshot = {
            priceFromFetch,
            lastGoodPrice,
            currentPrice,
            ownerAddress
        };

        // Iterate through actors (currently no user-specific data is fetched)
        for (const actor of actors) {
            const identifiers = actor.getIdentifiers();
            console.log(`Actor identifiers:`, identifiers);
            //Add more logic to fetch user specific data if any.
        }

        return snapshot;
    } catch (error: any) {
        console.error('Error taking MockPriceOracle snapshot:', error);
        throw new Error(`Failed to take MockPriceOracle snapshot: ${error.message}`);
    }
}