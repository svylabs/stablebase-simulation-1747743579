// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor } from '@svylabs/perilune';
import { MockPriceOracleState } from './snapshot_interfaces';

/**
 * Takes a snapshot of MockPriceOracle state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances
 * @returns Promise returning the interface MockPriceOracleState
 */
export async function takemockPriceOracleContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<MockPriceOracleState> {
  try {
    const lastGoodPrice: bigint = BigInt(await contract.lastGoodPrice());
    const fetchPrice: bigint = BigInt(await contract.fetchPrice());
    const owner: string = await contract.owner();

    // Iterate through actors to fetch user-specific data if needed
    // Example:
    // for (const actor of actors) {
    //   const identifiers = actor.getIdentifiers();
    //   if (identifiers._safeId) {
    //     // Fetch data using _safeId
    //   } else if (identifiers.accountAddress) {
    //     // Fetch data using accountAddress
    //   }
    // }

    return {
      lastGoodPrice,
      fetchPrice,
      owner,
    };
  } catch (error: any) {
    console.error('Error taking MockPriceOracle snapshot:', error);
    throw new Error(`Failed to take MockPriceOracle snapshot: ${error.message}`);
  }
}