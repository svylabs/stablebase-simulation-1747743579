// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Snapshot } from '@svylabs/ilumina';
import { MockPriceOracleSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of MockPriceOracle state
 * @param contract - ethers.Contract instance
 * @returns Promise returning the interface MockPriceOracleSnapshot
 */
export async function takemockPriceOracleContractSnapshot(contract: ethers.Contract): Promise<MockPriceOracleSnapshot> {
    try {
        const lastGoodPrice: bigint = BigInt(await contract.lastGoodPrice());
        const price: bigint = BigInt(await contract.price());
        const fetchPrice: bigint = BigInt(await contract.fetchPrice());
        const owner: string = await contract.owner();

        const snapshot: MockPriceOracleSnapshot = {
            lastGoodPrice,
            price,
            fetchPrice,
            owner,
        };

        return snapshot;
    } catch (error: any) {
        console.error('Error taking MockPriceOracle snapshot:', error);
        throw new Error(`Failed to take MockPriceOracle snapshot: ${error.message}`);
    }
}