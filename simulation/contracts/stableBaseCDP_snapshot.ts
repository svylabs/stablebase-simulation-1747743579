// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { StableBaseCDPState, StableBaseCDPUserState, Safe } from './snapshot_interfaces';

/**
 * Takes a snapshot of StableBaseCDP contract state
 * @param contract - ethers.Contract instance
 * @returns Promise resolving to StableBaseCDPState interface
 */
export async function takestableBaseCDPContractSnapshot(contract: ethers.Contract): Promise<StableBaseCDPState> {
    try {
        const protocolMode = Number(await contract.PROTOCOL_MODE());
        const collateralLoss = await contract.collateralLoss();
        const cumulativeCollateralPerUnitCollateral = await contract.cumulativeCollateralPerUnitCollateral();
        const cumulativeDebtPerUnitCollateral = await contract.cumulativeDebtPerUnitCollateral();
        const debtLoss = await contract.debtLoss();
        const mode = Number(await contract.mode());
        const totalCollateral = await contract.totalCollateral();
        const totalDebt = await contract.totalDebt();
        const sbrStakingPoolCanReceiveRewards = await contract.sbrStakingPoolCanReceiveRewards();
        const stabilityPoolCanReceiveRewards = await contract.stabilityPoolCanReceiveRewards();

        return {
            protocolMode,
            collateralLoss: BigInt(collateralLoss.toString()),
            cumulativeCollateralPerUnitCollateral: BigInt(cumulativeCollateralPerUnitCollateral.toString()),
            cumulativeDebtPerUnitCollateral: BigInt(cumulativeDebtPerUnitCollateral.toString()),
            debtLoss: BigInt(debtLoss.toString()),
            liquidationSnapshots: {},
            mode,
            totalCollateral: BigInt(totalCollateral.toString()),
            totalDebt: BigInt(totalDebt.toString()),
            sbrStakingPoolCanReceiveRewards,
            stabilityPoolCanReceiveRewards,
            inactiveDebtAndCollateralAmounts: { inactiveDebt: BigInt(0), inactiveCollateral: BigInt(0) }, // Default value
        };
    } catch (error: any) {
        console.error('Error taking StableBaseCDP contract snapshot:', error);
        throw new Error(`Failed to take StableBaseCDP contract snapshot: ${error.message}`);
    }
}

/**
 * Takes a snapshot of StableBaseCDP user-specific data
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor objects, each representing a user
 * @returns Promise resolving to an array of StableBaseCDPUserState interfaces
 */
export async function takestableBaseCDPUserSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<{ [accountAddress: string]: StableBaseCDPUserState }> {
    const userSnapshots: { [accountAddress: string]: StableBaseCDPUserState } = {};

    for (const actor of actors) {
        try {
            const accountAddress = actor.accountAddress;
            if (!accountAddress) {
                console.warn("Actor missing accountAddress, skipping");
                continue;
            }

            let safeId: bigint | null = null;
            if (actor.identifiers && actor.identifiers['_safeId']) {
                safeId = BigInt(String(actor.identifiers['_safeId']));
            }

            const safeBalance = await contract.balanceOf(accountAddress);
            const isApprovedForAll = await contract.isApprovedForAll(accountAddress, accountAddress); // Using same address for owner and operator for simplicity


            let approvedAddress = ethers.ZeroAddress;
            if (safeId) {
                approvedAddress = await contract.getApproved(safeId);
            }


            let safeDetails: Safe = {
                collateralAmount: BigInt(0),
                borrowedAmount: BigInt(0),
                weight: BigInt(0),
                totalBorrowedAmount: BigInt(0),
                feePaid: BigInt(0)
            };
            let safeOwner = ethers.ZeroAddress;

            if (safeId) {
                try {
                    safeDetails = await contract.safes(safeId);
                    safeOwner = await contract.ownerOf(safeId);
                } catch (safeError: any) {
                    console.warn(`Error fetching safe details for safeId ${safeId}: ${safeError.message}`);
                }
            }

            userSnapshots[accountAddress] = {
                safeBalance: BigInt(safeBalance.toString()),
                approvedAddress,
                isApprovedForAll,
                safeDetails,
                safeOwner
            };
        } catch (error: any) {
            console.error(`Error taking StableBaseCDP user snapshot for account ${actor.accountAddress}:`, error);
            throw new Error(`Failed to take StableBaseCDP user snapshot for account ${actor.accountAddress}: ${error.message}`);
        }
    }

    return userSnapshots;
}
