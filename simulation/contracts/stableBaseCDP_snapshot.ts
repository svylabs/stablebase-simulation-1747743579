// Generated by SnapshotCodeGenerator

import { ethers, Contract } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { StableBaseCDPSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of StableBaseCDP state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances with identifiers
 * @returns Promise returning the interface StableBaseCDPSnapshot
 */
export async function takestableBaseCDPContractSnapshot(contract: Contract, actors: Actor[]): Promise<StableBaseCDPSnapshot> {
  try {
    const balances: { [accountAddress: string]: bigint } = {};
    const approvals: { [_safeId: bigint]: string } = {};
    const inactiveDebtAndCollateral: { [_safeId: bigint]: [bigint, bigint] } = {};
    const approvalForAll: { [accountAddress: string]: { [accountAddress: string]: boolean } } = {};
    const owners: { [_safeId: bigint]: string } = {};
    const safes: { [_safeId: bigint]: { collateralAmount: bigint; borrowedAmount: bigint; weight: bigint; totalBorrowedAmount: bigint; feePaid: bigint } } = {};
    const tokenURIs: { [_safeId: bigint]: string } = {};
    const liquidationSnapshots: { [_safeId: bigint]: { collateralPerCollateralSnapshot: bigint, debtPerCollateralSnapshot: bigint } } = {};

    // Fetch contract-level data
    const collateralLoss = BigInt(await contract.collateralLoss());
    const cumulativeCollateralPerUnitCollateral = BigInt(await contract.cumulativeCollateralPerUnitCollateral());
    const cumulativeDebtPerUnitCollateral = BigInt(await contract.cumulativeDebtPerUnitCollateral());
    const debtLoss = BigInt(await contract.debtLoss());
    const mode = Number(await contract.mode());
    const name = await contract.name();
    const sbrStakingPoolCanReceiveRewards = await contract.sbrStakingPoolCanReceiveRewards();
    const stabilityPoolCanReceiveRewards = await contract.stabilityPoolCanReceiveRewards();
    const symbol = await contract.symbol();
    const totalCollateral = BigInt(await contract.totalCollateral());
    const totalDebt = BigInt(await contract.totalDebt());

    // Iterate through actors to fetch user-specific data
    for (const actor of actors) {
        if (!actor.accountAddress) {
            continue; // Skip actors without an account address
        }

        const accountAddress = actor.accountAddress;
        balances[accountAddress] = BigInt(await contract.balanceOf(accountAddress));
        approvalForAll[accountAddress] = approvalForAll[accountAddress] || {};

        for (const operatorActor of actors) {
            if (!operatorActor.accountAddress) {
                continue;
            }
            const operatorAddress = operatorActor.accountAddress;
            approvalForAll[accountAddress][operatorAddress] = await contract.isApprovedForAll(accountAddress, operatorAddress);
        }

      // Handle _safeId identifier
      if (actor.identifiers && actor.identifiers['_safeId']) {
        const safeIds = Array.isArray(actor.identifiers['_safeId']) ? actor.identifiers['_safeId'] : [actor.identifiers['_safeId']];

        for (const safeId of safeIds) {
          const _safeId = BigInt(safeId);
          approvals[_safeId] = await contract.getApproved(_safeId);
          const inactiveDebtAndCollateralData = await contract.getInactiveDebtAndCollateral(_safeId);
          inactiveDebtAndCollateral[_safeId] = [BigInt(inactiveDebtAndCollateralData[0]), BigInt(inactiveDebtAndCollateralData[1])];
          owners[_safeId] = await contract.ownerOf(_safeId);
          const safeData = await contract.safes(_safeId);
          safes[_safeId] = { collateralAmount: BigInt(safeData.collateralAmount), borrowedAmount: BigInt(safeData.borrowedAmount), weight: BigInt(safeData.weight), totalBorrowedAmount: BigInt(safeData.totalBorrowedAmount), feePaid: BigInt(safeData.feePaid) };
          tokenURIs[_safeId] = await contract.tokenURI(_safeId);
          const liquidationSnapshotData = await contract.liquidationSnapshots(_safeId);
          liquidationSnapshots[_safeId] = { collateralPerCollateralSnapshot: BigInt(liquidationSnapshotData.collateralPerCollateralSnapshot), debtPerCollateralSnapshot: BigInt(liquidationSnapshotData.debtPerCollateralSnapshot) };
        }
      }
    }

    const snapshot: StableBaseCDPSnapshot = {
      balances,
      collateralLoss,
      cumulativeCollateralPerUnitCollateral,
      cumulativeDebtPerUnitCollateral,
      debtLoss,
      approvals,
      inactiveDebtAndCollateral,
      approvalForAll,
      mode,
      name,
      owners,
      safes,
      sbrStakingPoolCanReceiveRewards,
      stabilityPoolCanReceiveRewards,
      symbol,
      tokenURIs,
      totalCollateral,
      totalDebt,
      liquidationSnapshots
    };

    return snapshot;
  } catch (error: any) {
    console.error('Error taking StableBaseCDP snapshot:', error);
    throw new Error(`Failed to take StableBaseCDP snapshot: ${error.message}`);
  }
}