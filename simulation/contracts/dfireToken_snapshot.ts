// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import { Actor, Snapshot } from '@svylabs/ilumina';
import { DFIRETokenSnapshot } from './snapshot_interfaces';

/**
 * Takes a snapshot of DFIREToken state
 * @param contract - ethers.Contract instance
 * @param actors - Array of Actor instances
 * @returns Promise returning the interface DFIRETokenSnapshot
 */
export async function takedfireTokenContractSnapshot(contract: ethers.Contract, actors: Actor[]): Promise<DFIRETokenSnapshot> {
  try {
    const Allowance: { [owner: string]: { [spender: string]: bigint } } = {};
    const Balance: { [account: string]: bigint } = {};

    for (const actor of actors) {
      const ownerAddress = actor.accountAddress;
      Allowance[ownerAddress] = {};

      try {
        Balance[ownerAddress] = await contract.balanceOf(ownerAddress);
      } catch (error: any) {
        console.error(`Error fetching balance for account ${ownerAddress}:`, error);
        throw new Error(`Failed to fetch balance for account ${ownerAddress}: ${error.message}`);
      }

      for (const actor2 of actors) {
        const spenderAddress = actor2.accountAddress;
        try {
          const allowanceValue: bigint = await contract.allowance(ownerAddress, spenderAddress);
          Allowance[ownerAddress][spenderAddress] = allowanceValue;
        } catch (error: any) {
          console.error(`Error fetching allowance for owner ${ownerAddress} and spender ${spenderAddress}:`, error);
          // Do not throw, continue with other allowance pairs
          Allowance[ownerAddress][spenderAddress] = BigInt(-1);
        }
      }
    }

    const Decimals: number = await contract.decimals();
    const Name: string = await contract.name();
    const Owner: string = await contract.owner();
    const Symbol: string = await contract.symbol();
    const TotalBurned: bigint = await contract.totalBurned();
    const TotalSupply: bigint = await contract.totalSupply();

    return {
      Allowance,
      Balance,
      Decimals,
      Name,
      Owner,
      Symbol,
      TotalBurned,
      TotalSupply,
    };
  } catch (error: any) {
    console.error('Error taking DFIREToken snapshot:', error);
    throw new Error(`Failed to take DFIREToken snapshot: ${error.message}`);
  }
}