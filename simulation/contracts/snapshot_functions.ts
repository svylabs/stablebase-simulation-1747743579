// Generated by SnapshotCodeGenerator

import { ethers } from 'ethers';
import BigNumber from 'bignumber.js';




interface SnapshotResult {
    timestamp: string;
    data: Record<string, any>;
}

interface UserSnapshotResult {
    userIds: string[];
    timestamp: string;
    data: Record<string, any>;
}

/**
 * Provider class for taking complete project snapshots
 */
export class SnapshotProvider {
    private contracts: Record<string, ethers.Contract>;
    
    constructor(contracts: Record<string, ethers.Contract>) {
        this.contracts = contracts;
    }
    
    /**
     * Takes a complete snapshot of all contract states
     */
    async takeFullSnapshot(): Promise<SnapshotResult> {
        const results: Record<string, any> = {};
        const timestamp = new Date().toISOString();
        
        if (this.contracts['dfidToken']) {
            try {
                results['dfidToken'] = await takedfidTokenContractSnapshot(this.contracts['dfidToken']);
            } catch (error) {
                results['dfidToken'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['dfireToken']) {
            try {
                results['dfireToken'] = await takedfireTokenContractSnapshot(this.contracts['dfireToken']);
            } catch (error) {
                results['dfireToken'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['dfireStaking']) {
            try {
                results['dfireStaking'] = await takedfireStakingContractSnapshot(this.contracts['dfireStaking']);
            } catch (error) {
                results['dfireStaking'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['stabilityPool']) {
            try {
                results['stabilityPool'] = await takestabilityPoolContractSnapshot(this.contracts['stabilityPool']);
            } catch (error) {
                results['stabilityPool'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['stableBaseCDP']) {
            try {
                results['stableBaseCDP'] = await takestableBaseCDPContractSnapshot(this.contracts['stableBaseCDP']);
            } catch (error) {
                results['stableBaseCDP'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['safesOrderedForLiquidation']) {
            try {
                results['safesOrderedForLiquidation'] = await takesafesOrderedForLiquidationContractSnapshot(this.contracts['safesOrderedForLiquidation']);
            } catch (error) {
                results['safesOrderedForLiquidation'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['safesOrderedForRedemption']) {
            try {
                results['safesOrderedForRedemption'] = await takesafesOrderedForRedemptionContractSnapshot(this.contracts['safesOrderedForRedemption']);
            } catch (error) {
                results['safesOrderedForRedemption'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['mockPriceOracle']) {
            try {
                results['mockPriceOracle'] = await takemockPriceOracleContractSnapshot(this.contracts['mockPriceOracle']);
            } catch (error) {
                results['mockPriceOracle'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        return {
            timestamp,
            data: results
        };
    }
    
    /**
     * Takes a complete snapshot of all user data
     * @param userIds Array of user addresses
     */
    async takeUserSnapshot(userIds: string[]): Promise<UserSnapshotResult> {
        if (!userIds || userIds.length === 0) {
            throw new Error("Must provide at least one user ID");
        }
        
        const results: Record<string, any> = {};
        const timestamp = new Date().toISOString();
        
        if (this.contracts['dfidToken']) {
            try {
                results['dfidToken'] = await takedfidTokenUserSnapshot(this.contracts['dfidToken'], userIds);
            } catch (error) {
                results['dfidToken'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['dfireToken']) {
            try {
                results['dfireToken'] = await takedfireTokenUserSnapshot(this.contracts['dfireToken'], userIds);
            } catch (error) {
                results['dfireToken'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['dfireStaking']) {
            try {
                results['dfireStaking'] = await takedfireStakingUserSnapshot(this.contracts['dfireStaking'], userIds);
            } catch (error) {
                results['dfireStaking'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['stabilityPool']) {
            try {
                results['stabilityPool'] = await takestabilityPoolUserSnapshot(this.contracts['stabilityPool'], userIds);
            } catch (error) {
                results['stabilityPool'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['stableBaseCDP']) {
            try {
                results['stableBaseCDP'] = await takestableBaseCDPUserSnapshot(this.contracts['stableBaseCDP'], userIds);
            } catch (error) {
                results['stableBaseCDP'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['safesOrderedForLiquidation']) {
            try {
                results['safesOrderedForLiquidation'] = await takesafesOrderedForLiquidationUserSnapshot(this.contracts['safesOrderedForLiquidation'], userIds);
            } catch (error) {
                results['safesOrderedForLiquidation'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['safesOrderedForRedemption']) {
            try {
                results['safesOrderedForRedemption'] = await takesafesOrderedForRedemptionUserSnapshot(this.contracts['safesOrderedForRedemption'], userIds);
            } catch (error) {
                results['safesOrderedForRedemption'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        if (this.contracts['mockPriceOracle']) {
            try {
                results['mockPriceOracle'] = await takemockPriceOracleUserSnapshot(this.contracts['mockPriceOracle'], userIds);
            } catch (error) {
                results['mockPriceOracle'] = { 
                    error: error instanceof Error ? error.message : String(error),
                    stack: error instanceof Error ? error.stack : undefined
                };
            }
        }
                
        return {
            userIds,
            timestamp,
            data: results
        };
    }
}
