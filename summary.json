{"name": "DFIRE Protocol/StableBase", "summary": "The DFIRE Protocol, also known as StableBase, is a decentralized finance (DeFi) protocol that enables users to borrow DFID stablecoins pegged to USD by providing ETH as collateral. It incorporates staking, collateralized debt positions (CDPs), and mechanisms for stability and rate governance, leveraging Chainlink for price feeds. Key functionalities include minting/burning stablecoins, staking/rewards, and managing/liquidating CDPs, aiming to maintain price stability. The protocol uses a Collateral Debt Position (CDP) mechanism and incorporates liquidations and redemptions to maintain stability. It features 0% interest rates and origination fees, a 110% collateral requirement, and no governance. A key innovation is its 'Pay As You Go' model for redemption protection, where users pay fees to prioritize their CDPs in the redemption queue. The protocol issues DFIRE tokens to Stability Pool contributors as rewards. The project is unaudited, and users are advised to exercise caution.", "type": "smart contract project analysis", "dev_tool": "hardhat", "contracts": [{"name": "Constants", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/Constants.sol", "type": "contract", "summary": "The contract 'Constants' likely serves to define and store constant values that can be used by other contracts. Since no functions are defined, it probably acts as a data container. The contract is deployable because its type is 'contract' and is not an abstract contract, interface, or library.", "functions": [], "is_deployable": true, "constructor": "null"}, {"name": "DFIDToken", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/DFIDToken.sol", "type": "contract", "summary": "The DFIDToken contract is an ERC20 token named 'D.FI Dollar' with the symbol 'DFID'. It includes functionality for setting a stable base CDP address, minting new tokens, and burning existing tokens. The contract inherits ownership from the Ownable contract, restricting certain functions to the owner.", "functions": [{"name": "setAddresses", "summary": "Sets the address for the stable base CDP, likely used for interacting with a collateralized debt position related to the token's stability.", "inputs": ["address _stableBaseCDP"], "outputs": ["void"]}, {"name": "mint", "summary": "Mints new DFID tokens and sends them to the specified address. Only callable by the contract owner or authorized minters.", "inputs": ["address to", "uint256 amount"], "outputs": ["void"]}, {"name": "burn", "summary": "Burns (destroys) a specified amount of DFID tokens from the specified address. This likely requires authorization or specific conditions to be met.", "inputs": ["address from", "uint256 amount"], "outputs": ["void"]}], "is_deployable": true, "constructor": "constructor() Ownable(msg.sender) ERC20(\"D.FI Dollar\", \"DFID\") {}"}, {"name": "IRewardSender", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/DFIREStaking.sol", "type": "interface", "summary": "Manages reward distribution to SBR staking pools.", "functions": [{"name": "setCanSBRStakingPoolReceiveRewards", "summary": "Enables or disables rewards for a specific SBR staking pool.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}], "is_deployable": false, "constructor": "null"}, {"name": "DFIREStaking", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/DFIREStaking.sol", "type": "contract", "summary": "The DFIREStaking contract allows users to stake a specified staking token to earn rewards in a reward token and collateral reward. The contract manages staking, unstaking, reward distribution, and claiming mechanisms. It also includes functionality for the owner to set addresses for the staking token, reward token, and stable base contract, and to add rewards. The `rewardSenderActive` boolean, set during contract creation via the constructor, determines whether rewards can be sent (likely by the contract owner).", "functions": [{"name": "setAddresses", "summary": "Sets the addresses for the staking token, reward token, and stable base contract. Callable only by the owner.", "inputs": ["address _stakingToken", "address _rewardToken", "address _stableBaseContract"], "outputs": ["None"]}, {"name": "stake", "summary": "Allows a user to stake a specified amount of the staking token.", "inputs": ["uint256 _amount"], "outputs": ["None"]}, {"name": "unstake", "summary": "Allows a user to unstake a specified amount of their staked tokens.", "inputs": ["uint256 _amount"], "outputs": ["None"]}, {"name": "addReward", "summary": "Adds rewards to the contract for distribution to stakers. Callable only by the owner.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "addCollateralReward", "summary": "Adds collateral rewards to the contract for distribution to stakers. Callable only by the owner.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "_claim", "summary": "Internal function for processing reward claims for a given user.", "inputs": ["Stake storage user"], "outputs": ["None"]}, {"name": "claim", "summary": "Allows a user to claim their accumulated rewards.", "inputs": [], "outputs": ["None"]}, {"name": "getStake", "summary": "Returns the stake information for a given user address.", "inputs": ["address user"], "outputs": ["None"]}, {"name": "userPendingReward", "summary": "Returns the pending reward for a given user address.", "inputs": ["address user"], "outputs": ["None"]}], "is_deployable": true, "constructor": "constructor(bool _rewardSenderActive) Ownable(msg.sender) {\n        rewardSenderActive = _rewardSenderActive;\n    }"}, {"name": "DFIREToken", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/DFIREToken.sol", "type": "contract", "summary": "The contract is a standard ERC20 token with the added functionality of minting and burning tokens by authorized accounts. It also allows setting the address of a stability pool, potentially for use in decentralized finance (DeFi) protocols.", "functions": [{"name": "setAddresses", "summary": "Sets the address of the stability pool.", "inputs": ["address _stabilityPool"], "outputs": []}, {"name": "mint", "summary": "Mints new tokens to a specified address.", "inputs": ["address to", "uint256 amount"], "outputs": []}, {"name": "burn", "summary": "Burns tokens from a specified address.", "inputs": ["address from", "uint256 amount"], "outputs": []}], "is_deployable": true, "constructor": "constructor() Ownable(msg.sender) ERC20(\"D.FIRE\", \"DFIRE\") {}"}, {"name": "MockDebtContract", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/MockDebtContract.sol", "type": "contract", "summary": "The MockDebtContract is designed to simulate debt management within a DeFi ecosystem. It allows setting a pool address, adding rewards, and liquidating debt based on provided amounts and collateral. Its primary functions revolve around managing debt and reward distribution.", "functions": [{"name": "setPool", "summary": "Sets the pool address.", "inputs": ["address _pool"], "outputs": []}, {"name": "addReward", "summary": "Adds rewards to the contract.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "liquidate", "summary": "Liquidates debt based on the provided amount and collateral, returning a value.", "inputs": ["uint256 amount", "uint256 collateral"], "outputs": ["uint256"]}], "is_deployable": true, "constructor": "constructor(address _stakingToken) { stakingToken = IERC20(_stakingToken); }"}, {"name": "IMintableToken", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StabilityPool.sol", "type": "interface", "summary": "This interface defines a function to mint new tokens, allowing an authorized account to create tokens and assign them to a specified address.", "functions": [{"name": "mint", "summary": "Mints new tokens and assigns them to the specified address.", "inputs": ["address to: The address to receive the newly minted tokens", "uint256 amount: The amount of tokens to mint"], "outputs": ["bool: True if the minting was successful, false otherwise"]}], "is_deployable": false, "constructor": "null"}, {"name": "IRewardSender", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StabilityPool.sol", "type": "interface", "summary": "This interface defines a contract that allows setting whether the Stability Pool can receive rewards. It likely plays a role in controlling the distribution of rewards within a DeFi system, specifically allowing or disallowing the Stability Pool from receiving them.", "functions": [{"name": "setCanStabilityPoolReceiveRewards", "summary": "Sets whether the Stability Pool can receive rewards. Returns true if the operation was successful, false otherwise.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}], "is_deployable": false, "constructor": "null"}, {"name": "StabilityPool", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StabilityPool.sol", "type": "contract", "summary": "The StabilityPool contract allows users to stake tokens and receive rewards, including collateral rewards. It also supports liquidations. The contract manages user stakes, reward distribution, and interactions with other contracts such as staking token, stable base CDP, and SBR token.", "functions": [{"name": "setAddresses", "summary": "Sets the addresses for the staking token, stable base CDP, and SBR token.", "inputs": ["address _stakingToken", "address _stableBaseCDP", "address _sbrToken"], "outputs": []}, {"name": "stake", "summary": "Allows a user to stake a specified amount of tokens.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "unstake", "summary": "Allows a user to unstake a specified amount of tokens.", "inputs": ["uint256 amount"], "outputs": []}, {"name": "stake", "summary": "Allows a user to stake a specified amount of tokens, specifying a frontend and fee.", "inputs": ["uint256 _amount", "address frontend", "uint256 fee"], "outputs": []}, {"name": "unstake", "summary": "Allows a user to unstake a specified amount of tokens, specifying a frontend and fee.", "inputs": ["uint256 _amount", "address frontend", "uint256 fee"], "outputs": []}, {"name": "_claim", "summary": "Claims rewards for a user, considering frontend and fee.", "inputs": ["UserInfo storage user", "address frontend", "uint256 fee"], "outputs": []}, {"name": "_addSBRRewards", "summary": "Adds SBR rewards.", "inputs": [], "outputs": []}, {"name": "claim", "summary": "Allows a user to claim their rewards.", "inputs": [], "outputs": []}, {"name": "claim", "summary": "Allows a user to claim their rewards, specifying a frontend and fee.", "inputs": ["address frontend", "uint256 fee"], "outputs": []}, {"name": "addReward", "summary": "Adds rewards to the contract.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "addCollateralReward", "summary": "Adds collateral rewards to the contract.", "inputs": ["uint256 amount"], "outputs": ["bool"]}, {"name": "isLiquidationPossible", "summary": "Checks if a liquidation is possible for a given amount.", "inputs": ["uint256 amount"], "outputs": []}, {"name": "performLiquidation", "summary": "Performs a liquidation for a given amount and collateral.", "inputs": ["uint256 amount", "uint256 collateral"], "outputs": []}, {"name": "_updateUserStake", "summary": "Updates a user's stake.", "inputs": ["UserInfo storage user"], "outputs": []}, {"name": "_updateRewards", "summary": "Updates rewards for a user, considering frontend and fee.", "inputs": ["UserInfo storage user", "address frontend", "uint256 fee"], "outputs": []}, {"name": "userPendingRewardAndCollateral", "summary": "Returns a user's pending reward and collateral.", "inputs": ["UserInfo storage user"], "outputs": []}, {"name": "userPendingReward", "summary": "Returns a user's pending reward.", "inputs": ["UserInfo storage user"], "outputs": []}, {"name": "userPendingCollateral", "summary": "Returns a user's pending collateral.", "inputs": ["UserInfo storage user"], "outputs": []}, {"name": "userPendingReward", "summary": "Returns a user's pending reward.", "inputs": ["address _user"], "outputs": ["uint256"]}, {"name": "userPendingCollateral", "summary": "Returns a user's pending collateral.", "inputs": ["address _user"], "outputs": ["uint256"]}, {"name": "userPendingRewardAndCollateral", "summary": "Returns a user's pending reward and collateral.", "inputs": ["address _user"], "outputs": ["uint256", "uint256", "uint256"]}, {"name": "_getUserEffectiveStake", "summary": "Calculates the effective stake for a given user", "inputs": ["UserInfo memory user"], "outputs": []}, {"name": "getUser", "summary": "Retrieves user information.", "inputs": ["address _user"], "outputs": ["UserInfo memory user"]}], "is_deployable": true, "constructor": "constructor(bool _rewardSenderActive) Ownable(msg.sender) {\n        rewardSenderActive = _rewardSenderActive;\n    }"}, {"name": "IMintableToken", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StableBase.sol", "type": "interface", "summary": "This interface defines the basic functions for a mintable token, allowing for the creation (minting) and destruction (burning) of tokens. It provides a standard way for contracts to interact with tokens that have minting and burning capabilities. Since the contract type is an interface, it cannot be deployed.", "functions": [{"name": "mint", "summary": "Mints new tokens and assigns them to a specified address. Can only be called by authorized minters.", "inputs": ["address to: The recipient address for the newly minted tokens.", "uint256 amount: The quantity of tokens to be minted."], "outputs": ["bool: True if the minting was successful, false otherwise."]}, {"name": "burn", "summary": "Burns (destroys) tokens from a specified address, reducing the total supply. Can only be called by authorized burners.", "inputs": ["address from: The address from which the tokens will be burned.", "uint256 amount: The quantity of tokens to be burned."], "outputs": ["bool: True if the burning was successful, false otherwise."]}], "is_deployable": false, "constructor": "null"}, {"name": "StableBase", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StableBase.sol", "type": "abstract", "summary": "The `StableBase` contract is an abstract contract providing core functionality for managing safes, liquidations, and redemptions within a stablecoin system. It handles borrowing, fee distribution, and interactions with other key contracts like the price oracle and stability pool. It defines the basic structure and functions for derived contracts to implement specific stablecoin mechanisms.", "functions": [{"name": "setAddresses", "summary": "Sets the addresses of various contracts and components used by the StableBase contract.", "inputs": ["address _sbdToken", "address _priceOracle", "address _stabilityPool", "address _dfireTokenStaking", "address _safesOrderedForLiquidation", "address _safesOrderedForRedemption"], "outputs": ["None"]}, {"name": "handleBorrow", "summary": "Handles the borrowing process for a safe, taking into account various parameters like safe ID, amount, and queue positions.", "inputs": ["uint256 safeId", "Safe storage safe", "uint256 amount", "uint256 shieldingRate", "uint256 nearestSpotInLiquidationQueue", "uint256 nearestSpotInRedemptionQueue"], "outputs": ["None"]}, {"name": "min", "summary": "Returns the minimum of two unsigned integers.", "inputs": ["uint256 a", "uint256 b"], "outputs": ["uint256"]}, {"name": "calculateRedemptionAmountsAndFee", "summary": "Calculates the amounts and fees involved in redeeming collateral, considering borrow mode and collateral price.", "inputs": ["Safe memory safe", "uint256 amountToRedeem", "uint256 collateralPrice"], "outputs": ["bool borrowMode", "uint256 _collateralToRedeem", "uint256 _amountToRedeem", "uint256 _amountToRefund", "uint256 _ownerFee", "uint256 _redeemerFee"]}, {"name": "_redeemNode", "summary": "Redeems a single node/safe in the redemption queue.", "inputs": ["uint256 _safeId", "SBStructs.Redemption memory redemption", "uint256 nearestSpotInLiquidationQueue"], "outputs": ["None"]}, {"name": "_redeemSafes", "summary": "Redeems multiple safes based on a redemption struct and liquidation queue position.", "inputs": ["SBStructs.Redemption memory redemption", "uint256 nearestSpotInLiquidationQueue"], "outputs": ["None"]}, {"name": "closeToZero", "summary": "Checks if a given value is close to zero.", "inputs": ["uint256 value"], "outputs": ["bool"]}, {"name": "redeemSafe", "summary": "Redeems a specific safe, considering borrow mode, amounts, collateral, and queue position.", "inputs": ["uint256 _safeId", "bool borrowMode", "uint256 amountToRedeem", "uint256 amountToRefund", "uint256 collateralToRedeem", "uint256 collateralToReturn", "Safe memory safe", "uint256 nearestSpotInLiquidationQueue", "SBStructs.Redemption memory redemption"], "outputs": ["None"]}, {"name": "_redeemToUser", "summary": "Redeems tokens or collateral to a user based on a redemption struct.", "inputs": ["SBStructs.Redemption memory redemption"], "outputs": ["None"]}, {"name": "distributeFees", "summary": "Distributes fees associated with a safe, potentially minting new tokens.", "inputs": ["uint256 safeId", "uint fee", "bool mint"], "outputs": ["None"]}, {"name": "distributeDebtAndCollateral", "summary": "Distributes debt and collateral after a liquidation event.", "inputs": ["uint256 debtAmount", "uint256 collateralAmount", "uint256 totalCollateralAfterLiquidation"], "outputs": ["None"]}, {"name": "_updateSafe", "summary": "Updates the state of a safe with a given ID.", "inputs": ["uint _safeId", "Safe storage _safe"], "outputs": ["None"]}, {"name": "_updateTotalDebt", "summary": "Updates the total debt, either adding to or subtracting from the current debt.", "inputs": ["uint256 currentDebt", "uint256 delta", "bool add"], "outputs": ["None"]}, {"name": "_liquidate", "summary": "Liquidates a safe with the given ID.", "inputs": ["uint256 _safeId", "uint256 gasStart"], "outputs": ["None"]}, {"name": "_distributeLiquidationFeeAndGasCompensation", "summary": "Distributes liquidation fees and gas compensation after a liquidation event.", "inputs": ["uint256 safeId", "uint256 gasUsed", "uint256 liquidationFee", "uint256 refund"], "outputs": ["None"]}, {"name": "_removeSafe", "summary": "Removes a safe with the given ID.", "inputs": ["uint256 _safeId"], "outputs": ["None"]}, {"name": "_removeSafeFromBothQueues", "summary": "Removes a safe from both liquidation and redemption queues.", "inputs": ["uint256 safeId"], "outputs": ["None"]}, {"name": "setCanStabilityPoolReceiveRewards", "summary": "Sets whether the stability pool can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}, {"name": "setCanSBRStakingPoolReceiveRewards", "summary": "Sets whether the SBR staking pool can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}], "is_deployable": false, "constructor": "constructor() Ownable(msg.sender) ERC721(\"StableBase Safe\", \"SBSafe\") {}"}, {"name": "StableBaseCDP", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StableBaseCDP.sol", "type": "contract", "summary": "Manages Collateralized Debt Positions (CDPs) allowing users to manage their positions, borrow, repay, and handle liquidations.", "functions": [{"name": "openSafe", "summary": "Opens a new CDP (Safe).", "inputs": ["uint256 _safeId", "uint256 _amount"], "outputs": []}, {"name": "closeSafe", "summary": "Closes an existing CDP (Safe).", "inputs": ["uint256 safeId"], "outputs": []}, {"name": "borrow", "summary": "Borrows debt against collateral in a CDP.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 shieldingRate", "uint256 nearestSpotInLiquidationQueue", "uint256 nearestSpotInRedemptionQueue"], "outputs": []}, {"name": "repay", "summary": "Repays debt for a CDP.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "addCollateral", "summary": "Adds collateral to a CDP.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "withdrawCollateral", "summary": "Withdraws collateral from a CDP.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "redeem", "summary": "Redeems debt.", "inputs": ["uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "feeTopup", "summary": "Tops up the fee for a CDP.", "inputs": ["uint256 safeId", "uint256 topupRate", "uint256 nearestSpotInRedemptionQueue"], "outputs": []}, {"name": "liquidate", "summary": "Initiates liquidation.", "inputs": [], "outputs": []}, {"name": "liquidateSafe", "summary": "Liquidates a specific CDP.", "inputs": ["uint256 safeId"], "outputs": []}, {"name": "adjustPosition", "summary": "Adjusts the position of a CDP.", "inputs": ["uint256 safeId", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "getInactiveDebtAndCollateral", "summary": "Gets inactive debt and collateral for a CDP.", "inputs": ["uint256 safeId"], "outputs": ["uint256", "uint256"]}, {"name": "updateTokenURI", "summary": "Updates the token URI.", "inputs": ["uint256 tokenId", "string memory newTokenURI"], "outputs": []}, {"name": "_isApprovedOrOwner", "summary": "Checks if a spender is approved or the owner of a token.", "inputs": ["address spender", "uint256 tokenId"], "outputs": []}], "is_deployable": true, "constructor": "constructor() StableBase() {}"}, {"name": "SBStructs", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/Structures.sol", "type": "library", "summary": "This contract, named SBStructs, is a library designed to provide functionalities related to structs. However, without any defined functions, its specific purpose is unclear, but it generally serves as a collection of data structures and related utilities.", "functions": [], "is_deployable": false, "constructor": "null"}, {"name": "SBUtils", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/Utilities.sol", "type": "library", "summary": "The `SBUtils` library provides utility functions for safe ID generation, depositing and withdrawing ETH or ERC20 tokens, and manipulating compressed rate data. It cannot be deployed on its own.", "functions": [{"name": "getSafeId", "summary": "Computes a unique ID based on the borrower address and token address.", "inputs": ["address _borrower", "address _token"], "outputs": ["uint256"]}, {"name": "depositEthOrToken", "summary": "Deposits either ETH or a specified ERC20 token to a given address.  The function determines whether to deposit ETH or ERC20 tokens based on the token address.", "inputs": ["address _token", "address _to", "uint256 _amount"], "outputs": []}, {"name": "withdrawEthOrToken", "summary": "Withdraws either ETH or a specified ERC20 token to a given address. The function determines whether to withdraw ETH or ERC20 tokens based on the token address.", "inputs": ["address _token", "address _to", "uint256 _amount"], "outputs": []}, {"name": "getRateAtPosition", "summary": "Extracts a rate value from a compressed rate representation at a specific position.", "inputs": ["uint256 _compressedRate", "uint256 _position"], "outputs": ["uint256"]}], "is_deployable": false, "constructor": "None"}, {"name": "ChainlinkPriceFeed", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/dependencies/price-oracle/ChainlinkPriceOracle.sol", "type": "contract", "summary": "This contract fetches price data from Chainlink price feeds for different Ethereum networks. It uses the AggregatorV3Interface to interact with the Chainlink price feeds. The constructor sets the appropriate price feed address based on the chain ID provided during deployment.", "functions": [{"name": "lastGoodPrice", "summary": "Returns the last good price.", "inputs": [], "outputs": ["uint256"]}, {"name": "fetchPrice", "summary": "Fetches the latest price from the Chainlink price feed.", "inputs": [], "outputs": ["uint256"]}], "is_deployable": true, "constructor": "constructor(uint256 chainId) {\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            priceFeed = AggregatorV3Interface(\n                0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n            );\n        } else if (chainId == 11155111) {\n            // Sepolia Testnet\n            priceFeed = AggregatorV3Interface(\n                0x694AA1769357215DE4FAC081bf1f309aDC325306\n            );\n        } else if (chainId == 5) {\n            // Goerli Testnet (if needed)\n            priceFeed = AggregatorV3Interface(\n                0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n            );\n        } else {\n            revert(\"Unsupported chain ID\");\n        }\n    }"}, {"name": "MockPriceOracle", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/dependencies/price-oracle/MockPriceOracle.sol", "type": "contract", "summary": "This contract is a mock price oracle that allows the owner to set the price and provides functions to fetch the current and last good prices.", "functions": [{"name": "setPrice", "summary": "Allows the owner to set the price.", "inputs": ["uint256 _price"], "outputs": ["void"]}, {"name": "lastGoodPrice", "summary": "Returns the last good price.", "inputs": [], "outputs": ["uint256"]}, {"name": "fetchPrice", "summary": "Returns the current price.", "inputs": [], "outputs": ["uint256"]}], "is_deployable": true, "constructor": "constructor() Ownable(msg.sender) {  Initializes the Ownable contract, setting the deployer as the owner. }"}, {"name": "IDFIREStaking", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IDFIREStaking.sol", "type": "interface", "summary": "The IDFIREStaking interface defines the functions for staking, unstaking, claiming rewards, and adding rewards to a staking contract. It allows users to stake and unstake tokens, claim accumulated rewards, and provides functions for the contract owner to add rewards to the staking pool.", "functions": [{"name": "stake", "summary": "Allows a user to stake a specified amount of tokens.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "unstake", "summary": "Allows a user to unstake a specified amount of tokens.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "claim", "summary": "Allows a user to claim their accumulated rewards.", "inputs": [], "outputs": []}, {"name": "addReward", "summary": "Allows the contract owner to add rewards to the staking pool.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "addCollateralReward", "summary": "Allows the contract owner to add collateral rewards.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "getStake", "summary": "Retrieves the stake information for a given user.", "inputs": ["address user"], "outputs": ["Stake memory stake"]}, {"name": "userPendingReward", "summary": "Retrieves the pending rewards for a given user.", "inputs": ["address user"], "outputs": ["uint256, uint256"]}], "is_deployable": false, "constructor": "null"}, {"name": "IDoublyLinkedList", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IDoublyLinkedList.sol", "type": "interface", "summary": "The IDoublyLinkedList interface defines the functions for managing a doubly linked list. It allows to insert/update nodes (`upsert`), remove nodes (`remove`), retrieve nodes (`get`), and get the head (`getHead`) and tail (`getTail`) of the list. It provides an abstract definition for interacting with a doubly linked list structure.", "functions": [{"name": "remove", "summary": "Removes a node from the list given its ID.", "inputs": ["uint256 id: The ID of the node to remove."], "outputs": ["Node memory: The removed node."]}, {"name": "get", "summary": "Retrieves a node from the list given its ID.", "inputs": ["uint256 id: The ID of the node to retrieve."], "outputs": ["Node memory: The node with the given ID."]}, {"name": "upsert", "summary": "Inserts or updates a node in the list. If a node with the given ID exists, it updates the node's value. Otherwise, it inserts a new node.", "inputs": ["uint256 id: The ID of the node to insert/update.", "uint256 value: The value to store in the node.", "uint256 _nearestSpot: The nearest spot to insert the value"], "outputs": ["Node memory: The inserted/updated node."]}, {"name": "getHead", "summary": "Returns the ID of the head node in the list.", "inputs": [], "outputs": ["uint256: The ID of the head node."]}, {"name": "getTail", "summary": "Returns the ID of the tail node in the list.", "inputs": [], "outputs": ["uint256: The ID of the tail node."]}], "is_deployable": false, "constructor": "null"}, {"name": "IPriceOracle", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IPriceOracle.sol", "type": "interface", "summary": "The `IPriceOracle` interface defines the functions necessary to retrieve price data. It includes functions to fetch the latest price (`fetchPrice`) and retrieve the last known good price (`lastGoodPrice`). Based on the contract name and functions, the purpose of the contract is to provide an interface for accessing price feeds or price oracles.", "functions": [{"name": "lastGoodPrice", "summary": "Returns the last known good price.", "inputs": [], "outputs": ["uint256"]}, {"name": "fetchPrice", "summary": "Fetches the latest price.", "inputs": [], "outputs": ["uint256"]}], "is_deployable": false, "constructor": "null"}, {"name": "IRateGovernors", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IRateGovernors.sol", "type": "interface", "summary": "This interface defines functions for managing staking, shielding rates, and reserve ratios, likely related to a rate governance system. It includes functions for adding, removing, and retrieving stakes, as well as updating parameters related to shielding and reserves. Because it's an interface, it's not deployable.", "functions": [{"name": "updateTargetShieldingRate", "summary": "Updates the target shielding rate for a specific ID.", "inputs": ["uint256 id", "uint256 _targetShieldingRate"], "outputs": ["None"]}, {"name": "updateReserveRatio", "summary": "Updates the reserve ratio.", "inputs": ["uint256 _reserveRatio"], "outputs": ["None"]}, {"name": "redeem", "summary": "Redeems something, but the specific action isn't clear from the interface.", "inputs": [], "outputs": ["None"]}, {"name": "addStake", "summary": "Adds stake for a specific ID with a given amount.", "inputs": ["uint256 id", "uint256 amount"], "outputs": ["None"]}, {"name": "getStake", "summary": "Retrieves the stake for a specific ID.", "inputs": ["uint256 id"], "outputs": ["uint256"]}, {"name": "removeStake", "summary": "Removes a specified amount of stake for a specific ID, returning success and the remaining stake.", "inputs": ["uint256 id", "uint256 amount"], "outputs": ["bool, uint256"]}, {"name": "removeStake", "summary": "Removes all stake for a specific ID, returning success and the remaining stake (likely 0).", "inputs": ["uint256 id"], "outputs": ["bool, uint256"]}], "is_deployable": false, "constructor": "null"}, {"name": "IReservePool", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IReservePool.sol", "type": "interface", "summary": "This contract defines the interface for interacting with a reserve pool. It allows users to add stake, get stake amount, and remove stake from the pool. Since it is an interface, it is not deployable.", "functions": [{"name": "addStake", "summary": "Adds stake to a specified staking pool.", "inputs": ["uint256 id", "uint256 amount"], "outputs": []}, {"name": "getStake", "summary": "Retrieves the stake amount for a specified staking pool.", "inputs": ["uint256 id"], "outputs": ["uint256"]}, {"name": "removeStake", "summary": "Removes a specified amount of stake from a staking pool.", "inputs": ["uint256 id", "uint256 amount"], "outputs": ["bool, uint256"]}, {"name": "removeStake", "summary": "Removes all stake from a specified staking pool.", "inputs": ["uint256 id"], "outputs": ["bool, uint256"]}], "is_deployable": false, "constructor": "None"}, {"name": "IStabilityPool", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IStabilityPool.sol", "type": "interface", "summary": "The IStabilityPool interface defines the functions for interacting with a stability pool. It allows users to stake and unstake tokens, claim rewards, liquidate positions, and add rewards to the pool. It also provides functions to retrieve user information and pending rewards.", "functions": [{"name": "stake", "summary": "Allows a user to stake a specified amount of tokens into the stability pool.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "stake", "summary": "Allows a user to stake a specified amount of tokens into the stability pool, specifying a frontend address and a fee.", "inputs": ["uint256 _amount", "address _frontend", "uint256 fee"], "outputs": []}, {"name": "unstake", "summary": "Allows a user to unstake a specified amount of tokens from the stability pool.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "unstake", "summary": "Allows a user to unstake a specified amount of tokens from the stability pool, specifying a frontend address and a fee.", "inputs": ["uint256 _amount", "address _frontend", "uint256 fee"], "outputs": []}, {"name": "claim", "summary": "Allows a user to claim their accumulated rewards from the stability pool.", "inputs": [], "outputs": []}, {"name": "claim", "summary": "Allows a user to claim their accumulated rewards from the stability pool, specifying a frontend address and a fee.", "inputs": ["address _frontend", "uint256 fee"], "outputs": []}, {"name": "isLiquidationPossible", "summary": "Checks if a liquidation is possible for a given amount.", "inputs": ["uint256 amount"], "outputs": ["bool"]}, {"name": "performLiquidation", "summary": "Performs a liquidation for a given amount and collateral.", "inputs": ["uint256 amount", "uint256 collateral"], "outputs": ["bool"]}, {"name": "addReward", "summary": "Adds rewards to the stability pool.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "addCollateralReward", "summary": "Adds collateral rewards to the stability pool.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "getUser", "summary": "Retrieves information about a specific user in the stability pool.", "inputs": ["address user"], "outputs": ["UserInfo memory userInfo"]}, {"name": "userPendingReward", "summary": "Retrieves the amount of pending rewards for a specific user.", "inputs": ["address user"], "outputs": ["uint256"]}, {"name": "userPendingCollateral", "summary": "Retrieves the amount of pending collateral for a specific user.", "inputs": ["address user"], "outputs": ["uint256"]}], "is_deployable": false, "constructor": "This contract is an interface and does not have a constructor."}, {"name": "IStableBase", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IStableBase.sol", "type": "interface", "summary": "The IStableBase interface defines the core functions for a stablecoin system, including opening and closing safes (vaults), borrowing, repaying, adding and withdrawing collateral, redeeming, topping up fees, liquidating, and managing rewards for stability and staking pools. It also provides a function to retrieve inactive debt and collateral for a safe.", "functions": [{"name": "openSafe", "summary": "Opens a new safe with a specified ID and initial collateral amount.", "inputs": ["uint256 _safeId", "uint256 _amount"], "outputs": []}, {"name": "closeSafe", "summary": "Closes an existing safe with the specified ID.", "inputs": ["uint256 _safeId"], "outputs": []}, {"name": "borrow", "summary": "Borrows a specified amount from a safe, considering shielding rate and positions in liquidation/redemption queues.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 shieldingRate", "uint256 nearestSpotInLiquidationQueue", "uint256 nearestSpotInRedemptionQueue"], "outputs": []}, {"name": "repay", "summary": "Repays a specified amount to a safe, considering its position in the liquidation queue.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "addCollateral", "summary": "Adds collateral to a safe, considering its position in the liquidation queue.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "withdrawCollateral", "summary": "Withdraws collateral from a safe, considering its position in the liquidation queue.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "redeem", "summary": "Redeems a specified amount, considering the position in the liquidation queue.", "inputs": ["uint256 _amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "feeTopup", "summary": "Tops up fees for a safe, considering the top-up rate and position in the redemption queue.", "inputs": ["uint256 safeId", "uint256 topupRate", "uint256 nearestSpotInRedemptionQueue"], "outputs": []}, {"name": "liquidate", "summary": "Liquidates safes.", "inputs": [], "outputs": []}, {"name": "getInactiveDebtAndCollateral", "summary": "Retrieves the inactive debt and collateral for a given safe ID.", "inputs": ["uint256 safeId"], "outputs": ["uint256, uint256"]}, {"name": "setCanStabilityPoolReceiveRewards", "summary": "Sets whether the stability pool can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}, {"name": "setCanSBRStakingPoolReceiveRewards", "summary": "Sets whether the SBR staking pool can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}], "is_deployable": false, "constructor": "null"}, {"name": "IStableBaseCDP", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IStableBaseCDP.sol", "type": "interface", "summary": "The IStableBaseCDP interface defines the functions for managing Collateralized Debt Positions (CDPs) within a stablecoin system. It includes functionalities for opening, closing, borrowing, repaying, withdrawing collateral, redeeming, and liquidating CDPs. It also provides functions for updating reserve ratios, origination fees, and setting reward eligibility for stability pools and SBR staking.", "functions": [{"name": "openSafe", "summary": "Opens a new CDP (Collateralized Debt Position) with specified collateral token, amount, reserve ratio and position in reserve.", "inputs": ["address collateralToken", "uint256 amount", "uint256 reserveRatio", "uint256 positionInReserve"], "outputs": []}, {"name": "closeSafe", "summary": "Closes an existing CDP for a specific collateral token.", "inputs": ["address collateralToken"], "outputs": []}, {"name": "borrow", "summary": "Borrows a specified amount of debt against a specific collateral token.", "inputs": ["address collateralToken", "uint256 amount"], "outputs": []}, {"name": "repay", "summary": "Repays a specified amount of debt for a specific collateral token.", "inputs": ["address collateralToken", "uint256 amount"], "outputs": []}, {"name": "withdrawCollateral", "summary": "Withdraws a specified amount of collateral for a specific collateral token.", "inputs": ["address collateralToken", "uint256 amount"], "outputs": []}, {"name": "redeem", "summary": "Redeems a specified amount.", "inputs": ["uint256 amount"], "outputs": []}, {"name": "liquidate", "summary": "Liquidates a CDP with a given ID.", "inputs": ["uint256 id"], "outputs": []}, {"name": "repayAndLiquidate", "summary": "Repays debt and liquidates a CDP with a given ID.", "inputs": ["uint256 id"], "outputs": []}, {"name": "updateReserveRatio", "summary": "Updates the reserve ratio and position in reserve for a specific collateral token.", "inputs": ["address collateralToken", "uint256 newReserveRatio", "uint256 newPositionInReserve"], "outputs": []}, {"name": "updateOriginationFee", "summary": "Updates the origination fee for a specific collateral token.", "inputs": ["address collateralToken", "uint256 newOriginationFee"], "outputs": []}, {"name": "setStabilityPoolCanReceiveRewards", "summary": "Sets whether the stability pool can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": []}, {"name": "setSBRStakingCanReceiveRewards", "summary": "Sets whether the SBR staking contract can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": []}], "is_deployable": false, "constructor": "null"}, {"name": "Math", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/library/Math.sol", "type": "library", "summary": "This contract provides mathematical functions, likely related to rate calculations, time conversions, and potentially weighted adjustments to rates. It operates on a custom data structure 'Rate'.", "functions": [{"name": "calculateRate", "summary": "This function likely calculates a rate based on the input 'rate' of type 'Rate'. The specific calculation is unknown without the implementation details.", "inputs": ["Rate memory rate"], "outputs": ["null"]}, {"name": "add", "summary": "This function likely adds a value weighted by a certain amount to a rate. The 'Rate' struct is updated in memory.", "inputs": ["Rate memory rate", "uint256 value", "uint256 weight"], "outputs": ["null"]}, {"name": "subtract", "summary": "This function likely subtracts a value weighted by a certain amount from a rate. The 'Rate' struct is updated in memory.", "inputs": ["Rate memory rate", "uint256 value", "uint256 weight"], "outputs": ["null"]}, {"name": "isZero", "summary": "This function likely checks if the provided 'Rate' is zero or some other defined zero value. It probably returns a boolean but the return is not explicitly defined in the provided data.", "inputs": ["Rate memory rate"], "outputs": ["null"]}, {"name": "getShieldingHours", "summary": "This function calculates shielding hours based on a reference rate and a current rate. The calculation details depend on the implementation.", "inputs": ["Rate memory referenceRate", "uint256 currentRate"], "outputs": ["null"]}, {"name": "toSeconds", "summary": "This function converts a given number of hours to seconds.", "inputs": ["uint256 hours_"], "outputs": ["null"]}], "is_deployable": false, "constructor": "null"}, {"name": "OrderedDoublyLinkedList", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/library/OrderedDoublyLinkedList.sol", "type": "contract", "summary": "This contract implements an ordered doubly linked list, enabling insertion, removal, update, and retrieval of nodes, ordered by their IDs. It also provides functionalities to access the head and tail of the list, and to retrieve nodes in batches. The contract inherits from `Ownable`, indicating access control based on ownership.", "functions": [{"name": "setAddresses", "summary": "Sets the address of the stable base CDP contract, likely for interaction with another contract.", "inputs": ["address _stableBaseCDP"], "outputs": []}, {"name": "_insert", "summary": "Inserts a new node into the doubly linked list using a provided `Node` struct. `_nearestSpot` may optimize insertion location.", "inputs": ["uint256 id", "Node memory node", "uint256 _nearestSpot"], "outputs": []}, {"name": "_insert", "summary": "Inserts a new node into the doubly linked list using a `uint256` value for the node's data. `_nearestSpot` may optimize insertion location.", "inputs": ["uint256 id", "uint256 value", "uint256 _nearestSpot"], "outputs": []}, {"name": "_remove", "summary": "Removes a node from the doubly linked list based on its ID.", "inputs": ["uint256 id"], "outputs": []}, {"name": "_update", "summary": "Updates the value of an existing node in the doubly linked list. `_nearestSpot` may optimize the update process.", "inputs": ["uint256 id", "uint256 value", "uint256 _nearestSpot"], "outputs": []}, {"name": "upsert", "summary": "Either inserts a new node or updates an existing one. `_nearestSpot` is passed to potentially optimize the location.", "inputs": ["uint256 id", "uint256 value", "uint256 _nearestSpot"], "outputs": []}, {"name": "remove", "summary": "Removes a node from the doubly linked list based on its ID.", "inputs": ["uint256 id"], "outputs": []}, {"name": "get", "summary": "Retrieves the value of a node from the list based on the provided ID.", "inputs": ["uint256 id"], "outputs": []}, {"name": "getHead", "summary": "Retrieves the ID of the head (first) node in the list.", "inputs": [], "outputs": []}, {"name": "getTail", "summary": "Retrieves the ID of the tail (last) node in the list.", "inputs": [], "outputs": []}, {"name": "getNode", "summary": "Retrieves the complete `Node` struct based on its ID.", "inputs": ["uint256 id"], "outputs": ["Node memory"]}, {"name": "getNodes", "summary": "Retrieves a batch of `Node` structs, starting from `beginAt`, up to `total` number of nodes (with a maximum of 50). It also returns the total number of nodes found.", "inputs": ["uint256 beginAt", "uint256 total"], "outputs": ["Node[50] memory n", "uint256 totalFound"]}], "is_deployable": true, "constructor": "constructor() Ownable(msg.sender) { head = 0; tail = 0; }"}, {"name": "RateLib", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/library/Rate.sol", "type": "library", "summary": "The RateLib contract is a library designed to perform calculations and operations on rate data, represented by the Math.Rate struct. It provides functions to calculate a rate, add to a rate, subtract from a rate, and check if a rate is zero. The visibility of the functions is not specified in the provided data.", "functions": [{"name": "calculateRate", "summary": "Calculates a rate based on the input rate data.", "inputs": ["Math.Rate memory rate"], "outputs": ["None"]}, {"name": "add", "summary": "Adds a value with a given weight to the rate.", "inputs": ["Math.Rate memory rate", "uint256 value", "uint256 weight"], "outputs": ["None"]}, {"name": "subtract", "summary": "Subtracts a value with a given weight from the rate.", "inputs": ["Math.Rate memory rate", "uint256 value", "uint256 weight"], "outputs": ["None"]}, {"name": "isZero", "summary": "Checks if the given rate is zero.", "inputs": ["Math.Rate memory rate"], "outputs": ["None"]}], "is_deployable": false, "constructor": "No constructor."}, {"name": "ReenterDfireStaking", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/test/ReenterDfireStaking.sol", "type": "contract", "summary": "The contract `ReenterDfireStaking` is designed to interact with a DFIRE staking contract, potentially exploiting reentrancy vulnerabilities. It allows a user to stake, unstake, and claim rewards from the DFIRE staking contract. It is deployable because the contract type is 'contract'.", "functions": [{"name": "stake1", "summary": "The function `stake1` calls the `stake` function of the `dfireStaking` contract, potentially re-entering it based on the value of `_reenterFunction`. `_reenterFunction` is a uint256 value used to control reentrancy.", "inputs": ["uint256 _reenterFunction"], "outputs": []}, {"name": "stake2", "summary": "The function `stake2` calls the `stake` function of the `dfireStaking` contract with a specified amount, potentially re-entering it based on the value of `_reenterFunction`. `_reenterFunction` is a uint256 value used to control reentrancy, and `amount` is the amount to stake.", "inputs": ["uint256 _reenterFunction", "uint256 amount"], "outputs": []}, {"name": "unstake", "summary": "The function `unstake` calls the `unstake` function of the `dfireStaking` contract, potentially re-entering it based on the value of `_reenterFunction`. `_reenterFunction` is a uint256 value used to control reentrancy.", "inputs": ["uint256 _reenterFunction"], "outputs": []}, {"name": "claim", "summary": "The function `claim` calls the `claim` function of the `dfireStaking` contract, potentially re-entering it based on the value of `_reenterFunction`. `_reenterFunction` is a uint256 value used to control reentrancy.", "inputs": ["uint256 _reenterFunction"], "outputs": []}], "is_deployable": true, "constructor": "constructor(address _dfireStaking, address _dfireStakingToken) {\n        dfireStaking = IDFIREStaking(_dfireStaking);\n        stakeToken = IERC20(_dfireStakingToken);\n    }"}, {"name": "ReenterStabilityPool", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/test/ReenterStabilityPool.sol", "type": "contract", "summary": "This contract, named ReenterStabilityPool, is designed for reentrancy vulnerability testing in the context of a StabilityPool and a stake token. It allows calling functions of the StabilityPool contract in a reentrant way, specifically functions such as stake, unstake, and claim. The constructor takes the StabilityPool address and stake token address as arguments, and it implements stake1, stake2, unstake, and claim functions to demonstrate reentrancy.", "functions": [{"name": "stake1", "summary": "This function facilitates reentrancy vulnerability testing by calling the `deposit` function on the StabilityPool contract a number of times defined by the `_reenterFunction` parameter. Note: the contract needs to hold stake tokens for this function to execute without errors. It calls the `deposit` function of the stability pool (IStabilityPool).", "inputs": ["uint256 _reenterFunction"], "outputs": []}, {"name": "stake2", "summary": "This function facilitates reentrancy vulnerability testing by calling the `deposit` function with amount parameter on the StabilityPool contract a number of times defined by the `_reenterFunction` parameter. It calls the `deposit` function of the stability pool (IStabilityPool), using the parameter `amount`. Note: the contract needs to hold stake tokens for this function to execute without errors. ", "inputs": ["uint256 _reenterFunction", "uint256 amount"], "outputs": []}, {"name": "unstake", "summary": "This function facilitates reentrancy vulnerability testing by calling the `withdraw` function on the StabilityPool contract a number of times defined by the `_reenterFunction` parameter. It calls the `withdraw` function of the stability pool (IStabilityPool).", "inputs": ["uint256 _reenterFunction"], "outputs": []}, {"name": "claim", "summary": "This function facilitates reentrancy vulnerability testing by calling the `withdrawRewards` function on the StabilityPool contract a number of times defined by the `_reenterFunction` parameter. It calls the `withdrawRewards` function of the stability pool (IStabilityPool).", "inputs": ["uint256 _reenterFunction"], "outputs": []}], "is_deployable": true, "constructor": "constructor(address _stabilityPool, address _stakeToken) {\n        stabilityPool = IStabilityPool(_stabilityPool);\n        stakeToken = IERC20(_stakeToken);\n    }"}, {"name": "TestMath", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/tests/TestMath.sol", "type": "contract", "summary": "This contract provides functionality to calculate a rate by adding and subtracting weighted values.  It allows external users to contribute to this rate.", "functions": [{"name": "addValue", "summary": "This function adds a weighted value to a rate calculation.", "inputs": ["uint256 value", "uint256 weight"], "outputs": ["None"]}, {"name": "subtractValue", "summary": "This function subtracts a weighted value from a rate calculation.", "inputs": ["uint256 value", "uint256 weight"], "outputs": ["None"]}, {"name": "calculateRate", "summary": "This function calculates and returns the current rate based on added and subtracted values.", "inputs": [], "outputs": ["uint256"]}], "is_deployable": true, "constructor": "None"}]}