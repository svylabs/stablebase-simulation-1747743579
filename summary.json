{"name": "DFIRE Protocol", "summary": "The DFIRE Protocol is a decentralized finance (DeFi) protocol centered around the DFIRE stablecoin ecosystem. It issues DFID (D.FI.Dollar) tokens, pegged to USD, using a Collateral Debt Position (CDP) mechanism with liquidations and redemptions. Key components include the DFIRE and DFID tokens, DFIREStaking mechanism, Stability Pool, and StableBaseCDP for CDP management. It features a market-determined 'Pay As You Go' model, offering 0% interest rates and origination fees, with a 110% collateral requirement, initially supporting only ETH as collateral. A bootstrap mode disables redemptions until 5 million DFID are borrowed. Stability pool contributors earn DFIRE tokens. DFIRE stakers capture 10% of protocol fees, while stability pool stakers capture 90%. The protocol relies on Chainlink for price feeds, incorporates rate governance and reserve pool mechanisms, and includes reentrancy attack test contracts. Limitations include no governance and immutability.", "type": "stablecoin protocol", "dev_tool": "hardhat", "contracts": [{"name": "Constants", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/Constants.sol", "type": "contract", "summary": "The contract 'Constants' likely defines and stores a collection of constant values, potentially for use in other contracts within the same system. Since the contract type is 'contract', it is considered a concrete implementation and is therefore deployable.", "functions": [], "is_deployable": true, "constructor": "null"}, {"name": "DFIDToken", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/DFIDToken.sol", "type": "contract", "summary": "The DFIDToken contract is an ERC20 token that inherits from Ownable. It allows the owner to mint and burn tokens, and set the address of a stable base CDP. It represents the D.FI Dollar token with the symbol DFID.", "functions": [{"name": "setAddresses", "summary": "Sets the stable base CDP address (external).", "inputs": ["address _stableBaseCDP"], "outputs": []}, {"name": "mint", "summary": "Mints tokens (external).", "inputs": ["address to", "uint256 amount"], "outputs": []}, {"name": "burn", "summary": "Burns tokens (external).", "inputs": ["address from", "uint256 amount"], "outputs": []}], "is_deployable": true, "constructor": "constructor() Ownable(msg.sender) ERC20(\"D.FI Dollar\", \"DFID\") {}"}, {"name": "IRewardSender", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/DFIREStaking.sol", "type": "interface", "summary": "This interface defines a contract that is responsible for sending rewards, and allows setting whether an SBR staking pool can receive rewards.", "functions": [{"name": "setCanSBRStakingPoolReceiveRewards", "summary": "This function sets a boolean flag indicating whether the SBR Staking Pool can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}], "is_deployable": false, "constructor": "null"}, {"name": "DFIREStaking", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/DFIREStaking.sol", "type": "contract", "summary": "The `DFIREStaking` contract allows users to stake a token, earn rewards, and unstake their tokens. It includes functionalities for the owner to set addresses, add rewards, and claim rewards for users.", "functions": [{"name": "setAddresses", "summary": "Sets the addresses for the staking token, reward token, and stable base contract. Only callable by the owner.", "inputs": ["address _stakingToken", "address _rewardToken", "address _stableBaseContract"], "outputs": ["none"]}, {"name": "stake", "summary": "Allows a user to stake a specified amount of the staking token.", "inputs": ["uint256 _amount"], "outputs": ["none"]}, {"name": "unstake", "summary": "Allows a user to unstake a specified amount of the staking token.", "inputs": ["uint256 _amount"], "outputs": ["none"]}, {"name": "addReward", "summary": "Allows the owner to add rewards to the contract.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "addCollateralReward", "summary": "Allows the owner to add collateral rewards to the contract.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "_claim", "summary": "Internal function to handle reward claiming for a user.", "inputs": ["Stake storage user"], "outputs": ["none"]}, {"name": "claim", "summary": "Allows a user to claim their accumulated rewards.", "inputs": [], "outputs": ["none"]}, {"name": "getStake", "summary": "Returns the stake information (amount, start time, etc.) for a given user address.", "inputs": ["address user"], "outputs": ["none"]}, {"name": "userPendingReward", "summary": "Returns the pending reward amount for a given user address.", "inputs": ["address user"], "outputs": ["none"]}], "is_deployable": true, "constructor": "constructor(bool _rewardSenderActive) Ownable(msg.sender) {\n        rewardSenderActive = _rewardSenderActive;\n    }"}, {"name": "DFIREToken", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/DFIREToken.sol", "type": "contract", "summary": "The DFIREToken contract is an ERC20 token that inherits from Ownable, meaning it has an owner who can perform privileged actions. It includes mint and burn functionalities, suggesting it's used as a utility token within a specific ecosystem. The constructor initializes the token with the name 'D.FIRE' and symbol 'DFIRE', and sets the initial owner.", "functions": [{"name": "setAddresses", "summary": "Sets the address of the stability pool, likely for interaction between the token and the pool.", "inputs": ["address _stabilityPool"], "outputs": []}, {"name": "mint", "summary": "Mints new tokens and sends them to the specified address. Only the owner can perform this action.", "inputs": ["address to", "uint256 amount"], "outputs": []}, {"name": "burn", "summary": "Burns tokens from the specified address, reducing the total supply. Only the owner can perform this action.", "inputs": ["address from", "uint256 amount"], "outputs": []}], "is_deployable": true, "constructor": "constructor() Ownable(msg.sender) ERC20(\"D.FIRE\", \"DFIRE\") {}"}, {"name": "MockDebtContract", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/MockDebtContract.sol", "type": "contract", "summary": "The `MockDebtContract` allows setting a pool address, adding rewards, and liquidating debt. It interacts with a staking token (ERC20). It takes the address of the staking token as a constructor argument.", "functions": [{"name": "setPool", "summary": "Sets the pool address.", "inputs": ["address _pool"], "outputs": ["None"]}, {"name": "addReward", "summary": "Adds rewards to the contract.", "inputs": ["uint256 _amount"], "outputs": ["None"]}, {"name": "liquidate", "summary": "Liquidates debt based on provided amount and collateral.", "inputs": ["uint256 amount", "uint256 collateral"], "outputs": ["uint256"]}], "is_deployable": true, "constructor": "constructor(address _stakingToken) {\n        stakingToken = IERC20(_stakingToken);\n    }"}, {"name": "IMintableToken", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StabilityPool.sol", "type": "interface", "summary": "This contract defines the interface for a mintable token, allowing authorized accounts to create new tokens.", "functions": [{"name": "mint", "summary": "Mints new tokens and assigns them to the specified address.", "inputs": ["address to: The address to which the new tokens will be assigned.", "uint256 amount: The amount of tokens to mint."], "outputs": ["bool: True if minting was successful, false otherwise."]}], "is_deployable": false, "constructor": "null"}, {"name": "IRewardSender", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StabilityPool.sol", "type": "interface", "summary": "This interface defines a contract that allows setting whether a stability pool can receive rewards. It exposes a function to control reward reception.", "functions": [{"name": "setCanStabilityPoolReceiveRewards", "summary": "Allows setting whether the stability pool can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}], "is_deployable": false, "constructor": "null"}, {"name": "StabilityPool", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StabilityPool.sol", "type": "contract", "summary": "The StabilityPool contract allows users to stake tokens, earn rewards in the form of SBR tokens and collateral, and participate in liquidations. It manages user stakes, distributes rewards (SBR tokens), and facilitates the liquidation of undercollateralized positions to maintain system solvency. SBR tokens are likely used for governance or further incentivize participation. The constructor initializes the `rewardSenderActive` boolean.", "functions": [{"name": "setAddresses", "summary": "Sets the addresses for the staking token, stable base CDP, and SBR token. These addresses are crucial for the contract's functionality.", "inputs": ["address _stakingToken", "address _stableBaseCDP", "address _sbrToken"], "outputs": []}, {"name": "stake", "summary": "Stakes a specified amount of tokens to the pool.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "unstake", "summary": "Unstakes a specified amount of tokens from the pool.", "inputs": ["uint256 amount"], "outputs": []}, {"name": "stake", "summary": "Stakes a specified amount of tokens to the pool, with frontend address and fee parameters.", "inputs": ["uint256 _amount", "address frontend", "uint256 fee"], "outputs": []}, {"name": "unstake", "summary": "Unstakes a specified amount of tokens from the pool, with frontend address and fee parameters.", "inputs": ["uint256 _amount", "address frontend", "uint256 fee"], "outputs": []}, {"name": "_claim", "summary": "Claims rewards for a user, with frontend address and fee parameters.", "inputs": ["UserInfo storage user", "address frontend", "uint256 fee"], "outputs": []}, {"name": "_addSBRRewards", "summary": "Adds SBR rewards to the pool.", "inputs": [], "outputs": []}, {"name": "claim", "summary": "Claims available rewards.", "inputs": [], "outputs": []}, {"name": "claim", "summary": "Claims available rewards, with frontend address and fee parameters.", "inputs": ["address frontend", "uint256 fee"], "outputs": []}, {"name": "addReward", "summary": "Adds a specified amount of reward tokens to the pool. Returns a boolean indicating success.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "addCollateralReward", "summary": "Adds a specified amount of collateral reward to the pool. Returns a boolean indicating success.", "inputs": ["uint256 amount"], "outputs": ["bool"]}, {"name": "isLiquidationPossible", "summary": "Checks if liquidation is possible for a given amount.", "inputs": ["uint256 amount"], "outputs": []}, {"name": "performLiquidation", "summary": "Performs a liquidation for a given amount and collateral.", "inputs": ["uint256 amount", "uint256 collateral"], "outputs": []}, {"name": "_updateUserStake", "summary": "Updates the user's stake.", "inputs": ["UserInfo storage user"], "outputs": []}, {"name": "_updateRewards", "summary": "Updates rewards for a given user, with frontend address and fee parameters.", "inputs": ["UserInfo storage user", "address frontend", "uint256 fee"], "outputs": []}, {"name": "userPendingRewardAndCollateral", "summary": "Returns the user's pending reward and collateral.", "inputs": ["UserInfo storage user"], "outputs": []}, {"name": "userPendingReward", "summary": "Returns the user's pending reward.", "inputs": ["UserInfo storage user"], "outputs": []}, {"name": "userPendingCollateral", "summary": "Returns the user's pending collateral.", "inputs": ["UserInfo storage user"], "outputs": []}, {"name": "userPendingReward", "summary": "Returns the user's pending reward as a uint256.", "inputs": ["address _user"], "outputs": ["uint256"]}, {"name": "userPendingCollateral", "summary": "Returns the user's pending collateral as a uint256.", "inputs": ["address _user"], "outputs": ["uint256"]}, {"name": "userPendingRewardAndCollateral", "summary": "Returns the user's pending reward and collateral as uint256 values. The first uint256 is reward, the second is collateral, and the third represents something else.", "inputs": ["address _user"], "outputs": ["uint256", "uint256", "uint256"]}, {"name": "_getUserEffectiveStake", "summary": "Returns the effective stake of the user.", "inputs": ["UserInfo memory user"], "outputs": []}, {"name": "getUser", "summary": "Returns the user information.", "inputs": ["address _user"], "outputs": ["UserInfo memory user"]}], "is_deployable": true, "constructor": "constructor(bool _rewardSenderActive) Ownable(msg.sender) {\n        rewardSenderActive = _rewardSenderActive;\n    }"}, {"name": "IMintableToken", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StableBase.sol", "type": "interface", "summary": "The IMintableToken interface defines the basic functionality for a token that can be minted and burned. It includes functions to mint new tokens to a specified address and burn tokens from a specified address.", "functions": [{"name": "mint", "summary": "Mints 'amount' number of tokens to the address 'to'.", "inputs": ["address to", "uint256 amount"], "outputs": ["bool"]}, {"name": "burn", "summary": "Burns 'amount' number of tokens from the address 'from'.", "inputs": ["address from", "uint256 amount"], "outputs": ["bool"]}], "is_deployable": false, "constructor": "null"}, {"name": "StableBase", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StableBase.sol", "type": "abstract", "summary": "This abstract contract manages and interacts with 'Safes' (collateralized debt positions). It handles borrowing, liquidation, and redemption of assets. It manages key contract addresses, updates safe states, distributes fees, and interacts with debt and collateral. It's not deployable because it is an abstract contract.", "functions": [{"name": "setAddresses", "summary": "Sets the addresses for various key contracts within the system.", "inputs": ["address _sbdToken: The address of the SBD token contract.", "address _priceOracle: The address of the price oracle contract.", "address _stabilityPool: The address of the stability pool contract.", "address _dfireTokenStaking: The address of the DFIRE token staking contract.", "address _safesOrderedForLiquidation: The address of the contract managing safes ordered for liquidation.", "address _safesOrderedForRedemption: The address of the contract managing safes ordered for redemption."], "outputs": ["No value returned"]}, {"name": "handleBorrow", "summary": "Handles the borrowing process for a given 'Safe'.", "inputs": ["uint256 safeId: The ID of the Safe.", "Safe storage safe: The Safe object.", "uint256 amount: The borrowing amount.", "uint256 shieldingRate: The shielding rate.", "uint256 nearestSpotInLiquidationQueue: The nearest spot in the liquidation queue.", "uint256 nearestSpotInRedemptionQueue: The nearest spot in the redemption queue."], "outputs": ["No value returned"]}, {"name": "min", "summary": "Returns the minimum value between two unsigned integers 'a' and 'b'.", "inputs": ["uint256 a: The first unsigned integer.", "uint256 b: The second unsigned integer."], "outputs": ["No value returned"]}, {"name": "calculateRedemptionAmountsAndFee", "summary": "Calculates the redemption amounts and fees associated with redeeming collateral from a Safe.", "inputs": ["Safe memory safe: The Safe object.", "uint256 amountToRedeem: The amount to redeem.", "uint256 collateralPrice: The collateral price."], "outputs": ["bool borrowMode: Indicates if the safe is in borrow mode.", "uint256 _collateralToRedeem: The amount of collateral to redeem.", "uint256 _amountToRedeem: The amount to redeem.", "uint256 _amountToRefund: The amount to refund.", "uint256 _ownerFee: The owner fee.", "uint256 _redeemerFee: The redeemer fee."]}, {"name": "_redeemNode", "summary": "Redeems a single node in the redemption queue.", "inputs": ["uint256 _safeId: The ID of the Safe.", "SBStructs.Redemption memory redemption: The redemption data.", "uint256 nearestSpotInLiquidationQueue: The nearest spot in the liquidation queue."], "outputs": ["No value returned"]}, {"name": "_redeemSafes", "summary": "Redeems multiple Safes using the provided redemption data.", "inputs": ["SBStructs.Redemption memory redemption: The redemption data.", "uint256 nearestSpotInLiquidationQueue: The nearest spot in the liquidation queue."], "outputs": ["No value returned"]}, {"name": "closeToZero", "summary": "Checks if a given unsigned integer 'value' is close to zero.", "inputs": ["uint256 value: The value to check."], "outputs": ["No value returned"]}, {"name": "redeemSafe", "summary": "Redeems a specific Safe based on the provided parameters.", "inputs": ["uint256 _safeId: The ID of the Safe.", "bool borrowMode: Indicates if the safe is in borrow mode.", "uint256 amountToRedeem: The amount to redeem.", "uint256 amountToRefund: The amount to refund.", "uint256 collateralToRedeem: The amount of collateral to redeem.", "uint256 collateralToReturn: The amount of collateral to return.", "Safe memory safe: The Safe object.", "uint256 nearestSpotInLiquidationQueue: The nearest spot in the liquidation queue.", "SBStructs.Redemption memory redemption: The redemption data."], "outputs": ["No value returned"]}, {"name": "_redeemToUser", "summary": "Redeems assets to a user based on the provided redemption data.", "inputs": ["SBStructs.Redemption memory redemption: The redemption data."], "outputs": ["No value returned"]}, {"name": "distributeFees", "summary": "Distributes fees associated with a Safe.", "inputs": ["uint256 safeId: The ID of the Safe.", "uint fee: The fee amount.", "bool mint: Indicates whether to mint tokens."], "outputs": ["No value returned"]}, {"name": "distributeDebtAndCollateral", "summary": "Distributes debt and collateral amounts after a liquidation event.", "inputs": ["uint256 debtAmount: The debt amount.", "uint256 collateralAmount: The collateral amount.", "uint256 totalCollateralAfterLiquidation: The total collateral after liquidation."], "outputs": ["No value returned"]}, {"name": "_updateSafe", "summary": "Updates the state of a Safe.", "inputs": ["uint _safeId: The ID of the Safe.", "Safe storage _safe: The Safe object."], "outputs": ["No value returned"]}, {"name": "_updateTotalDebt", "summary": "Updates the total debt in the system.", "inputs": ["uint256 currentDebt: The current debt.", "uint256 delta: The change in debt.", "bool add: Indicates whether to add or subtract the debt."], "outputs": ["No value returned"]}, {"name": "_liquidate", "summary": "Liquidates a specific Safe.", "inputs": ["uint256 _safeId: The ID of the Safe.", "uint256 gasStart: The initial gas amount."], "outputs": ["No value returned"]}, {"name": "_distributeLiquidationFeeAndGasCompensation", "summary": "Distributes the liquidation fee and gas compensation after a Safe is liquidated.", "inputs": ["uint256 safeId: The ID of the Safe.", "uint256 gasUsed: The amount of gas used.", "uint256 liquidationFee: The liquidation fee.", "uint256 refund: The refund amount."], "outputs": ["No value returned"]}, {"name": "_removeSafe", "summary": "Removes a Safe from the system.", "inputs": ["uint256 _safeId: The ID of the Safe."], "outputs": ["No value returned"]}, {"name": "_removeSafeFromBothQueues", "summary": "Removes a Safe from both liquidation and redemption queues.", "inputs": ["uint256 safeId: The ID of the Safe."], "outputs": ["No value returned"]}, {"name": "setCanStabilityPoolReceiveRewards", "summary": "Sets whether the stability pool can receive rewards.", "inputs": ["bool canReceiveRewards: True if the stability pool can receive rewards, false otherwise."], "outputs": ["bool: True if the stability pool can receive rewards, false otherwise."]}, {"name": "setCanSBRStakingPoolReceiveRewards", "summary": "Sets whether the SBR staking pool can receive rewards.", "inputs": ["bool canReceiveRewards: True if the SBR staking pool can receive rewards, false otherwise."], "outputs": ["bool: True if the SBR staking pool can receive rewards, false otherwise."]}], "is_deployable": false, "constructor": "constructor() Ownable(msg.sender) ERC721(\"StableBase Safe\", \"SBSafe\") {}"}, {"name": "StableBaseCDP", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/StableBaseCDP.sol", "type": "contract", "summary": "The `StableBaseCDP` contract, which inherits from `StableBase`, allows users to open, close, borrow from, repay to, add collateral to, and withdraw collateral from Collateralized Debt Positions (CDPs). CDPs are a mechanism to borrow against collateral. It also supports redemption, fee top-ups, liquidation, and adjustments of positions. It provides functionality to get inactive debt and collateral and update token URIs.", "functions": [{"name": "openSafe", "summary": "Opens a new safe (CDP) with a specified ID and amount. A safe is a Collateralized Debt Position.", "inputs": ["uint256 _safeId", "uint256 _amount"], "outputs": []}, {"name": "closeSafe", "summary": "Closes an existing safe (CDP) with a specified ID.", "inputs": ["uint256 safeId"], "outputs": []}, {"name": "borrow", "summary": "Borrows a specified amount from a safe (CDP), where `shieldingRate` affects borrowing costs and queue positions in liquidation and redemption queues influence priority.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 shieldingRate", "uint256 nearestSpotInLiquidationQueue", "uint256 nearestSpotInRedemptionQueue"], "outputs": []}, {"name": "repay", "summary": "Repays a specified amount to a safe (CDP), considering the position in the liquidation queue which influences repayment priority.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "addCollateral", "summary": "Adds collateral to a safe (CDP), considering the position in the liquidation queue which influences collateralization priority.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "withdrawCollateral", "summary": "Withdraws collateral from a safe (CDP), considering the position in the liquidation queue which influences withdrawal priority.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "redeem", "summary": "Redeems a specified amount, considering the liquidation queue position.", "inputs": ["uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "feeTopup", "summary": "Tops up the fee for a safe (CDP), considering the top-up rate and redemption queue position, which affects fee payment priority.", "inputs": ["uint256 safeId", "uint256 topupRate", "uint256 nearestSpotInRedemptionQueue"], "outputs": []}, {"name": "liquidate", "summary": "Initiates the liquidation process, potentially affecting multiple safes based on predefined liquidation criteria (details depend on implementation).", "inputs": [], "outputs": []}, {"name": "liquidateSafe", "summary": "Liquidates a specific safe (CDP) with the given ID.", "inputs": ["uint256 safeId"], "outputs": []}, {"name": "adjustPosition", "summary": "Adjusts the position of a safe (CDP), considering the liquidation queue position.", "inputs": ["uint256 safeId", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "getInactiveDebtAndCollateral", "summary": "Retrieves the inactive debt and collateral for a safe (CDP).", "inputs": ["uint256 safeId"], "outputs": ["uint256", "uint256"]}, {"name": "updateTokenURI", "summary": "Updates the token URI for a specific token ID.", "inputs": ["uint256 tokenId", "string memory newTokenURI"], "outputs": []}, {"name": "_isApprovedOrOwner", "summary": "Likely an internal function that checks if a spender is approved or the owner of a token.  The leading underscore suggests it's not intended for external use.", "inputs": ["address spender", "uint256 tokenId"], "outputs": []}], "is_deployable": true, "constructor": "constructor() StableBase() {}"}, {"name": "SBStructs", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/Structures.sol", "type": "library", "summary": "This contract defines a library named `SBStructs`. Libraries are not deployable and are designed to be called by other contracts. This library likely provides custom data structures (structs) for use in other smart contracts, promoting code reusability and organization.", "functions": [], "is_deployable": false, "constructor": "null"}, {"name": "SBUtils", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/Utilities.sol", "type": "library", "summary": "The SBUtils library provides utility functions for safe ID generation, depositing and withdrawing ETH or tokens, and retrieving rates at specific positions. It appears to be designed for use in other smart contracts and is not intended to be deployed on its own.", "functions": [{"name": "getSafeId", "summary": "Generates a safe ID based on the borrower's address and the token address.", "inputs": ["address _borrower", "address _token"], "outputs": ["unknown"]}, {"name": "depositEthOrToken", "summary": "Deposits either ETH or a specified token to a given address.", "inputs": ["address _token", "address _to", "uint256 _amount"], "outputs": ["unknown"]}, {"name": "withdrawEthOrToken", "summary": "Withdraws either ETH or a specified token from the contract to a given address.", "inputs": ["address _token", "address _to", "uint256 _amount"], "outputs": ["unknown"]}, {"name": "getRateAtPosition", "summary": "Retrieves the rate at a specific position given a compressed rate value.", "inputs": ["uint256 _compressedRate", "uint256 _position"], "outputs": ["unknown"]}], "is_deployable": false, "constructor": "null"}, {"name": "ChainlinkPriceFeed", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/dependencies/price-oracle/ChainlinkPriceOracle.sol", "type": "contract", "summary": "The ChainlinkPriceFeed contract is designed to fetch price data from Chainlink price feeds. It supports multiple chains based on the chain ID provided in the constructor. It has functions to fetch the latest price.", "functions": [{"name": "lastGoodPrice", "summary": "This function returns the last good price from the Chainlink price feed.", "inputs": [], "outputs": ["uint256"]}, {"name": "fetchPrice", "summary": "This function fetches the latest price from the Chainlink price feed.", "inputs": [], "outputs": ["uint256"]}], "is_deployable": true, "constructor": "constructor(uint256 chainId) {\n        if (chainId == 1) {\n            // Ethereum Mainnet\n            priceFeed = AggregatorV3Interface(\n                0x5f4eC3Df9cbd43714FE2740f5E3616155c5b8419\n            );\n        } else if (chainId == 11155111) {\n            // Sepolia Testnet\n            priceFeed = AggregatorV3Interface(\n                0x694AA1769357215DE4FAC081bf1f309aDC325306\n            );\n        } else if (chainId == 5) {\n            // Goerli Testnet (if needed)\n            priceFeed = AggregatorV3Interface(\n                0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e\n            );\n        } else {\n            revert(\"Unsupported chain ID\");\n        }\n    }"}, {"name": "MockPriceOracle", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/dependencies/price-oracle/MockPriceOracle.sol", "type": "contract", "summary": "The MockPriceOracle contract provides mock price data. It allows setting a price and fetching the last good price. The contract inherits from Ownable, restricting ownership-related functions to the owner.", "functions": [{"name": "setPrice", "summary": "Sets the price.", "inputs": ["uint256 _price"], "outputs": []}, {"name": "lastGoodPrice", "summary": "Returns the last good price.", "inputs": [], "outputs": ["uint256"]}, {"name": "fetchPrice", "summary": "Fetches the price.", "inputs": [], "outputs": ["uint256"]}], "is_deployable": true, "constructor": "constructor() Ownable(msg.sender) {}"}, {"name": "IDFIREStaking", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IDFIREStaking.sol", "type": "interface", "summary": "The IDFIREStaking interface defines the functions for a staking contract, allowing users to stake, unstake, and claim rewards. It also includes functions for adding rewards to the contract.", "functions": [{"name": "stake", "summary": "Allows a user to stake a specified amount of tokens.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "unstake", "summary": "Allows a user to unstake a specified amount of tokens.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "claim", "summary": "Allows a user to claim their accumulated rewards.", "inputs": [], "outputs": []}, {"name": "addReward", "summary": "Allows the contract owner to add rewards to the staking pool.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "addCollateralReward", "summary": "Allows the contract owner to add collateral rewards.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "getStake", "summary": "Retrieves the staking information for a given user.", "inputs": ["address user"], "outputs": ["Stake memory stake"]}, {"name": "userPendingReward", "summary": "Retrieves the pending rewards for a given user.", "inputs": ["address user"], "outputs": ["uint256, uint256"]}], "is_deployable": false, "constructor": "null"}, {"name": "IDoublyLinkedList", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IDoublyLinkedList.sol", "type": "interface", "summary": "The IDoublyLinkedList interface defines the functions for managing a doubly linked list. It allows for inserting (upsert), retrieving (get), and removing nodes based on their ID. It also provides functions to access the head and tail of the list.", "functions": [{"name": "remove", "summary": "Removes a node from the linked list given its ID and returns the removed node.", "inputs": ["uint256 id"], "outputs": ["Node memory"]}, {"name": "get", "summary": "Retrieves a node from the linked list given its ID and returns the node.", "inputs": ["uint256 id"], "outputs": ["Node memory"]}, {"name": "upsert", "summary": "Inserts a new node or updates an existing node in the linked list. The '_nearestSpot' parameter likely influences where the node is inserted relative to other nodes. Returns the inserted/updated node.", "inputs": ["uint256 id", "uint256 value", "uint256 _nearestSpot"], "outputs": ["Node memory"]}, {"name": "getHead", "summary": "Returns the ID of the head node of the linked list.", "inputs": [], "outputs": ["uint256"]}, {"name": "getTail", "summary": "Returns the ID of the tail node of the linked list.", "inputs": [], "outputs": ["uint256"]}], "is_deployable": false, "constructor": "null"}, {"name": "IPriceOracle", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IPriceOracle.sol", "type": "interface", "summary": "This interface defines a price oracle, providing functions to fetch the latest price and retrieve the last known good price.", "functions": [{"name": "lastGoodPrice", "summary": "Returns the last known good price.", "inputs": [], "outputs": ["The last known good price as a uint256."]}, {"name": "fetchPrice", "summary": "Fetches the latest price.", "inputs": [], "outputs": ["The latest price as a uint256."]}], "is_deployable": false, "constructor": "N/A"}, {"name": "IRateGovernors", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IRateGovernors.sol", "type": "interface", "summary": "The `IRateGovernors` interface defines functions for managing staking, shielding rates, and reserve ratios, likely within a system where users stake assets and the protocol adjusts rates and reserves based on governance or other mechanisms. It enables adding and removing stakes, updating target shielding rates, adjusting reserve ratios, and redeeming assets.", "functions": [{"name": "updateTargetShieldingRate", "summary": "Updates the target shielding rate for a specific stake ID.", "inputs": ["uint256 id", "uint256 _targetShieldingRate"], "outputs": ["None"]}, {"name": "updateReserveRatio", "summary": "Updates the reserve ratio for the contract.", "inputs": ["uint256 _reserveRatio"], "outputs": ["None"]}, {"name": "redeem", "summary": "Allows users to redeem their assets.", "inputs": [], "outputs": ["None"]}, {"name": "addStake", "summary": "Adds a certain amount of stake to a specific ID.", "inputs": ["uint256 id", "uint256 amount"], "outputs": ["None"]}, {"name": "getStake", "summary": "Retrieves the stake amount for a given ID.", "inputs": ["uint256 id"], "outputs": ["uint256"]}, {"name": "removeStake", "summary": "Removes a specific amount of stake from a given ID. Returns a boolean indicating success, and the remaining stake.", "inputs": ["uint256 id", "uint256 amount"], "outputs": ["bool, uint256"]}, {"name": "removeStake", "summary": "Removes all stake from a given ID. Returns a boolean indicating success, and the remaining stake (should be 0).", "inputs": ["uint256 id"], "outputs": ["bool, uint256"]}], "is_deployable": false, "constructor": "N/A"}, {"name": "IReservePool", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IReservePool.sol", "type": "interface", "summary": "The IReservePool interface defines the functions for managing stakes within reserve pools. It allows users to add and remove stakes, and query the current stake amount for a given pool ID. It is not deployable.", "functions": [{"name": "addStake", "summary": "Allows users to add stake to a specific staking pool identified by an ID.", "inputs": ["uint256 id", "uint256 amount"], "outputs": []}, {"name": "getStake", "summary": "Retrieves the stake amount for a given staking pool ID.", "inputs": ["uint256 id"], "outputs": ["uint256"]}, {"name": "removeStake", "summary": "Allows users to remove a specific amount of stake from a given staking pool ID. It returns a boolean indicating success and the remaining stake.", "inputs": ["uint256 id", "uint256 amount"], "outputs": ["bool", "uint256"]}, {"name": "removeStake", "summary": "Allows users to remove stake from a given staking pool ID. It returns a boolean indicating success and the remaining stake.", "inputs": ["uint256 id"], "outputs": ["bool", "uint256"]}], "is_deployable": false, "constructor": "null"}, {"name": "IStabilityPool", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IStabilityPool.sol", "type": "interface", "summary": "The IStabilityPool interface defines functions for interacting with a stability pool, allowing users to stake, unstake, claim rewards, liquidate positions, and manage rewards.", "functions": [{"name": "stake", "summary": "Allows a user to stake a specified amount of tokens into the stability pool.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "stake", "summary": "Allows a user to stake tokens, potentially with a referral and fee.", "inputs": ["uint256 _amount", "address _frontend", "uint256 fee"], "outputs": []}, {"name": "unstake", "summary": "Allows a user to unstake a specified amount of tokens from the stability pool.", "inputs": ["uint256 _amount"], "outputs": []}, {"name": "unstake", "summary": "Allows a user to unstake tokens, potentially with a referral and fee.", "inputs": ["uint256 _amount", "address _frontend", "uint256 fee"], "outputs": []}, {"name": "claim", "summary": "Allows a user to claim accumulated rewards.", "inputs": [], "outputs": []}, {"name": "claim", "summary": "Allows a user to claim rewards, potentially with a referral and fee.", "inputs": ["address _frontend", "uint256 fee"], "outputs": []}, {"name": "isLiquidationPossible", "summary": "Checks if a liquidation is possible for a given amount.", "inputs": ["uint256 amount"], "outputs": ["bool"]}, {"name": "performLiquidation", "summary": "Performs a liquidation with the given amount and collateral.", "inputs": ["uint256 amount", "uint256 collateral"], "outputs": ["bool"]}, {"name": "addReward", "summary": "Adds rewards to the stability pool.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "addCollateralReward", "summary": "Adds collateral rewards to the stability pool.", "inputs": ["uint256 _amount"], "outputs": ["bool"]}, {"name": "getUser", "summary": "Retrieves user information.", "inputs": ["address user"], "outputs": ["UserInfo memory userInfo"]}, {"name": "userPendingReward", "summary": "Retrieves the pending reward for a user.", "inputs": ["address user"], "outputs": ["uint256"]}, {"name": "userPendingCollateral", "summary": "Retrieves the pending collateral for a user.", "inputs": ["address user"], "outputs": ["uint256"]}], "is_deployable": false, "constructor": "null"}, {"name": "IStableBase", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IStableBase.sol", "type": "interface", "summary": "The IStableBase interface defines the core functions for managing safes (collateralized debt positions) within a stablecoin system. It includes functionalities for opening, closing, borrowing, repaying, adding/withdrawing collateral, redeeming, topping up fees, and liquidating safes. It also includes functions to control rewards distribution to stability and staking pools.", "functions": [{"name": "openSafe", "summary": "Opens a new safe, creating a collateralized debt position with a specified ID and initial collateral amount.", "inputs": ["uint256 _safeId", "uint256 _amount"], "outputs": []}, {"name": "closeSafe", "summary": "Closes an existing safe, allowing the user to withdraw any remaining collateral after repaying the debt.", "inputs": ["uint256 _safeId"], "outputs": []}, {"name": "borrow", "summary": "Allows a user to borrow stablecoins against their collateral within a safe, considering current shielding rate and queue positions.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 shieldingRate", "uint256 nearestSpotInLiquidationQueue", "uint256 nearestSpotInRedemptionQueue"], "outputs": []}, {"name": "repay", "summary": "Allows a user to repay borrowed stablecoins, reducing their debt within a safe, considering current liquidation queue position.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "addCollateral", "summary": "Allows a user to add more collateral to an existing safe, improving its collateralization ratio, considering current liquidation queue position.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "withdrawCollateral", "summary": "Allows a user to withdraw collateral from an existing safe, as long as the collateralization ratio remains above the minimum, considering current liquidation queue position.", "inputs": ["uint256 safeId", "uint256 amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "redeem", "summary": "Allows a user to redeem stablecoins for collateral, potentially reducing the overall supply of stablecoins, considering current liquidation queue position.", "inputs": ["uint256 _amount", "uint256 nearestSpotInLiquidationQueue"], "outputs": []}, {"name": "feeTopup", "summary": "Allows topping up fees associated with a safe, ensuring continued operation within the system, considering current redemption queue position.", "inputs": ["uint256 safeId", "uint256 topupRate", "uint256 nearestSpotInRedemptionQueue"], "outputs": []}, {"name": "liquidate", "summary": "Initiates the liquidation process for undercollateralized safes.", "inputs": [], "outputs": []}, {"name": "getInactiveDebtAndCollateral", "summary": "Retrieves the amount of inactive debt and collateral associated with a specific safe.", "inputs": ["uint256 safeId"], "outputs": ["uint256, uint256"]}, {"name": "setCanStabilityPoolReceiveRewards", "summary": "Sets whether the Stability Pool is eligible to receive rewards within the system.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}, {"name": "setCanSBRStakingPoolReceiveRewards", "summary": "Sets whether the SBR (Savings Booster Reward) Staking Pool is eligible to receive rewards within the system.", "inputs": ["bool canReceiveRewards"], "outputs": ["bool"]}], "is_deployable": false, "constructor": "null"}, {"name": "IStableBaseCDP", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/interfaces/IStableBaseCDP.sol", "type": "interface", "summary": "The IStableBaseCDP interface defines the methods for interacting with a stablecoin CDP (Collateralized Debt Position) system. It allows users to open, close, borrow from, repay, and manage their CDPs using various collateral tokens. It also includes functionality for liquidation, reserve ratio updates, and fee adjustments.", "functions": [{"name": "openSafe", "summary": "Opens a new CDP (Safe) with specified collateral token, amount, reserve ratio, and position in reserve.", "inputs": ["address collateralToken", "uint256 amount", "uint256 reserveRatio", "uint256 positionInReserve"], "outputs": []}, {"name": "closeSafe", "summary": "Closes an existing CDP (Safe) for a given collateral token.", "inputs": ["address collateralToken"], "outputs": []}, {"name": "borrow", "summary": "Borrows a specified amount against a collateral token.", "inputs": ["address collateralToken", "uint256 amount"], "outputs": []}, {"name": "repay", "summary": "Repays a specified amount of debt for a given collateral token.", "inputs": ["address collateralToken", "uint256 amount"], "outputs": []}, {"name": "withdrawCollateral", "summary": "Withdraws a specified amount of collateral for a given collateral token.", "inputs": ["address collateralToken", "uint256 amount"], "outputs": []}, {"name": "redeem", "summary": "Redeems a specified amount of stablecoin.", "inputs": ["uint256 amount"], "outputs": []}, {"name": "liquidate", "summary": "Liquidates a CDP (Safe) with a specified ID.", "inputs": ["uint256 id"], "outputs": []}, {"name": "repayAndLiquidate", "summary": "Repays debt and liquidates a CDP (Safe) with a specified ID.", "inputs": ["uint256 id"], "outputs": []}, {"name": "updateReserveRatio", "summary": "Updates the reserve ratio and position in reserve for a given collateral token.", "inputs": ["address collateralToken", "uint256 newReserveRatio", "uint256 newPositionInReserve"], "outputs": []}, {"name": "updateOriginationFee", "summary": "Updates the origination fee for a given collateral token.", "inputs": ["address collateralToken", "uint256 newOriginationFee"], "outputs": []}, {"name": "setStabilityPoolCanReceiveRewards", "summary": "Sets whether the stability pool can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": []}, {"name": "setSBRStakingCanReceiveRewards", "summary": "Sets whether the SBR staking can receive rewards.", "inputs": ["bool canReceiveRewards"], "outputs": []}], "is_deployable": false, "constructor": "null"}, {"name": "Math", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/library/Math.sol", "type": "library", "summary": "The Math contract is a library that provides functions for performing calculations related to rates, including adding, subtracting, checking for zero values, calculating shielding hours, and converting hours to seconds. It is designed to manage and manipulate rate values, potentially for use in other smart contracts. Because it is a library, it cannot be deployed.", "functions": [{"name": "calculateRate", "summary": "This function calculates a rate based on the input Rate struct. It likely performs some mathematical operation on the rate to update or transform it.", "inputs": ["Rate memory rate"], "outputs": []}, {"name": "add", "summary": "This function adds a weighted value to the rate stored in the Rate struct. This could be used to increase the rate based on the magnitude and importance of a given value.", "inputs": ["Rate memory rate", "uint256 value", "uint256 weight"], "outputs": []}, {"name": "subtract", "summary": "This function subtracts a weighted value from the rate stored in the Rate struct. It may be used to decrease or adjust the rate in response to a certain value.", "inputs": ["Rate memory rate", "uint256 value", "uint256 weight"], "outputs": []}, {"name": "isZero", "summary": "This function checks if the rate stored in the Rate struct is zero. It probably returns a boolean value and can be used to determine if a rate has been initialized or has reached its minimum value.", "inputs": ["Rate memory rate"], "outputs": []}, {"name": "getShieldingHours", "summary": "This function calculates the shielding hours based on a reference rate and a current rate. This could relate to a system where higher rates provide more protection or 'shielding' for a certain duration.", "inputs": ["Rate memory referenceRate", "uint256 currentRate"], "outputs": []}, {"name": "toSeconds", "summary": "This function converts hours to seconds. This utility function may be used in other parts of the contract or system for time-based calculations.", "inputs": ["uint256 hours_"], "outputs": []}], "is_deployable": false, "constructor": "No constructor"}, {"name": "OrderedDoublyLinkedList", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/library/OrderedDoublyLinkedList.sol", "type": "contract", "summary": "This contract implements an ordered doubly linked list, providing functionalities to insert, remove, update, and retrieve nodes. It supports retrieving the head, tail, and a range of nodes. The contract inherits Ownable, restricting `setAddresses` function to the owner.", "functions": [{"name": "setAddresses", "summary": "Sets the address of the stable base CDP contract. Only callable by the owner.", "inputs": ["address _stableBaseCDP"], "outputs": []}, {"name": "_insert", "summary": "Inserts a new node with provided node data into the linked list near a specified spot. Internal function.", "inputs": ["uint256 id", "Node memory node", "uint256 _nearestSpot"], "outputs": []}, {"name": "_insert", "summary": "Inserts a new node with a given value into the linked list near a specified spot. Internal function.", "inputs": ["uint256 id", "uint256 value", "uint256 _nearestSpot"], "outputs": []}, {"name": "_remove", "summary": "Removes a node with the given ID from the linked list. Internal function.", "inputs": ["uint256 id"], "outputs": []}, {"name": "_update", "summary": "Updates the value of a node with a given ID, positioning it near the specified spot. Internal function.", "inputs": ["uint256 id", "uint256 value", "uint256 _nearestSpot"], "outputs": []}, {"name": "upsert", "summary": "Inserts a new node or updates an existing node with the given ID and value, positioning it near a specified spot. Callable by anyone.", "inputs": ["uint256 id", "uint256 value", "uint256 _nearestSpot"], "outputs": []}, {"name": "remove", "summary": "Removes a node with the given ID from the linked list. Callable by anyone.", "inputs": ["uint256 id"], "outputs": []}, {"name": "get", "summary": "Retrieves the value of a node with the given ID. Callable by anyone.", "inputs": ["uint256 id"], "outputs": []}, {"name": "getHead", "summary": "Retrieves the ID of the head node. Callable by anyone.", "inputs": [], "outputs": []}, {"name": "getTail", "summary": "Retrieves the ID of the tail node. Callable by anyone.", "inputs": [], "outputs": []}, {"name": "getNode", "summary": "Retrieves the node data for the given ID. Public function.", "inputs": ["uint256 id"], "outputs": ["Node memory"]}, {"name": "getNodes", "summary": "Retrieves a specified number of nodes starting from a given ID. Callable by anyone.", "inputs": ["uint256 beginAt", "uint256 total"], "outputs": ["Node[50] memory n, uint256 totalFound"]}], "is_deployable": true, "constructor": "constructor() Ownable(msg.sender) {\n        head = 0;\n        tail = 0;\n    }"}, {"name": "RateLib", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/library/Rate.sol", "type": "library", "summary": "This library provides functions for calculating, adding to, subtracting from, and checking if a rate is zero. It operates on a custom Math.Rate struct.", "functions": [{"name": "calculateRate", "summary": "Calculates a rate based on the given Math.Rate struct.", "inputs": ["Math.Rate memory rate"], "outputs": ["None"]}, {"name": "add", "summary": "Adds a value with a certain weight to a given Math.Rate struct.", "inputs": ["Math.Rate memory rate", "uint256 value", "uint256 weight"], "outputs": ["None"]}, {"name": "subtract", "summary": "Subtracts a value with a certain weight from a given Math.Rate struct.", "inputs": ["Math.Rate memory rate", "uint256 value", "uint256 weight"], "outputs": ["None"]}, {"name": "isZero", "summary": "Checks if a given Math.Rate struct is zero.", "inputs": ["Math.Rate memory rate"], "outputs": ["None"]}], "is_deployable": false, "constructor": "None"}, {"name": "ReenterDfireStaking", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/test/ReenterDfireStaking.sol", "type": "contract", "summary": "The contract `ReenterDfireStaking` is designed to interact with a `DFIREStaking` contract, specifically to exploit potential re-entrancy vulnerabilities within it. It provides functions to stake, unstake, and claim rewards from the `DFIREStaking` contract. Each function includes a `_reenterFunction` parameter, intended to control the execution flow and potentially trigger re-entrancy during the interaction with the `DFIREStaking` contract. It takes `_dfireStaking` and `_dfireStakingToken` in the constructor to specify the staking contract address and token address.", "functions": [{"name": "stake1", "summary": "This function calls the `dfireStaking.stake()` function, with the intention of triggering a re-entrancy vulnerability. The `_reenterFunction` parameter is used to control the re-entrancy behavior. This function does not take an `amount` and may cause issue if the `dfireStaking.stake()` requires an `amount`.", "inputs": ["uint256 _reenterFunction"], "outputs": ["None"]}, {"name": "stake2", "summary": "This function calls the `dfireStaking.stake()` function, with the intention of triggering a re-entrancy vulnerability. The `_reenterFunction` parameter is used to control the re-entrancy behavior, and `amount` specifies the amount of tokens to stake.", "inputs": ["uint256 _reenterFunction", "uint256 amount"], "outputs": ["None"]}, {"name": "unstake", "summary": "This function calls the `dfireStaking.unstake()` function, with the intention of triggering a re-entrancy vulnerability. The `_reenterFunction` parameter is used to control the re-entrancy behavior.", "inputs": ["uint256 _reenterFunction"], "outputs": ["None"]}, {"name": "claim", "summary": "This function calls the `dfireStaking.claim()` function, with the intention of triggering a re-entrancy vulnerability. The `_reenterFunction` parameter is used to control the re-entrancy behavior.", "inputs": ["uint256 _reenterFunction"], "outputs": ["None"]}], "is_deployable": true, "constructor": "constructor(address _dfireStaking, address _dfireStakingToken) {\n        dfireStaking = IDFIREStaking(_dfireStaking);\n        stakeToken = IERC20(_dfireStakingToken);\n    }"}, {"name": "ReenterStabilityPool", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/test/ReenterStabilityPool.sol", "type": "contract", "summary": "The ReenterStabilityPool contract is designed to exploit reentrancy vulnerabilities in a StabilityPool contract. It provides functions to re-enter the stake, unstake and claim functions of the StabilityPool contract. This contract is deployable because it is a concrete contract.", "functions": [{"name": "stake1", "summary": "This function exploits a reentrancy vulnerability to re-enter the stability pool's stake function. It takes a uint256 _reenterFunction to control the reentrancy.", "inputs": ["uint256 _reenterFunction"], "outputs": []}, {"name": "stake2", "summary": "This function exploits a reentrancy vulnerability to re-enter the stability pool's stake function, with an additional 'amount' parameter. It takes a uint256 _reenterFunction to control the reentrancy, and uint256 amount.", "inputs": ["uint256 _reenterFunction", "uint256 amount"], "outputs": []}, {"name": "unstake", "summary": "This function exploits a reentrancy vulnerability to re-enter the stability pool's unstake function. It takes a uint256 _reenterFunction to control the reentrancy.", "inputs": ["uint256 _reenterFunction"], "outputs": []}, {"name": "claim", "summary": "This function exploits a reentrancy vulnerability to re-enter the stability pool's claim function. It takes a uint256 _reenterFunction to control the reentrancy.", "inputs": ["uint256 _reenterFunction"], "outputs": []}], "is_deployable": true, "constructor": "constructor(address _stabilityPool, address _stakeToken) {\n        stabilityPool = IStabilityPool(_stabilityPool);\n        stakeToken = IERC20(_stakeToken);\n    }"}, {"name": "TestMath", "path": "/tmp/workspaces/b2467fc4-e77a-4529-bcea-09c31cb2e8fe/stablebase/contracts/tests/TestMath.sol", "type": "contract", "summary": "The 'TestMath' contract is designed to perform mathematical operations involving weighted values and calculate a rate based on these operations. It includes functions to add and subtract weighted values and a function to calculate a rate.", "functions": [{"name": "addValue", "summary": "This function adds a weighted value to a state variable. The function takes two unsigned integer inputs: 'value' and 'weight'. It updates the contract's state by adding the product of 'value' and 'weight'.", "inputs": ["uint256 value", "uint256 weight"], "outputs": []}, {"name": "subtractValue", "summary": "This function subtracts a weighted value from a state variable. It takes two unsigned integer inputs: 'value' and 'weight'. It updates the contract's state by subtracting the product of 'value' and 'weight'.", "inputs": ["uint256 value", "uint256 weight"], "outputs": []}, {"name": "calculateRate", "summary": "This function calculates a rate based on the current state. It takes no inputs and returns an unsigned integer representing the calculated rate.", "inputs": [], "outputs": ["uint256"]}], "is_deployable": true, "constructor": "null"}]}